
Mario_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa44  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011a88  0800abe4  0800abe4  0000bbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c66c  0801c66c  0001e134  2**0
                  CONTENTS
  4 .ARM          00000008  0801c66c  0801c66c  0001d66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c674  0801c674  0001e134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c674  0801c674  0001d674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c678  0801c678  0001d678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000134  20000000  0801c67c  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000072dc  20000134  0801c7b0  0001e134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007410  0801c7b0  0001e410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e134  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147c3  00000000  00000000  0001e164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed2  00000000  00000000  00032927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  00035800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018a10  00000000  00000000  00036ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018fa5  00000000  00000000  0004f4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009252c  00000000  00000000  0006846d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000fa999  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000e8c  00000000  00000000  000fa9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054bc  00000000  00000000  000fb868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00100d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000134 	.word	0x20000134
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800abcc 	.word	0x0800abcc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000138 	.word	0x20000138
 80001dc:	0800abcc 	.word	0x0800abcc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96a 	b.w	8000bd8 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	460c      	mov	r4, r1
 8000924:	2b00      	cmp	r3, #0
 8000926:	d14e      	bne.n	80009c6 <__udivmoddi4+0xaa>
 8000928:	4694      	mov	ip, r2
 800092a:	458c      	cmp	ip, r1
 800092c:	4686      	mov	lr, r0
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	d962      	bls.n	80009fa <__udivmoddi4+0xde>
 8000934:	b14a      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000936:	f1c2 0320 	rsb	r3, r2, #32
 800093a:	4091      	lsls	r1, r2
 800093c:	fa20 f303 	lsr.w	r3, r0, r3
 8000940:	fa0c fc02 	lsl.w	ip, ip, r2
 8000944:	4319      	orrs	r1, r3
 8000946:	fa00 fe02 	lsl.w	lr, r0, r2
 800094a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800094e:	fa1f f68c 	uxth.w	r6, ip
 8000952:	fbb1 f4f7 	udiv	r4, r1, r7
 8000956:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095a:	fb07 1114 	mls	r1, r7, r4, r1
 800095e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000962:	fb04 f106 	mul.w	r1, r4, r6
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000972:	f080 8112 	bcs.w	8000b9a <__udivmoddi4+0x27e>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 810f 	bls.w	8000b9a <__udivmoddi4+0x27e>
 800097c:	3c02      	subs	r4, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a59      	subs	r1, r3, r1
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb1 f0f7 	udiv	r0, r1, r7
 800098a:	fb07 1110 	mls	r1, r7, r0, r1
 800098e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000992:	fb00 f606 	mul.w	r6, r0, r6
 8000996:	429e      	cmp	r6, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x94>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 31ff 	add.w	r1, r0, #4294967295
 80009a2:	f080 80fc 	bcs.w	8000b9e <__udivmoddi4+0x282>
 80009a6:	429e      	cmp	r6, r3
 80009a8:	f240 80f9 	bls.w	8000b9e <__udivmoddi4+0x282>
 80009ac:	4463      	add	r3, ip
 80009ae:	3802      	subs	r0, #2
 80009b0:	1b9b      	subs	r3, r3, r6
 80009b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009b6:	2100      	movs	r1, #0
 80009b8:	b11d      	cbz	r5, 80009c2 <__udivmoddi4+0xa6>
 80009ba:	40d3      	lsrs	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	e9c5 3200 	strd	r3, r2, [r5]
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d905      	bls.n	80009d6 <__udivmoddi4+0xba>
 80009ca:	b10d      	cbz	r5, 80009d0 <__udivmoddi4+0xb4>
 80009cc:	e9c5 0100 	strd	r0, r1, [r5]
 80009d0:	2100      	movs	r1, #0
 80009d2:	4608      	mov	r0, r1
 80009d4:	e7f5      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009d6:	fab3 f183 	clz	r1, r3
 80009da:	2900      	cmp	r1, #0
 80009dc:	d146      	bne.n	8000a6c <__udivmoddi4+0x150>
 80009de:	42a3      	cmp	r3, r4
 80009e0:	d302      	bcc.n	80009e8 <__udivmoddi4+0xcc>
 80009e2:	4290      	cmp	r0, r2
 80009e4:	f0c0 80f0 	bcc.w	8000bc8 <__udivmoddi4+0x2ac>
 80009e8:	1a86      	subs	r6, r0, r2
 80009ea:	eb64 0303 	sbc.w	r3, r4, r3
 80009ee:	2001      	movs	r0, #1
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d0e6      	beq.n	80009c2 <__udivmoddi4+0xa6>
 80009f4:	e9c5 6300 	strd	r6, r3, [r5]
 80009f8:	e7e3      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	f040 8090 	bne.w	8000b20 <__udivmoddi4+0x204>
 8000a00:	eba1 040c 	sub.w	r4, r1, ip
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	fa1f f78c 	uxth.w	r7, ip
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a16:	fb08 4416 	mls	r4, r8, r6, r4
 8000a1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1e:	fb07 f006 	mul.w	r0, r7, r6
 8000a22:	4298      	cmp	r0, r3
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x11c>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x11a>
 8000a30:	4298      	cmp	r0, r3
 8000a32:	f200 80cd 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 8000a36:	4626      	mov	r6, r4
 8000a38:	1a1c      	subs	r4, r3, r0
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a42:	fb08 4410 	mls	r4, r8, r0, r4
 8000a46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4a:	fb00 f707 	mul.w	r7, r0, r7
 8000a4e:	429f      	cmp	r7, r3
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x148>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5a:	d202      	bcs.n	8000a62 <__udivmoddi4+0x146>
 8000a5c:	429f      	cmp	r7, r3
 8000a5e:	f200 80b0 	bhi.w	8000bc2 <__udivmoddi4+0x2a6>
 8000a62:	4620      	mov	r0, r4
 8000a64:	1bdb      	subs	r3, r3, r7
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	e7a5      	b.n	80009b8 <__udivmoddi4+0x9c>
 8000a6c:	f1c1 0620 	rsb	r6, r1, #32
 8000a70:	408b      	lsls	r3, r1
 8000a72:	fa22 f706 	lsr.w	r7, r2, r6
 8000a76:	431f      	orrs	r7, r3
 8000a78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a80:	ea43 030c 	orr.w	r3, r3, ip
 8000a84:	40f4      	lsrs	r4, r6
 8000a86:	fa00 f801 	lsl.w	r8, r0, r1
 8000a8a:	0c38      	lsrs	r0, r7, #16
 8000a8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a90:	fbb4 fef0 	udiv	lr, r4, r0
 8000a94:	fa1f fc87 	uxth.w	ip, r7
 8000a98:	fb00 441e 	mls	r4, r0, lr, r4
 8000a9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000aa4:	45a1      	cmp	r9, r4
 8000aa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aaa:	d90a      	bls.n	8000ac2 <__udivmoddi4+0x1a6>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ab2:	f080 8084 	bcs.w	8000bbe <__udivmoddi4+0x2a2>
 8000ab6:	45a1      	cmp	r9, r4
 8000ab8:	f240 8081 	bls.w	8000bbe <__udivmoddi4+0x2a2>
 8000abc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ac0:	443c      	add	r4, r7
 8000ac2:	eba4 0409 	sub.w	r4, r4, r9
 8000ac6:	fa1f f983 	uxth.w	r9, r3
 8000aca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ace:	fb00 4413 	mls	r4, r0, r3, r4
 8000ad2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ada:	45a4      	cmp	ip, r4
 8000adc:	d907      	bls.n	8000aee <__udivmoddi4+0x1d2>
 8000ade:	193c      	adds	r4, r7, r4
 8000ae0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ae4:	d267      	bcs.n	8000bb6 <__udivmoddi4+0x29a>
 8000ae6:	45a4      	cmp	ip, r4
 8000ae8:	d965      	bls.n	8000bb6 <__udivmoddi4+0x29a>
 8000aea:	3b02      	subs	r3, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000af2:	fba0 9302 	umull	r9, r3, r0, r2
 8000af6:	eba4 040c 	sub.w	r4, r4, ip
 8000afa:	429c      	cmp	r4, r3
 8000afc:	46ce      	mov	lr, r9
 8000afe:	469c      	mov	ip, r3
 8000b00:	d351      	bcc.n	8000ba6 <__udivmoddi4+0x28a>
 8000b02:	d04e      	beq.n	8000ba2 <__udivmoddi4+0x286>
 8000b04:	b155      	cbz	r5, 8000b1c <__udivmoddi4+0x200>
 8000b06:	ebb8 030e 	subs.w	r3, r8, lr
 8000b0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b12:	40cb      	lsrs	r3, r1
 8000b14:	431e      	orrs	r6, r3
 8000b16:	40cc      	lsrs	r4, r1
 8000b18:	e9c5 6400 	strd	r6, r4, [r5]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	e750      	b.n	80009c2 <__udivmoddi4+0xa6>
 8000b20:	f1c2 0320 	rsb	r3, r2, #32
 8000b24:	fa20 f103 	lsr.w	r1, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b30:	4094      	lsls	r4, r2
 8000b32:	430c      	orrs	r4, r1
 8000b34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3c:	fa1f f78c 	uxth.w	r7, ip
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3110 	mls	r1, r8, r0, r3
 8000b48:	0c23      	lsrs	r3, r4, #16
 8000b4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4e:	fb00 f107 	mul.w	r1, r0, r7
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x24c>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b5e:	d22c      	bcs.n	8000bba <__udivmoddi4+0x29e>
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d92a      	bls.n	8000bba <__udivmoddi4+0x29e>
 8000b64:	3802      	subs	r0, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a5b      	subs	r3, r3, r1
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b70:	fb08 3311 	mls	r3, r8, r1, r3
 8000b74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b78:	fb01 f307 	mul.w	r3, r1, r7
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x276>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b88:	d213      	bcs.n	8000bb2 <__udivmoddi4+0x296>
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	d911      	bls.n	8000bb2 <__udivmoddi4+0x296>
 8000b8e:	3902      	subs	r1, #2
 8000b90:	4464      	add	r4, ip
 8000b92:	1ae4      	subs	r4, r4, r3
 8000b94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b98:	e739      	b.n	8000a0e <__udivmoddi4+0xf2>
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	e6f0      	b.n	8000980 <__udivmoddi4+0x64>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e706      	b.n	80009b0 <__udivmoddi4+0x94>
 8000ba2:	45c8      	cmp	r8, r9
 8000ba4:	d2ae      	bcs.n	8000b04 <__udivmoddi4+0x1e8>
 8000ba6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000baa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bae:	3801      	subs	r0, #1
 8000bb0:	e7a8      	b.n	8000b04 <__udivmoddi4+0x1e8>
 8000bb2:	4631      	mov	r1, r6
 8000bb4:	e7ed      	b.n	8000b92 <__udivmoddi4+0x276>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	e799      	b.n	8000aee <__udivmoddi4+0x1d2>
 8000bba:	4630      	mov	r0, r6
 8000bbc:	e7d4      	b.n	8000b68 <__udivmoddi4+0x24c>
 8000bbe:	46d6      	mov	lr, sl
 8000bc0:	e77f      	b.n	8000ac2 <__udivmoddi4+0x1a6>
 8000bc2:	4463      	add	r3, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	e74d      	b.n	8000a64 <__udivmoddi4+0x148>
 8000bc8:	4606      	mov	r6, r0
 8000bca:	4623      	mov	r3, r4
 8000bcc:	4608      	mov	r0, r1
 8000bce:	e70f      	b.n	80009f0 <__udivmoddi4+0xd4>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	e730      	b.n	8000a38 <__udivmoddi4+0x11c>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_idiv0>:
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2101      	movs	r1, #1
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <ILI9341_Select+0x14>)
 8000be6:	f003 fc53 	bl	8004490 <HAL_GPIO_WritePin>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40020400 	.word	0x40020400

08000bf4 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	4802      	ldr	r0, [pc, #8]	@ (8000c08 <ILI9341_Unselect+0x14>)
 8000bfe:	f003 fc47 	bl	8004490 <HAL_GPIO_WritePin>
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40020400 	.word	0x40020400

08000c0c <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2110      	movs	r1, #16
 8000c14:	4806      	ldr	r0, [pc, #24]	@ (8000c30 <ILI9341_Reset+0x24>)
 8000c16:	f003 fc3b 	bl	8004490 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000c1a:	2005      	movs	r0, #5
 8000c1c:	f003 f966 	bl	8003eec <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2110      	movs	r1, #16
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <ILI9341_Reset+0x24>)
 8000c26:	f003 fc33 	bl	8004490 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40020000 	.word	0x40020000

08000c34 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2102      	movs	r1, #2
 8000c42:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <ILI9341_WriteCommand+0x2c>)
 8000c44:	f003 fc24 	bl	8004490 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000c48:	1df9      	adds	r1, r7, #7
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <ILI9341_WriteCommand+0x30>)
 8000c52:	f004 f918 	bl	8004e86 <HAL_SPI_Transmit>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020400 	.word	0x40020400
 8000c64:	20000150 	.word	0x20000150

08000c68 <ILI9341_WriteData>:


static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2102      	movs	r1, #2
 8000c76:	4811      	ldr	r0, [pc, #68]	@ (8000cbc <ILI9341_WriteData+0x54>)
 8000c78:	f003 fc0a 	bl	8004490 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000c7c:	e015      	b.n	8000caa <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c84:	bf28      	it	cs
 8000c86:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000c8a:	81fb      	strh	r3, [r7, #14]

        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000c8c:	89fa      	ldrh	r2, [r7, #14]
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	480a      	ldr	r0, [pc, #40]	@ (8000cc0 <ILI9341_WriteData+0x58>)
 8000c96:	f004 f8f6 	bl	8004e86 <HAL_SPI_Transmit>
        buff += chunk_size;
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000ca2:	89fb      	ldrh	r3, [r7, #14]
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1e6      	bne.n	8000c7e <ILI9341_WriteData+0x16>
    }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	20000150 	.word	0x20000150

08000cc4 <ILI9341_WriteData_with_endian>:
//			buff += chunk_size;
//			buff_size -= chunk_size;
//        }
//}

static void ILI9341_WriteData_with_endian(uint8_t* buff, size_t buff_size) {
 8000cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cc8:	b089      	sub	sp, #36	@ 0x24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
 8000cd0:	466b      	mov	r3, sp
 8000cd2:	461e      	mov	r6, r3
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	483c      	ldr	r0, [pc, #240]	@ (8000dcc <ILI9341_WriteData_with_endian+0x108>)
 8000cda:	f003 fbd9 	bl	8004490 <HAL_GPIO_WritePin>

    const uint16_t MAX_CHUNK = 32768;
 8000cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ce2:	837b      	strh	r3, [r7, #26]
    uint8_t arr[MAX_CHUNK];  // <-- stack size: risky if too large. Consider using a smaller buffer, eg. 512 or 1024.
 8000ce4:	8b7b      	ldrh	r3, [r7, #26]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	8b7b      	ldrh	r3, [r7, #26]
 8000cec:	2200      	movs	r2, #0
 8000cee:	4698      	mov	r8, r3
 8000cf0:	4691      	mov	r9, r2
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	f04f 0300 	mov.w	r3, #0
 8000cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d06:	8b7b      	ldrh	r3, [r7, #26]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	461c      	mov	r4, r3
 8000d0c:	4615      	mov	r5, r2
 8000d0e:	f04f 0200 	mov.w	r2, #0
 8000d12:	f04f 0300 	mov.w	r3, #0
 8000d16:	00eb      	lsls	r3, r5, #3
 8000d18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d1c:	00e2      	lsls	r2, r4, #3
 8000d1e:	8b7b      	ldrh	r3, [r7, #26]
 8000d20:	3307      	adds	r3, #7
 8000d22:	08db      	lsrs	r3, r3, #3
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	ebad 0d03 	sub.w	sp, sp, r3
 8000d2a:	466b      	mov	r3, sp
 8000d2c:	3300      	adds	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]

    while (buff_size > 0) {
 8000d30:	e043      	b.n	8000dba <ILI9341_WriteData_with_endian+0xf6>
        uint16_t chunk_size = (buff_size > MAX_CHUNK) ? MAX_CHUNK : buff_size;
 8000d32:	8b7a      	ldrh	r2, [r7, #26]
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	4293      	cmp	r3, r2
 8000d38:	bf28      	it	cs
 8000d3a:	4613      	movcs	r3, r2
 8000d3c:	81fb      	strh	r3, [r7, #14]
        uint16_t swap_size = chunk_size & ~1; // make sure it's even
 8000d3e:	89fb      	ldrh	r3, [r7, #14]
 8000d40:	f023 0301 	bic.w	r3, r3, #1
 8000d44:	81bb      	strh	r3, [r7, #12]

        for (int i = 0; i < swap_size; i += 2) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	e014      	b.n	8000d76 <ILI9341_WriteData_with_endian+0xb2>
            arr[i] = buff[i+1];
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	4413      	add	r3, r2
 8000d54:	7819      	ldrb	r1, [r3, #0]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	701a      	strb	r2, [r3, #0]
            arr[i+1] = buff[i];
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	441a      	add	r2, r3
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	7811      	ldrb	r1, [r2, #0]
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	54d1      	strb	r1, [r2, r3]
        for (int i = 0; i < swap_size; i += 2) {
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	3302      	adds	r3, #2
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	89bb      	ldrh	r3, [r7, #12]
 8000d78:	69fa      	ldr	r2, [r7, #28]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	dbe6      	blt.n	8000d4c <ILI9341_WriteData_with_endian+0x88>
        }
        // If odd size, just copy the last byte without swapping
        if (chunk_size % 2 != 0) {
 8000d7e:	89fb      	ldrh	r3, [r7, #14]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d008      	beq.n	8000d9c <ILI9341_WriteData_with_endian+0xd8>
            arr[chunk_size - 1] = buff[chunk_size - 1];
 8000d8a:	89fb      	ldrh	r3, [r7, #14]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	441a      	add	r2, r3
 8000d92:	89fb      	ldrh	r3, [r7, #14]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	7811      	ldrb	r1, [r2, #0]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	54d1      	strb	r1, [r2, r3]
        }
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, arr, chunk_size, HAL_MAX_DELAY);
 8000d9c:	89fa      	ldrh	r2, [r7, #14]
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	6939      	ldr	r1, [r7, #16]
 8000da4:	480a      	ldr	r0, [pc, #40]	@ (8000dd0 <ILI9341_WriteData_with_endian+0x10c>)
 8000da6:	f004 f86e 	bl	8004e86 <HAL_SPI_Transmit>

        buff += chunk_size;
 8000daa:	89fb      	ldrh	r3, [r7, #14]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	4413      	add	r3, r2
 8000db0:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	603b      	str	r3, [r7, #0]
    while (buff_size > 0) {
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1b8      	bne.n	8000d32 <ILI9341_WriteData_with_endian+0x6e>
 8000dc0:	46b5      	mov	sp, r6
    }
}
 8000dc2:	bf00      	nop
 8000dc4:	3724      	adds	r7, #36	@ 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	20000150 	.word	0x20000150

08000dd4 <ILI9341_SetAddressWindow>:


static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4604      	mov	r4, r0
 8000ddc:	4608      	mov	r0, r1
 8000dde:	4611      	mov	r1, r2
 8000de0:	461a      	mov	r2, r3
 8000de2:	4623      	mov	r3, r4
 8000de4:	80fb      	strh	r3, [r7, #6]
 8000de6:	4603      	mov	r3, r0
 8000de8:	80bb      	strh	r3, [r7, #4]
 8000dea:	460b      	mov	r3, r1
 8000dec:	807b      	strh	r3, [r7, #2]
 8000dee:	4613      	mov	r3, r2
 8000df0:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000df2:	202a      	movs	r0, #42	@ 0x2a
 8000df4:	f7ff ff1e 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	0a1b      	lsrs	r3, r3, #8
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	733b      	strb	r3, [r7, #12]
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	737b      	strb	r3, [r7, #13]
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	73bb      	strb	r3, [r7, #14]
 8000e12:	887b      	ldrh	r3, [r7, #2]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff22 	bl	8000c68 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000e24:	202b      	movs	r0, #43	@ 0x2b
 8000e26:	f7ff ff05 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	723b      	strb	r3, [r7, #8]
 8000e34:	88bb      	ldrh	r3, [r7, #4]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	727b      	strb	r3, [r7, #9]
 8000e3a:	883b      	ldrh	r3, [r7, #0]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	72bb      	strb	r3, [r7, #10]
 8000e44:	883b      	ldrh	r3, [r7, #0]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	2104      	movs	r1, #4
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff09 	bl	8000c68 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8000e56:	202c      	movs	r0, #44	@ 0x2c
 8000e58:	f7ff feec 	bl	8000c34 <ILI9341_WriteCommand>
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd90      	pop	{r4, r7, pc}

08000e64 <ILI9341_Init>:

void ILI9341_Init() {
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b09b      	sub	sp, #108	@ 0x6c
 8000e68:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000e6a:	f7ff feb7 	bl	8000bdc <ILI9341_Select>
    ILI9341_Reset();
 8000e6e:	f7ff fecd 	bl	8000c0c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff fede 	bl	8000c34 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000e78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e7c:	f003 f836 	bl	8003eec <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000e80:	20cb      	movs	r0, #203	@ 0xcb
 8000e82:	f7ff fed7 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000e86:	4a87      	ldr	r2, [pc, #540]	@ (80010a4 <ILI9341_Init+0x240>)
 8000e88:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e90:	6018      	str	r0, [r3, #0]
 8000e92:	3304      	adds	r3, #4
 8000e94:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000e96:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e9a:	2105      	movs	r1, #5
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fee3 	bl	8000c68 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8000ea2:	20cf      	movs	r0, #207	@ 0xcf
 8000ea4:	f7ff fec6 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000ea8:	4a7f      	ldr	r2, [pc, #508]	@ (80010a8 <ILI9341_Init+0x244>)
 8000eaa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000eae:	6812      	ldr	r2, [r2, #0]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	8019      	strh	r1, [r3, #0]
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	0c12      	lsrs	r2, r2, #16
 8000eb8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000eba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fed1 	bl	8000c68 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8000ec6:	20e8      	movs	r0, #232	@ 0xe8
 8000ec8:	f7ff feb4 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000ecc:	4a77      	ldr	r2, [pc, #476]	@ (80010ac <ILI9341_Init+0x248>)
 8000ece:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ed2:	6812      	ldr	r2, [r2, #0]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	8019      	strh	r1, [r3, #0]
 8000ed8:	3302      	adds	r3, #2
 8000eda:	0c12      	lsrs	r2, r2, #16
 8000edc:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000ede:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ee2:	2103      	movs	r1, #3
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff febf 	bl	8000c68 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000eea:	20ea      	movs	r0, #234	@ 0xea
 8000eec:	f7ff fea2 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 8000ef6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000efa:	2102      	movs	r1, #2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff feb3 	bl	8000c68 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8000f02:	20ed      	movs	r0, #237	@ 0xed
 8000f04:	f7ff fe96 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000f08:	4b69      	ldr	r3, [pc, #420]	@ (80010b0 <ILI9341_Init+0x24c>)
 8000f0a:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8000f0c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f10:	2104      	movs	r1, #4
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fea8 	bl	8000c68 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8000f18:	20f7      	movs	r0, #247	@ 0xf7
 8000f1a:	f7ff fe8b 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8000f1e:	2320      	movs	r3, #32
 8000f20:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8000f24:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fe9c 	bl	8000c68 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8000f30:	20c0      	movs	r0, #192	@ 0xc0
 8000f32:	f7ff fe7f 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8000f36:	2323      	movs	r3, #35	@ 0x23
 8000f38:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8000f3c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f40:	2101      	movs	r1, #1
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fe90 	bl	8000c68 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8000f48:	20c1      	movs	r0, #193	@ 0xc1
 8000f4a:	f7ff fe73 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8000f4e:	2310      	movs	r3, #16
 8000f50:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 8000f54:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fe84 	bl	8000c68 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8000f60:	20c5      	movs	r0, #197	@ 0xc5
 8000f62:	f7ff fe67 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8000f66:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000f6a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000f6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f72:	2102      	movs	r1, #2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fe77 	bl	8000c68 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000f7a:	20c7      	movs	r0, #199	@ 0xc7
 8000f7c:	f7ff fe5a 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000f80:	2386      	movs	r3, #134	@ 0x86
 8000f82:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8000f86:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fe6b 	bl	8000c68 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8000f92:	2036      	movs	r0, #54	@ 0x36
 8000f94:	f7ff fe4e 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000f98:	2348      	movs	r3, #72	@ 0x48
 8000f9a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 8000f9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fe5f 	bl	8000c68 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000faa:	203a      	movs	r0, #58	@ 0x3a
 8000fac:	f7ff fe42 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000fb0:	2355      	movs	r3, #85	@ 0x55
 8000fb2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 8000fb6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fe53 	bl	8000c68 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8000fc2:	20b1      	movs	r0, #177	@ 0xb1
 8000fc4:	f7ff fe36 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000fc8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fcc:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 8000fce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe47 	bl	8000c68 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000fda:	20b6      	movs	r0, #182	@ 0xb6
 8000fdc:	f7ff fe2a 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8000fe0:	4a34      	ldr	r2, [pc, #208]	@ (80010b4 <ILI9341_Init+0x250>)
 8000fe2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	8019      	strh	r1, [r3, #0]
 8000fec:	3302      	adds	r3, #2
 8000fee:	0c12      	lsrs	r2, r2, #16
 8000ff0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000ff2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe35 	bl	8000c68 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8000ffe:	20f2      	movs	r0, #242	@ 0xf2
 8001000:	f7ff fe18 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8001004:	2300      	movs	r3, #0
 8001006:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 800100a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800100e:	2101      	movs	r1, #1
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fe29 	bl	8000c68 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8001016:	2026      	movs	r0, #38	@ 0x26
 8001018:	f7ff fe0c 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 800101c:	2301      	movs	r3, #1
 800101e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 8001022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001026:	2101      	movs	r1, #1
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fe1d 	bl	8000c68 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 800102e:	20e0      	movs	r0, #224	@ 0xe0
 8001030:	f7ff fe00 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8001034:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <ILI9341_Init+0x254>)
 8001036:	f107 0414 	add.w	r4, r7, #20
 800103a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800103c:	c407      	stmia	r4!, {r0, r1, r2}
 800103e:	8023      	strh	r3, [r4, #0]
 8001040:	3402      	adds	r4, #2
 8001042:	0c1b      	lsrs	r3, r3, #16
 8001044:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	210f      	movs	r1, #15
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fe0b 	bl	8000c68 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8001052:	20e1      	movs	r0, #225	@ 0xe1
 8001054:	f7ff fdee 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8001058:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <ILI9341_Init+0x258>)
 800105a:	1d3c      	adds	r4, r7, #4
 800105c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105e:	c407      	stmia	r4!, {r0, r1, r2}
 8001060:	8023      	strh	r3, [r4, #0]
 8001062:	3402      	adds	r4, #2
 8001064:	0c1b      	lsrs	r3, r3, #16
 8001066:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	210f      	movs	r1, #15
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fdfb 	bl	8000c68 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8001072:	2011      	movs	r0, #17
 8001074:	f7ff fdde 	bl	8000c34 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8001078:	2078      	movs	r0, #120	@ 0x78
 800107a:	f002 ff37 	bl	8003eec <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 800107e:	2029      	movs	r0, #41	@ 0x29
 8001080:	f7ff fdd8 	bl	8000c34 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8001084:	2036      	movs	r0, #54	@ 0x36
 8001086:	f7ff fdd5 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 800108a:	23e8      	movs	r3, #232	@ 0xe8
 800108c:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 800108e:	463b      	mov	r3, r7
 8001090:	2101      	movs	r1, #1
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fde8 	bl	8000c68 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8001098:	f7ff fdac 	bl	8000bf4 <ILI9341_Unselect>
}
 800109c:	bf00      	nop
 800109e:	376c      	adds	r7, #108	@ 0x6c
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd90      	pop	{r4, r7, pc}
 80010a4:	0800abe4 	.word	0x0800abe4
 80010a8:	0800abec 	.word	0x0800abec
 80010ac:	0800abf0 	.word	0x0800abf0
 80010b0:	81120364 	.word	0x81120364
 80010b4:	0800abf4 	.word	0x0800abf4
 80010b8:	0800abf8 	.word	0x0800abf8
 80010bc:	0800ac08 	.word	0x0800ac08

080010c0 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80010c0:	b082      	sub	sp, #8
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b088      	sub	sp, #32
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
 80010ce:	460b      	mov	r3, r1
 80010d0:	80bb      	strh	r3, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80010d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80010da:	461a      	mov	r2, r3
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	4413      	add	r3, r2
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80010ea:	4619      	mov	r1, r3
 80010ec:	88bb      	ldrh	r3, [r7, #4]
 80010ee:	440b      	add	r3, r1
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	88b9      	ldrh	r1, [r7, #4]
 80010f8:	88f8      	ldrh	r0, [r7, #6]
 80010fa:	f7ff fe6b 	bl	8000dd4 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e041      	b.n	8001188 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8001104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	3b20      	subs	r3, #32
 800110a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800110e:	fb01 f303 	mul.w	r3, r1, r3
 8001112:	4619      	mov	r1, r3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	440b      	add	r3, r1
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	e027      	b.n	8001176 <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00e      	beq.n	8001154 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001136:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	b29b      	uxth	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	743b      	strb	r3, [r7, #16]
 8001140:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001142:	b2db      	uxtb	r3, r3
 8001144:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	2102      	movs	r1, #2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fd8b 	bl	8000c68 <ILI9341_WriteData>
 8001152:	e00d      	b.n	8001170 <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001154:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001156:	0a1b      	lsrs	r3, r3, #8
 8001158:	b29b      	uxth	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	733b      	strb	r3, [r7, #12]
 800115e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001160:	b2db      	uxtb	r3, r3
 8001162:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	2102      	movs	r1, #2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fd7c 	bl	8000c68 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	3301      	adds	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800117a:	461a      	mov	r2, r3
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	4293      	cmp	r3, r2
 8001180:	d3d1      	bcc.n	8001126 <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3301      	adds	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800118c:	461a      	mov	r2, r3
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	4293      	cmp	r3, r2
 8001192:	d3b7      	bcc.n	8001104 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3720      	adds	r7, #32
 800119a:	46bd      	mov	sp, r7
 800119c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011a0:	b002      	add	sp, #8
 80011a2:	4770      	bx	lr

080011a4 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80011a4:	b082      	sub	sp, #8
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af04      	add	r7, sp, #16
 80011ac:	603a      	str	r2, [r7, #0]
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	4603      	mov	r3, r0
 80011b2:	80fb      	strh	r3, [r7, #6]
 80011b4:	460b      	mov	r3, r1
 80011b6:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80011b8:	f7ff fd10 	bl	8000bdc <ILI9341_Select>

    while(*str) {
 80011bc:	e02e      	b.n	800121c <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	7d3a      	ldrb	r2, [r7, #20]
 80011c2:	4413      	add	r3, r2
 80011c4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80011c8:	db13      	blt.n	80011f2 <ILI9341_WriteString+0x4e>
            x = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80011ce:	7d7b      	ldrb	r3, [r7, #21]
 80011d0:	461a      	mov	r2, r3
 80011d2:	88bb      	ldrh	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	7d7a      	ldrb	r2, [r7, #21]
 80011dc:	4413      	add	r3, r2
 80011de:	2bef      	cmp	r3, #239	@ 0xef
 80011e0:	dc21      	bgt.n	8001226 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b20      	cmp	r3, #32
 80011e8:	d103      	bne.n	80011f2 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	603b      	str	r3, [r7, #0]
                continue;
 80011f0:	e014      	b.n	800121c <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	88b9      	ldrh	r1, [r7, #4]
 80011f8:	88f8      	ldrh	r0, [r7, #6]
 80011fa:	8c3b      	ldrh	r3, [r7, #32]
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	8bbb      	ldrh	r3, [r7, #28]
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f7ff ff5a 	bl	80010c0 <ILI9341_WriteChar>
        x += font.width;
 800120c:	7d3b      	ldrb	r3, [r7, #20]
 800120e:	461a      	mov	r2, r3
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	4413      	add	r3, r2
 8001214:	80fb      	strh	r3, [r7, #6]
        str++;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1cc      	bne.n	80011be <ILI9341_WriteString+0x1a>
 8001224:	e000      	b.n	8001228 <ILI9341_WriteString+0x84>
                break;
 8001226:	bf00      	nop
    }

    ILI9341_Unselect();
 8001228:	f7ff fce4 	bl	8000bf4 <ILI9341_Unselect>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001236:	b002      	add	sp, #8
 8001238:	4770      	bx	lr
	...

0800123c <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	4604      	mov	r4, r0
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4623      	mov	r3, r4
 800124c:	80fb      	strh	r3, [r7, #6]
 800124e:	4603      	mov	r3, r0
 8001250:	80bb      	strh	r3, [r7, #4]
 8001252:	460b      	mov	r3, r1
 8001254:	807b      	strh	r3, [r7, #2]
 8001256:	4613      	mov	r3, r2
 8001258:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001260:	d252      	bcs.n	8001308 <ILI9341_FillRectangle+0xcc>
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	2bef      	cmp	r3, #239	@ 0xef
 8001266:	d84f      	bhi.n	8001308 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8001268:	88fa      	ldrh	r2, [r7, #6]
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	4413      	add	r3, r2
 800126e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001272:	dd03      	ble.n	800127c <ILI9341_FillRectangle+0x40>
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800127a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 800127c:	88ba      	ldrh	r2, [r7, #4]
 800127e:	883b      	ldrh	r3, [r7, #0]
 8001280:	4413      	add	r3, r2
 8001282:	2bf0      	cmp	r3, #240	@ 0xf0
 8001284:	dd03      	ble.n	800128e <ILI9341_FillRectangle+0x52>
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800128c:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 800128e:	f7ff fca5 	bl	8000bdc <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001292:	88fa      	ldrh	r2, [r7, #6]
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	4413      	add	r3, r2
 8001298:	b29b      	uxth	r3, r3
 800129a:	3b01      	subs	r3, #1
 800129c:	b29c      	uxth	r4, r3
 800129e:	88ba      	ldrh	r2, [r7, #4]
 80012a0:	883b      	ldrh	r3, [r7, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	3b01      	subs	r3, #1
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	88b9      	ldrh	r1, [r7, #4]
 80012ac:	88f8      	ldrh	r0, [r7, #6]
 80012ae:	4622      	mov	r2, r4
 80012b0:	f7ff fd90 	bl	8000dd4 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80012b4:	8c3b      	ldrh	r3, [r7, #32]
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	733b      	strb	r3, [r7, #12]
 80012be:	8c3b      	ldrh	r3, [r7, #32]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	2102      	movs	r1, #2
 80012c8:	4811      	ldr	r0, [pc, #68]	@ (8001310 <ILI9341_FillRectangle+0xd4>)
 80012ca:	f003 f8e1 	bl	8004490 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80012ce:	883b      	ldrh	r3, [r7, #0]
 80012d0:	80bb      	strh	r3, [r7, #4]
 80012d2:	e013      	b.n	80012fc <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	80fb      	strh	r3, [r7, #6]
 80012d8:	e00a      	b.n	80012f0 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80012da:	f107 010c 	add.w	r1, r7, #12
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	2202      	movs	r2, #2
 80012e4:	480b      	ldr	r0, [pc, #44]	@ (8001314 <ILI9341_FillRectangle+0xd8>)
 80012e6:	f003 fdce 	bl	8004e86 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	80fb      	strh	r3, [r7, #6]
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f1      	bne.n	80012da <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 80012f6:	88bb      	ldrh	r3, [r7, #4]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	80bb      	strh	r3, [r7, #4]
 80012fc:	88bb      	ldrh	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1e8      	bne.n	80012d4 <ILI9341_FillRectangle+0x98>
        }
    }

    ILI9341_Unselect();
 8001302:	f7ff fc77 	bl	8000bf4 <ILI9341_Unselect>
 8001306:	e000      	b.n	800130a <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8001308:	bf00      	nop
}
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	40020400 	.word	0x40020400
 8001314:	20000150 	.word	0x20000150

08001318 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af02      	add	r7, sp, #8
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	23f0      	movs	r3, #240	@ 0xf0
 8001328:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800132c:	2100      	movs	r1, #0
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff ff84 	bl	800123c <ILI9341_FillRectangle>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4604      	mov	r4, r0
 8001344:	4608      	mov	r0, r1
 8001346:	4611      	mov	r1, r2
 8001348:	461a      	mov	r2, r3
 800134a:	4623      	mov	r3, r4
 800134c:	80fb      	strh	r3, [r7, #6]
 800134e:	4603      	mov	r3, r0
 8001350:	80bb      	strh	r3, [r7, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	807b      	strh	r3, [r7, #2]
 8001356:	4613      	mov	r3, r2
 8001358:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001360:	d22c      	bcs.n	80013bc <ILI9341_DrawImage+0x80>
 8001362:	88bb      	ldrh	r3, [r7, #4]
 8001364:	2bef      	cmp	r3, #239	@ 0xef
 8001366:	d829      	bhi.n	80013bc <ILI9341_DrawImage+0x80>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 8001368:	88fa      	ldrh	r2, [r7, #6]
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	4413      	add	r3, r2
 800136e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001372:	dc25      	bgt.n	80013c0 <ILI9341_DrawImage+0x84>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 8001374:	88ba      	ldrh	r2, [r7, #4]
 8001376:	883b      	ldrh	r3, [r7, #0]
 8001378:	4413      	add	r3, r2
 800137a:	2bf0      	cmp	r3, #240	@ 0xf0
 800137c:	dc22      	bgt.n	80013c4 <ILI9341_DrawImage+0x88>

    ILI9341_Select();
 800137e:	f7ff fc2d 	bl	8000bdc <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001382:	88fa      	ldrh	r2, [r7, #6]
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	4413      	add	r3, r2
 8001388:	b29b      	uxth	r3, r3
 800138a:	3b01      	subs	r3, #1
 800138c:	b29c      	uxth	r4, r3
 800138e:	88ba      	ldrh	r2, [r7, #4]
 8001390:	883b      	ldrh	r3, [r7, #0]
 8001392:	4413      	add	r3, r2
 8001394:	b29b      	uxth	r3, r3
 8001396:	3b01      	subs	r3, #1
 8001398:	b29b      	uxth	r3, r3
 800139a:	88b9      	ldrh	r1, [r7, #4]
 800139c:	88f8      	ldrh	r0, [r7, #6]
 800139e:	4622      	mov	r2, r4
 80013a0:	f7ff fd18 	bl	8000dd4 <ILI9341_SetAddressWindow>
    // MODIFICATION ----------------------------
    ILI9341_WriteData_with_endian((uint8_t*)data, sizeof(uint16_t)*w*h);
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	883a      	ldrh	r2, [r7, #0]
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	69b8      	ldr	r0, [r7, #24]
 80013b2:	f7ff fc87 	bl	8000cc4 <ILI9341_WriteData_with_endian>
//    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
    ILI9341_Unselect();
 80013b6:	f7ff fc1d 	bl	8000bf4 <ILI9341_Unselect>
 80013ba:	e004      	b.n	80013c6 <ILI9341_DrawImage+0x8a>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80013bc:	bf00      	nop
 80013be:	e002      	b.n	80013c6 <ILI9341_DrawImage+0x8a>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 80013c0:	bf00      	nop
 80013c2:	e000      	b.n	80013c6 <ILI9341_DrawImage+0x8a>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 80013c4:	bf00      	nop
}
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd90      	pop	{r4, r7, pc}

080013cc <HAL_TIM_PeriodElapsedCallback>:
bool do_once = false;
bool is_jumping = false;
bool reset_jump_audio = false;
uint32_t jump_timer;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a49      	ldr	r2, [pc, #292]	@ (8001500 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	f040 808c 	bne.w	80014f8 <HAL_TIM_PeriodElapsedCallback+0x12c>
        // Get next sample from buffer
		uint8_t sampled_8bit_pwm_val = audio_buff[buff_pointer++];
 80013e0:	4b48      	ldr	r3, [pc, #288]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	b291      	uxth	r1, r2
 80013e8:	4a46      	ldr	r2, [pc, #280]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80013ea:	8011      	strh	r1, [r2, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b46      	ldr	r3, [pc, #280]	@ (8001508 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80013f0:	5c9b      	ldrb	r3, [r3, r2]
 80013f2:	75fb      	strb	r3, [r7, #23]
		if (is_jumping && HAL_GetTick() - jump_timer < 500) {
 80013f4:	4b45      	ldr	r3, [pc, #276]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d01f      	beq.n	800143c <HAL_TIM_PeriodElapsedCallback+0x70>
 80013fc:	f002 fd6a 	bl	8003ed4 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	4b43      	ldr	r3, [pc, #268]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800140c:	d216      	bcs.n	800143c <HAL_TIM_PeriodElapsedCallback+0x70>
			sampled_8bit_pwm_val = (3 * sampled_8bit_pwm_val + yahoo_buff[yahoo_buff_pointer++]) / 4;
 800140e:	7dfa      	ldrb	r2, [r7, #23]
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	441a      	add	r2, r3
 8001416:	4b3f      	ldr	r3, [pc, #252]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	1c59      	adds	r1, r3, #1
 800141c:	b288      	uxth	r0, r1
 800141e:	493d      	ldr	r1, [pc, #244]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001420:	8008      	strh	r0, [r1, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	4b3c      	ldr	r3, [pc, #240]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001426:	5c5b      	ldrb	r3, [r3, r1]
 8001428:	4413      	add	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	da00      	bge.n	8001430 <HAL_TIM_PeriodElapsedCallback+0x64>
 800142e:	3303      	adds	r3, #3
 8001430:	109b      	asrs	r3, r3, #2
 8001432:	75fb      	strb	r3, [r7, #23]
			reset_jump_audio = false;
 8001434:	4b39      	ldr	r3, [pc, #228]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e01c      	b.n	8001476 <HAL_TIM_PeriodElapsedCallback+0xaa>
		}
		else {
			if (!reset_jump_audio) {
 800143c:	4b37      	ldr	r3, [pc, #220]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f083 0301 	eor.w	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d015      	beq.n	8001476 <HAL_TIM_PeriodElapsedCallback+0xaa>
				reset_jump_audio = true;
 800144a:	4b34      	ldr	r3, [pc, #208]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
				f_lseek(&fil_yahoo, 0x2c);
 8001450:	212c      	movs	r1, #44	@ 0x2c
 8001452:	4833      	ldr	r0, [pc, #204]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001454:	f008 fb25 	bl	8009aa2 <f_lseek>
				yahoo_buff_pointer = 0;
 8001458:	4b2e      	ldr	r3, [pc, #184]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800145a:	2200      	movs	r2, #0
 800145c:	801a      	strh	r2, [r3, #0]
				int bytesRead = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
				FRESULT res = f_read(&fil_yahoo, yahoo_buff, BUFF_SIZE, &bytesRead);
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800146a:	492b      	ldr	r1, [pc, #172]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800146c:	482c      	ldr	r0, [pc, #176]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800146e:	f008 f9d9 	bl	8009824 <f_read>
 8001472:	4603      	mov	r3, r0
 8001474:	75bb      	strb	r3, [r7, #22]
//			char hex_str[16];
//			sprintf(hex_str, "0x%02X", sampled_8bit_pwm_val);
//			ILI9341_WriteString(80, 0, hex_str, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
//			do_once = true;
//		}
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, sampled_8bit_pwm_val);
 8001476:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7dfa      	ldrb	r2, [r7, #23]
 800147c:	635a      	str	r2, [r3, #52]	@ 0x34

        // Refill buffer if needed
        if (buff_pointer >= BUFF_SIZE) {
 800147e:	4b21      	ldr	r3, [pc, #132]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001486:	d31b      	bcc.n	80014c0 <HAL_TIM_PeriodElapsedCallback+0xf4>
        	num_iter++;
 8001488:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	4a26      	ldr	r2, [pc, #152]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001490:	6013      	str	r3, [r2, #0]
//			char hex_str[16];
//			sprintf(hex_str, "0x%02X", pwm_value);
//			ILI9341_WriteString(80, 0, hex_str, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
            // refill buffer with f_read (non-blocking, or with a flag in main loop)
            // or set a "need_refill" flag to be handled in main()
        	int bytesRead = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
        	FRESULT res = f_read(&fil, audio_buff, BUFF_SIZE, &bytesRead);
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800149e:	491a      	ldr	r1, [pc, #104]	@ (8001508 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80014a0:	4822      	ldr	r0, [pc, #136]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80014a2:	f008 f9bf 	bl	8009824 <f_read>
 80014a6:	4603      	mov	r3, r0
 80014a8:	757b      	strb	r3, [r7, #21]
        	if (bytesRead < BUFF_SIZE) {
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014b0:	da03      	bge.n	80014ba <HAL_TIM_PeriodElapsedCallback+0xee>
        		f_lseek(&fil, 0x2C);
 80014b2:	212c      	movs	r1, #44	@ 0x2c
 80014b4:	481d      	ldr	r0, [pc, #116]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80014b6:	f008 faf4 	bl	8009aa2 <f_lseek>
        	}

        	buff_pointer = 0;
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80014bc:	2200      	movs	r2, #0
 80014be:	801a      	strh	r2, [r3, #0]
        }

        if (yahoo_buff_pointer >= BUFF_SIZE) {
 80014c0:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014c8:	d316      	bcc.n	80014f8 <HAL_TIM_PeriodElapsedCallback+0x12c>
        	int bytesRead = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
        	FRESULT res = f_read(&fil_yahoo, yahoo_buff, BUFF_SIZE, &bytesRead);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014d6:	4910      	ldr	r1, [pc, #64]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80014d8:	4811      	ldr	r0, [pc, #68]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80014da:	f008 f9a3 	bl	8009824 <f_read>
 80014de:	4603      	mov	r3, r0
 80014e0:	753b      	strb	r3, [r7, #20]
        	if (bytesRead < BUFF_SIZE) {
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014e8:	da03      	bge.n	80014f2 <HAL_TIM_PeriodElapsedCallback+0x126>
				f_lseek(&fil_yahoo, 0x2c);
 80014ea:	212c      	movs	r1, #44	@ 0x2c
 80014ec:	480c      	ldr	r0, [pc, #48]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80014ee:	f008 fad8 	bl	8009aa2 <f_lseek>
        	}

        	yahoo_buff_pointer = 0;
 80014f2:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	801a      	strh	r2, [r3, #0]
        }
	}
}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40000400 	.word	0x40000400
 8001504:	20004cec 	.word	0x20004cec
 8001508:	20002cec 	.word	0x20002cec
 800150c:	2000538c 	.word	0x2000538c
 8001510:	20005390 	.word	0x20005390
 8001514:	20004cee 	.word	0x20004cee
 8001518:	20003cec 	.word	0x20003cec
 800151c:	2000538d 	.word	0x2000538d
 8001520:	20005154 	.word	0x20005154
 8001524:	20000248 	.word	0x20000248
 8001528:	20005388 	.word	0x20005388
 800152c:	20004f24 	.word	0x20004f24

08001530 <init>:

void init() {
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
    ILI9341_Unselect();
 8001534:	f7ff fb5e 	bl	8000bf4 <ILI9341_Unselect>
//    ILI9341_TouchUnselect();
    ILI9341_Init();
 8001538:	f7ff fc94 	bl	8000e64 <ILI9341_Init>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <turn_mario>:

// turn left if walking left
void turn_mario(uint8_t width, uint8_t height) {
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	@ 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	460a      	mov	r2, r1
 800154a:	71fb      	strb	r3, [r7, #7]
 800154c:	4613      	mov	r3, r2
 800154e:	71bb      	strb	r3, [r7, #6]
	if (mario.x_distance_between_frame < 0 || (mario.x_distance_between_frame == 0 && dir == true)) {
 8001550:	4b2c      	ldr	r3, [pc, #176]	@ (8001604 <turn_mario+0xc4>)
 8001552:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db08      	blt.n	800156c <turn_mario+0x2c>
 800155a:	4b2a      	ldr	r3, [pc, #168]	@ (8001604 <turn_mario+0xc4>)
 800155c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d141      	bne.n	80015e8 <turn_mario+0xa8>
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <turn_mario+0xc8>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d03d      	beq.n	80015e8 <turn_mario+0xa8>
        for (int row = 0; row < height; row++) {
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	e032      	b.n	80015d8 <turn_mario+0x98>
            for (int col = 0; col < width / 2; col++) {
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	e025      	b.n	80015c4 <turn_mario+0x84>
                int left  = row * width + col;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	fb02 f303 	mul.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4413      	add	r3, r2
 8001584:	617b      	str	r3, [r7, #20]
                int right = row * width + (width - 1 - col);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	69fa      	ldr	r2, [r7, #28]
 800158a:	fb03 f202 	mul.w	r2, r3, r2
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	1e59      	subs	r1, r3, #1
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	1acb      	subs	r3, r1, r3
 8001596:	4413      	add	r3, r2
 8001598:	613b      	str	r3, [r7, #16]

                // Swap 16-bit pixels
                uint16_t temp = mario_final[left];
 800159a:	4a1c      	ldr	r2, [pc, #112]	@ (800160c <turn_mario+0xcc>)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015a2:	81fb      	strh	r3, [r7, #14]
                mario_final[left] = mario_final[right];
 80015a4:	4a19      	ldr	r2, [pc, #100]	@ (800160c <turn_mario+0xcc>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015ac:	4a17      	ldr	r2, [pc, #92]	@ (800160c <turn_mario+0xcc>)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                mario_final[right] = temp;
 80015b4:	4915      	ldr	r1, [pc, #84]	@ (800160c <turn_mario+0xcc>)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	89fa      	ldrh	r2, [r7, #14]
 80015ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (int col = 0; col < width / 2; col++) {
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61bb      	str	r3, [r7, #24]
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	085b      	lsrs	r3, r3, #1
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	4293      	cmp	r3, r2
 80015d0:	dbd2      	blt.n	8001578 <turn_mario+0x38>
        for (int row = 0; row < height; row++) {
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	79bb      	ldrb	r3, [r7, #6]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbc8      	blt.n	8001572 <turn_mario+0x32>
            }
        }

		dir = true;
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <turn_mario+0xc8>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
	}
	else if (mario.x_distance_between_frame > 0) {
		dir = false;
	}

}
 80015e6:	e007      	b.n	80015f8 <turn_mario+0xb8>
	else if (mario.x_distance_between_frame > 0) {
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <turn_mario+0xc4>)
 80015ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	dd02      	ble.n	80015f8 <turn_mario+0xb8>
		dir = false;
 80015f2:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <turn_mario+0xc8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3724      	adds	r7, #36	@ 0x24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	20000020 	.word	0x20000020
 8001608:	20002ce9 	.word	0x20002ce9
 800160c:	20000468 	.word	0x20000468

08001610 <turn_enemy>:

void turn_enemy(uint8_t width, uint8_t height, uint16_t* enemy_final, struct Enemy enemy) {
 8001610:	b082      	sub	sp, #8
 8001612:	b480      	push	{r7}
 8001614:	b089      	sub	sp, #36	@ 0x24
 8001616:	af00      	add	r7, sp, #0
 8001618:	603a      	str	r2, [r7, #0]
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
 8001620:	460b      	mov	r3, r1
 8001622:	71bb      	strb	r3, [r7, #6]
	for (int row = 0; row < height; row++) {
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	e036      	b.n	8001698 <turn_enemy+0x88>
		for (int col = 0; col < width / 2; col++) {
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
 800162e:	e029      	b.n	8001684 <turn_enemy+0x74>
			int left  = row * width + col;
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4413      	add	r3, r2
 800163c:	617b      	str	r3, [r7, #20]
			int right = row * width + (width - 1 - col);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	fb03 f202 	mul.w	r2, r3, r2
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	1e59      	subs	r1, r3, #1
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	1acb      	subs	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	613b      	str	r3, [r7, #16]

			// Swap 16-bit pixels
			uint16_t temp = enemy_final[left];
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	4413      	add	r3, r2
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	81fb      	strh	r3, [r7, #14]
			enemy_final[left] = enemy_final[right];
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	441a      	add	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	6839      	ldr	r1, [r7, #0]
 800166c:	440b      	add	r3, r1
 800166e:	8812      	ldrh	r2, [r2, #0]
 8001670:	801a      	strh	r2, [r3, #0]
			enemy_final[right] = temp;
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	4413      	add	r3, r2
 800167a:	89fa      	ldrh	r2, [r7, #14]
 800167c:	801a      	strh	r2, [r3, #0]
		for (int col = 0; col < width / 2; col++) {
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	3301      	adds	r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	085b      	lsrs	r3, r3, #1
 8001688:	b2db      	uxtb	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	4293      	cmp	r3, r2
 8001690:	dbce      	blt.n	8001630 <turn_enemy+0x20>
	for (int row = 0; row < height; row++) {
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3301      	adds	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbc4      	blt.n	800162a <turn_enemy+0x1a>
		}
	}


}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3724      	adds	r7, #36	@ 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	b002      	add	sp, #8
 80016ae:	4770      	bx	lr

080016b0 <collision_detection>:
		arr[i+1] = temp;
	}
}


bool collision_detection(struct Character mario, struct Object object) {
 80016b0:	b084      	sub	sp, #16
 80016b2:	b480      	push	{r7}
 80016b4:	b089      	sub	sp, #36	@ 0x24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 80016bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t Ax = mario.x;
 80016c0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80016c4:	83fb      	strh	r3, [r7, #30]
	uint16_t Ay = mario.y;
 80016c6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80016ca:	83bb      	strh	r3, [r7, #28]

	uint16_t Bx = object.x;
 80016cc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 80016d0:	837b      	strh	r3, [r7, #26]
	uint16_t By = object.y;
 80016d2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 80016d6:	833b      	strh	r3, [r7, #24]

	uint16_t A_left   = Ax;
 80016d8:	8bfb      	ldrh	r3, [r7, #30]
 80016da:	82fb      	strh	r3, [r7, #22]
	uint16_t A_right  = Ax + mario.width;
 80016dc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	8bfb      	ldrh	r3, [r7, #30]
 80016e4:	4413      	add	r3, r2
 80016e6:	82bb      	strh	r3, [r7, #20]
	uint16_t A_top    = Ay;
 80016e8:	8bbb      	ldrh	r3, [r7, #28]
 80016ea:	827b      	strh	r3, [r7, #18]
	uint16_t A_bottom = Ay + mario.height;
 80016ec:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	8bbb      	ldrh	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	823b      	strh	r3, [r7, #16]

	uint16_t B_left   = Bx;
 80016f8:	8b7b      	ldrh	r3, [r7, #26]
 80016fa:	81fb      	strh	r3, [r7, #14]
	uint16_t B_right  = Bx + object.width;
 80016fc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001700:	b29a      	uxth	r2, r3
 8001702:	8b7b      	ldrh	r3, [r7, #26]
 8001704:	4413      	add	r3, r2
 8001706:	81bb      	strh	r3, [r7, #12]
	uint16_t B_top    = By;
 8001708:	8b3b      	ldrh	r3, [r7, #24]
 800170a:	817b      	strh	r3, [r7, #10]
	uint16_t B_bottom = By + object.height;
 800170c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001710:	b29a      	uxth	r2, r3
 8001712:	8b3b      	ldrh	r3, [r7, #24]
 8001714:	4413      	add	r3, r2
 8001716:	813b      	strh	r3, [r7, #8]

	bool x_overlap = (A_right >  B_left) && (B_right >  A_left);
 8001718:	8aba      	ldrh	r2, [r7, #20]
 800171a:	89fb      	ldrh	r3, [r7, #14]
 800171c:	429a      	cmp	r2, r3
 800171e:	d905      	bls.n	800172c <collision_detection+0x7c>
 8001720:	89ba      	ldrh	r2, [r7, #12]
 8001722:	8afb      	ldrh	r3, [r7, #22]
 8001724:	429a      	cmp	r2, r3
 8001726:	d901      	bls.n	800172c <collision_detection+0x7c>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <collision_detection+0x7e>
 800172c:	2300      	movs	r3, #0
 800172e:	71fb      	strb	r3, [r7, #7]
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	71fb      	strb	r3, [r7, #7]
	bool y_overlap = (A_bottom > B_top ) && (B_bottom > A_top );
 8001738:	8a3a      	ldrh	r2, [r7, #16]
 800173a:	897b      	ldrh	r3, [r7, #10]
 800173c:	429a      	cmp	r2, r3
 800173e:	d905      	bls.n	800174c <collision_detection+0x9c>
 8001740:	893a      	ldrh	r2, [r7, #8]
 8001742:	8a7b      	ldrh	r3, [r7, #18]
 8001744:	429a      	cmp	r2, r3
 8001746:	d901      	bls.n	800174c <collision_detection+0x9c>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <collision_detection+0x9e>
 800174c:	2300      	movs	r3, #0
 800174e:	71bb      	strb	r3, [r7, #6]
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	71bb      	strb	r3, [r7, #6]
	return x_overlap && y_overlap;
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d004      	beq.n	8001768 <collision_detection+0xb8>
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <collision_detection+0xb8>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <collision_detection+0xba>
 8001768:	2300      	movs	r3, #0
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
}
 8001770:	4618      	mov	r0, r3
 8001772:	3724      	adds	r7, #36	@ 0x24
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	b004      	add	sp, #16
 800177c:	4770      	bx	lr
	...

08001780 <collision_detection_enemies>:

bool collision_detection_enemies() {
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	b095      	sub	sp, #84	@ 0x54
 8001784:	af06      	add	r7, sp, #24

	static uint32_t mario_last_hit = 0;
	if (mario_last_hit == 0)
 8001786:	4ba0      	ldr	r3, [pc, #640]	@ (8001a08 <collision_detection_enemies+0x288>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d104      	bne.n	8001798 <collision_detection_enemies+0x18>
		mario_last_hit = HAL_GetTick();
 800178e:	f002 fba1 	bl	8003ed4 <HAL_GetTick>
 8001792:	4603      	mov	r3, r0
 8001794:	4a9c      	ldr	r2, [pc, #624]	@ (8001a08 <collision_detection_enemies+0x288>)
 8001796:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 2; i++) {
 8001798:	2300      	movs	r3, #0
 800179a:	637b      	str	r3, [r7, #52]	@ 0x34
 800179c:	e185      	b.n	8001aaa <collision_detection_enemies+0x32a>
//	int16_t height;
//	uint16_t* frame;
//	bool collidable;
//	bool redraw;

		struct Object enemy_object = { enemies[i]->x, enemies[i]->y, 0, 0, enemies[i]->width, enemies[i]->height, bowser_final, true, false };
 800179e:	4a9b      	ldr	r2, [pc, #620]	@ (8001a0c <collision_detection_enemies+0x28c>)
 80017a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017aa:	83bb      	strh	r3, [r7, #28]
 80017ac:	4a97      	ldr	r2, [pc, #604]	@ (8001a0c <collision_detection_enemies+0x28c>)
 80017ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017b8:	83fb      	strh	r3, [r7, #30]
 80017ba:	2300      	movs	r3, #0
 80017bc:	843b      	strh	r3, [r7, #32]
 80017be:	2300      	movs	r3, #0
 80017c0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80017c2:	4a92      	ldr	r2, [pc, #584]	@ (8001a0c <collision_detection_enemies+0x28c>)
 80017c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80017d0:	4a8e      	ldr	r2, [pc, #568]	@ (8001a0c <collision_detection_enemies+0x28c>)
 80017d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80017de:	4b8c      	ldr	r3, [pc, #560]	@ (8001a10 <collision_detection_enemies+0x290>)
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017e2:	2301      	movs	r3, #1
 80017e4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		if (enemies[i]->died || !collision_detection(mario,enemy_object))
 80017ee:	4a87      	ldr	r2, [pc, #540]	@ (8001a0c <collision_detection_enemies+0x28c>)
 80017f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	7d5b      	ldrb	r3, [r3, #21]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f040 8152 	bne.w	8001aa2 <collision_detection_enemies+0x322>
 80017fe:	4e85      	ldr	r6, [pc, #532]	@ (8001a14 <collision_detection_enemies+0x294>)
 8001800:	ad01      	add	r5, sp, #4
 8001802:	f107 041c 	add.w	r4, r7, #28
 8001806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	602b      	str	r3, [r5, #0]
 800180e:	6933      	ldr	r3, [r6, #16]
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001816:	f7ff ff4b 	bl	80016b0 <collision_detection>
 800181a:	4603      	mov	r3, r0
 800181c:	f083 0301 	eor.w	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 813d 	bne.w	8001aa2 <collision_detection_enemies+0x322>
			continue;

		uint32_t now = HAL_GetTick();
 8001828:	f002 fb54 	bl	8003ed4 <HAL_GetTick>
 800182c:	6338      	str	r0, [r7, #48]	@ 0x30
		mario.redraw = true;
 800182e:	4b79      	ldr	r3, [pc, #484]	@ (8001a14 <collision_detection_enemies+0x294>)
 8001830:	2201      	movs	r2, #1
 8001832:	741a      	strb	r2, [r3, #16]

		if (now - mario_last_hit  > 1000) {
 8001834:	4b74      	ldr	r3, [pc, #464]	@ (8001a08 <collision_detection_enemies+0x288>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001840:	d908      	bls.n	8001854 <collision_detection_enemies+0xd4>
			mario_lives--;
 8001842:	4b75      	ldr	r3, [pc, #468]	@ (8001a18 <collision_detection_enemies+0x298>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	3b01      	subs	r3, #1
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b73      	ldr	r3, [pc, #460]	@ (8001a18 <collision_detection_enemies+0x298>)
 800184c:	701a      	strb	r2, [r3, #0]
			mario_last_hit = now;
 800184e:	4a6e      	ldr	r2, [pc, #440]	@ (8001a08 <collision_detection_enemies+0x288>)
 8001850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001852:	6013      	str	r3, [r2, #0]
		}
		// renders rest of function obsolete for now
//		return;
		// Landing from above (moving downward)
		if (mario.y_velocity > 0 &&
 8001854:	4b6f      	ldr	r3, [pc, #444]	@ (8001a14 <collision_detection_enemies+0x294>)
 8001856:	edd3 7a03 	vldr	s15, [r3, #12]
 800185a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001862:	dd39      	ble.n	80018d8 <collision_detection_enemies+0x158>
			prev_mario.y + prev_mario.height <= enemies[i]->y) {
 8001864:	4b6d      	ldr	r3, [pc, #436]	@ (8001a1c <collision_detection_enemies+0x29c>)
 8001866:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800186a:	461a      	mov	r2, r3
 800186c:	4b6b      	ldr	r3, [pc, #428]	@ (8001a1c <collision_detection_enemies+0x29c>)
 800186e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001872:	4413      	add	r3, r2
 8001874:	4965      	ldr	r1, [pc, #404]	@ (8001a0c <collision_detection_enemies+0x28c>)
 8001876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001878:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800187c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
		if (mario.y_velocity > 0 &&
 8001880:	4293      	cmp	r3, r2
 8001882:	dc29      	bgt.n	80018d8 <collision_detection_enemies+0x158>

			mario.y = enemies[i]->y - mario.height - 40;
 8001884:	4a61      	ldr	r2, [pc, #388]	@ (8001a0c <collision_detection_enemies+0x28c>)
 8001886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b60      	ldr	r3, [pc, #384]	@ (8001a14 <collision_detection_enemies+0x294>)
 8001894:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001898:	b29b      	uxth	r3, r3
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	b29b      	uxth	r3, r3
 800189e:	3b28      	subs	r3, #40	@ 0x28
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	b21a      	sxth	r2, r3
 80018a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001a14 <collision_detection_enemies+0x294>)
 80018a6:	805a      	strh	r2, [r3, #2]
			if (i == 0) {
 80018a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d103      	bne.n	80018b6 <collision_detection_enemies+0x136>
				mario.y_velocity = -100;
 80018ae:	4b59      	ldr	r3, [pc, #356]	@ (8001a14 <collision_detection_enemies+0x294>)
 80018b0:	4a5b      	ldr	r2, [pc, #364]	@ (8001a20 <collision_detection_enemies+0x2a0>)
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	e00e      	b.n	80018d4 <collision_detection_enemies+0x154>
			} else if (i == 1) {
 80018b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d10b      	bne.n	80018d4 <collision_detection_enemies+0x154>
				enemies[i]->died = true;
 80018bc:	4a53      	ldr	r2, [pc, #332]	@ (8001a0c <collision_detection_enemies+0x28c>)
 80018be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c4:	2201      	movs	r2, #1
 80018c6:	755a      	strb	r2, [r3, #21]
				// undo the minus life from before
				mario_lives++;
 80018c8:	4b53      	ldr	r3, [pc, #332]	@ (8001a18 <collision_detection_enemies+0x298>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b51      	ldr	r3, [pc, #324]	@ (8001a18 <collision_detection_enemies+0x298>)
 80018d2:	701a      	strb	r2, [r3, #0]
			}
			return true;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0ed      	b.n	8001ab4 <collision_detection_enemies+0x334>
		}
		// Hit head from below (moving upward)
		else if (mario.y_velocity < 0 &&
 80018d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001a14 <collision_detection_enemies+0x294>)
 80018da:	edd3 7a03 	vldr	s15, [r3, #12]
 80018de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	d52b      	bpl.n	8001940 <collision_detection_enemies+0x1c0>
				 prev_mario.y >= enemies[i]->y + enemies[i]->height) {
 80018e8:	4b4c      	ldr	r3, [pc, #304]	@ (8001a1c <collision_detection_enemies+0x29c>)
 80018ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4a46      	ldr	r2, [pc, #280]	@ (8001a0c <collision_detection_enemies+0x28c>)
 80018f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018fc:	4618      	mov	r0, r3
 80018fe:	4a43      	ldr	r2, [pc, #268]	@ (8001a0c <collision_detection_enemies+0x28c>)
 8001900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800190a:	4403      	add	r3, r0
		else if (mario.y_velocity < 0 &&
 800190c:	4299      	cmp	r1, r3
 800190e:	db17      	blt.n	8001940 <collision_detection_enemies+0x1c0>

			mario.y = enemies[i]->y + enemies[i]->height;
 8001910:	4a3e      	ldr	r2, [pc, #248]	@ (8001a0c <collision_detection_enemies+0x28c>)
 8001912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001918:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800191c:	b29a      	uxth	r2, r3
 800191e:	493b      	ldr	r1, [pc, #236]	@ (8001a0c <collision_detection_enemies+0x28c>)
 8001920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001922:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001926:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800192a:	b29b      	uxth	r3, r3
 800192c:	4413      	add	r3, r2
 800192e:	b29b      	uxth	r3, r3
 8001930:	b21a      	sxth	r2, r3
 8001932:	4b38      	ldr	r3, [pc, #224]	@ (8001a14 <collision_detection_enemies+0x294>)
 8001934:	805a      	strh	r2, [r3, #2]
			mario.y_velocity = 0.1;  // Start falling
 8001936:	4b37      	ldr	r3, [pc, #220]	@ (8001a14 <collision_detection_enemies+0x294>)
 8001938:	4a3a      	ldr	r2, [pc, #232]	@ (8001a24 <collision_detection_enemies+0x2a4>)
 800193a:	60da      	str	r2, [r3, #12]
			return true;
 800193c:	2301      	movs	r3, #1
 800193e:	e0b9      	b.n	8001ab4 <collision_detection_enemies+0x334>
		}
		// Hit from left
		else if (prev_mario.x + prev_mario.width <= enemies[i]->x) {
 8001940:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <collision_detection_enemies+0x29c>)
 8001942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001946:	461a      	mov	r2, r3
 8001948:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <collision_detection_enemies+0x29c>)
 800194a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800194e:	4413      	add	r3, r2
 8001950:	492e      	ldr	r1, [pc, #184]	@ (8001a0c <collision_detection_enemies+0x28c>)
 8001952:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001954:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001958:	f9b2 2000 	ldrsh.w	r2, [r2]
 800195c:	4293      	cmp	r3, r2
 800195e:	dc14      	bgt.n	800198a <collision_detection_enemies+0x20a>
			mario.x = enemies[i]->x - mario.width;
 8001960:	4a2a      	ldr	r2, [pc, #168]	@ (8001a0c <collision_detection_enemies+0x28c>)
 8001962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196c:	b29a      	uxth	r2, r3
 800196e:	4b29      	ldr	r3, [pc, #164]	@ (8001a14 <collision_detection_enemies+0x294>)
 8001970:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001974:	b29b      	uxth	r3, r3
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	b29b      	uxth	r3, r3
 800197a:	b21a      	sxth	r2, r3
 800197c:	4b25      	ldr	r3, [pc, #148]	@ (8001a14 <collision_detection_enemies+0x294>)
 800197e:	801a      	strh	r2, [r3, #0]
			mario.x_distance_between_frame = 0;
 8001980:	4b24      	ldr	r3, [pc, #144]	@ (8001a14 <collision_detection_enemies+0x294>)
 8001982:	2200      	movs	r2, #0
 8001984:	811a      	strh	r2, [r3, #8]
			return true;
 8001986:	2301      	movs	r3, #1
 8001988:	e094      	b.n	8001ab4 <collision_detection_enemies+0x334>
		}
		// Hit from right
		else if (prev_mario.x >= enemies[i]->x + enemies[i]->width) {
 800198a:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <collision_detection_enemies+0x29c>)
 800198c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001990:	4619      	mov	r1, r3
 8001992:	4a1e      	ldr	r2, [pc, #120]	@ (8001a0c <collision_detection_enemies+0x28c>)
 8001994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199e:	4618      	mov	r0, r3
 80019a0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a0c <collision_detection_enemies+0x28c>)
 80019a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ac:	4403      	add	r3, r0
 80019ae:	4299      	cmp	r1, r3
 80019b0:	db17      	blt.n	80019e2 <collision_detection_enemies+0x262>
			mario.x = enemies[i]->x + enemies[i]->width;
 80019b2:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <collision_detection_enemies+0x28c>)
 80019b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	4912      	ldr	r1, [pc, #72]	@ (8001a0c <collision_detection_enemies+0x28c>)
 80019c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	b21a      	sxth	r2, r3
 80019d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <collision_detection_enemies+0x294>)
 80019d6:	801a      	strh	r2, [r3, #0]
			mario.x_distance_between_frame = 0;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <collision_detection_enemies+0x294>)
 80019da:	2200      	movs	r2, #0
 80019dc:	811a      	strh	r2, [r3, #8]
			return true;
 80019de:	2301      	movs	r3, #1
 80019e0:	e068      	b.n	8001ab4 <collision_detection_enemies+0x334>
		}
		else if (i == 0 || i == 1) {
 80019e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <collision_detection_enemies+0x26e>
 80019e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d15a      	bne.n	8001aa4 <collision_detection_enemies+0x324>
			struct Enemy prev_enemy = (i == 0) ? prev_bowser : prev_goomba;
 80019ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d11b      	bne.n	8001a2c <collision_detection_enemies+0x2ac>
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <collision_detection_enemies+0x2a8>)
 80019f6:	1d3c      	adds	r4, r7, #4
 80019f8:	461d      	mov	r5, r3
 80019fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a02:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a06:	e01a      	b.n	8001a3e <collision_detection_enemies+0x2be>
 8001a08:	20005394 	.word	0x20005394
 8001a0c:	20000094 	.word	0x20000094
 8001a10:	20000ce8 	.word	0x20000ce8
 8001a14:	20000020 	.word	0x20000020
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	2000000c 	.word	0x2000000c
 8001a20:	c2c80000 	.word	0xc2c80000
 8001a24:	3dcccccd 	.word	0x3dcccccd
 8001a28:	20000034 	.word	0x20000034
 8001a2c:	4b23      	ldr	r3, [pc, #140]	@ (8001abc <collision_detection_enemies+0x33c>)
 8001a2e:	1d3c      	adds	r4, r7, #4
 8001a30:	461d      	mov	r5, r3
 8001a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a3a:	e884 0003 	stmia.w	r4, {r0, r1}
			if (enemies[i]->x >= prev_enemy.x) {
 8001a3e:	4a20      	ldr	r2, [pc, #128]	@ (8001ac0 <collision_detection_enemies+0x340>)
 8001a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	db13      	blt.n	8001a7a <collision_detection_enemies+0x2fa>
				mario.x = enemies[i]->x + enemies[i]->width;
 8001a52:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac0 <collision_detection_enemies+0x340>)
 8001a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	4917      	ldr	r1, [pc, #92]	@ (8001ac0 <collision_detection_enemies+0x340>)
 8001a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <collision_detection_enemies+0x344>)
 8001a76:	801a      	strh	r2, [r3, #0]
 8001a78:	e014      	b.n	8001aa4 <collision_detection_enemies+0x324>
			}
			else {
				mario.x = enemies[i]->x - enemies[i]->width;
 8001a7a:	4a11      	ldr	r2, [pc, #68]	@ (8001ac0 <collision_detection_enemies+0x340>)
 8001a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	490d      	ldr	r1, [pc, #52]	@ (8001ac0 <collision_detection_enemies+0x340>)
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <collision_detection_enemies+0x344>)
 8001a9e:	801a      	strh	r2, [r3, #0]
 8001aa0:	e000      	b.n	8001aa4 <collision_detection_enemies+0x324>
			continue;
 8001aa2:	bf00      	nop
	for (int i = 0; i < 2; i++) {
 8001aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	f77f ae76 	ble.w	800179e <collision_detection_enemies+0x1e>
			}
		}
	}

	return false;
 8001ab2:	2300      	movs	r3, #0

}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	373c      	adds	r7, #60	@ 0x3c
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001abc:	20000064 	.word	0x20000064
 8001ac0:	20000094 	.word	0x20000094
 8001ac4:	20000020 	.word	0x20000020

08001ac8 <standing_on>:



bool standing_on(struct Character mario, struct Object object) {
 8001ac8:	b084      	sub	sp, #16
 8001aca:	b480      	push	{r7}
 8001acc:	b087      	sub	sp, #28
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	f107 0c20 	add.w	ip, r7, #32
 8001ad4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint16_t Ax = mario.x;
 8001ad8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001adc:	82fb      	strh	r3, [r7, #22]
    uint16_t Ay = mario.y;
 8001ade:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001ae2:	82bb      	strh	r3, [r7, #20]

    uint16_t Bx = object.x;
 8001ae4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001ae8:	827b      	strh	r3, [r7, #18]
    uint16_t By = object.y;
 8001aea:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001aee:	823b      	strh	r3, [r7, #16]

    uint16_t A_left   = Ax;
 8001af0:	8afb      	ldrh	r3, [r7, #22]
 8001af2:	81fb      	strh	r3, [r7, #14]
    uint16_t A_right  = Ax + mario.width;
 8001af4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	8afb      	ldrh	r3, [r7, #22]
 8001afc:	4413      	add	r3, r2
 8001afe:	81bb      	strh	r3, [r7, #12]
    uint16_t A_bottom = Ay + mario.height;
 8001b00:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	8abb      	ldrh	r3, [r7, #20]
 8001b08:	4413      	add	r3, r2
 8001b0a:	817b      	strh	r3, [r7, #10]

    uint16_t B_left   = Bx;
 8001b0c:	8a7b      	ldrh	r3, [r7, #18]
 8001b0e:	813b      	strh	r3, [r7, #8]
    uint16_t B_right  = Bx + object.width;
 8001b10:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	8a7b      	ldrh	r3, [r7, #18]
 8001b18:	4413      	add	r3, r2
 8001b1a:	80fb      	strh	r3, [r7, #6]
    uint16_t B_top    = By;
 8001b1c:	8a3b      	ldrh	r3, [r7, #16]
 8001b1e:	80bb      	strh	r3, [r7, #4]

    // Check if Mario is horizontally overlapping with the object
    bool x_overlap = (A_right > B_left) && (A_left < B_right);
 8001b20:	89ba      	ldrh	r2, [r7, #12]
 8001b22:	893b      	ldrh	r3, [r7, #8]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d905      	bls.n	8001b34 <standing_on+0x6c>
 8001b28:	89fa      	ldrh	r2, [r7, #14]
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d201      	bcs.n	8001b34 <standing_on+0x6c>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <standing_on+0x6e>
 8001b34:	2300      	movs	r3, #0
 8001b36:	70fb      	strb	r3, [r7, #3]
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	70fb      	strb	r3, [r7, #3]

    // Check if Mario's bottom is within 2 pixels of the object's top
    // This gives tolerance for floating-point precision issues
    bool y_standing = (A_bottom >= B_top - 1) && (A_bottom <= B_top + 1);
 8001b40:	897a      	ldrh	r2, [r7, #10]
 8001b42:	88bb      	ldrh	r3, [r7, #4]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	429a      	cmp	r2, r3
 8001b48:	db06      	blt.n	8001b58 <standing_on+0x90>
 8001b4a:	897a      	ldrh	r2, [r7, #10]
 8001b4c:	88bb      	ldrh	r3, [r7, #4]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	429a      	cmp	r2, r3
 8001b52:	dc01      	bgt.n	8001b58 <standing_on+0x90>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <standing_on+0x92>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	70bb      	strb	r3, [r7, #2]
 8001b5c:	78bb      	ldrb	r3, [r7, #2]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	70bb      	strb	r3, [r7, #2]

    return x_overlap && y_standing;
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d004      	beq.n	8001b74 <standing_on+0xac>
 8001b6a:	78bb      	ldrb	r3, [r7, #2]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <standing_on+0xac>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <standing_on+0xae>
 8001b74:	2300      	movs	r3, #0
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	b004      	add	sp, #16
 8001b88:	4770      	bx	lr
	...

08001b8c <isTouchingGround>:

bool isTouchingGround() {
 8001b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8e:	b089      	sub	sp, #36	@ 0x24
 8001b90:	af06      	add	r7, sp, #24
    bool onGround = false;
 8001b92:	2300      	movs	r3, #0
 8001b94:	71fb      	strb	r3, [r7, #7]
    bool collision_detected = false;
 8001b96:	2300      	movs	r3, #0
 8001b98:	70fb      	strb	r3, [r7, #3]

    for (uint8_t i = 0; i < num_objects; i++) {
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	71bb      	strb	r3, [r7, #6]
 8001b9e:	e1d9      	b.n	8001f54 <isTouchingGround+0x3c8>
        if (!objects[i].collidable) {
 8001ba0:	79ba      	ldrb	r2, [r7, #6]
 8001ba2:	49b3      	ldr	r1, [pc, #716]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	3310      	adds	r3, #16
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	f083 0301 	eor.w	r3, r3, #1
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80c2 	beq.w	8001d42 <isTouchingGround+0x1b6>
			if (collision_detection(prev_mario, objects[i]) || collision_detection(mario, objects[i])) {
 8001bbe:	79ba      	ldrb	r2, [r7, #6]
 8001bc0:	4eac      	ldr	r6, [pc, #688]	@ (8001e74 <isTouchingGround+0x2e8>)
 8001bc2:	49ab      	ldr	r1, [pc, #684]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	ac01      	add	r4, sp, #4
 8001bd0:	461d      	mov	r5, r3
 8001bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bd6:	682b      	ldr	r3, [r5, #0]
 8001bd8:	6023      	str	r3, [r4, #0]
 8001bda:	6933      	ldr	r3, [r6, #16]
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001be2:	f7ff fd65 	bl	80016b0 <collision_detection>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d116      	bne.n	8001c1a <isTouchingGround+0x8e>
 8001bec:	79ba      	ldrb	r2, [r7, #6]
 8001bee:	4ea2      	ldr	r6, [pc, #648]	@ (8001e78 <isTouchingGround+0x2ec>)
 8001bf0:	499f      	ldr	r1, [pc, #636]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	ac01      	add	r4, sp, #4
 8001bfe:	461d      	mov	r5, r3
 8001c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c04:	682b      	ldr	r3, [r5, #0]
 8001c06:	6023      	str	r3, [r4, #0]
 8001c08:	6933      	ldr	r3, [r6, #16]
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001c10:	f7ff fd4e 	bl	80016b0 <collision_detection>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d043      	beq.n	8001ca2 <isTouchingGround+0x116>
				ILI9341_DrawImage(objects[i].x, objects[i].y, objects[i].width, objects[i].height, objects[i].frame);
 8001c1a:	79ba      	ldrb	r2, [r7, #6]
 8001c1c:	4994      	ldr	r1, [pc, #592]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2c:	b298      	uxth	r0, r3
 8001c2e:	79ba      	ldrb	r2, [r7, #6]
 8001c30:	498f      	ldr	r1, [pc, #572]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c42:	b299      	uxth	r1, r3
 8001c44:	79ba      	ldrb	r2, [r7, #6]
 8001c46:	4c8a      	ldr	r4, [pc, #552]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4423      	add	r3, r4
 8001c52:	3308      	adds	r3, #8
 8001c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c58:	b29c      	uxth	r4, r3
 8001c5a:	79ba      	ldrb	r2, [r7, #6]
 8001c5c:	4d84      	ldr	r5, [pc, #528]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	442b      	add	r3, r5
 8001c68:	330a      	adds	r3, #10
 8001c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6e:	b29d      	uxth	r5, r3
 8001c70:	79ba      	ldrb	r2, [r7, #6]
 8001c72:	4e7f      	ldr	r6, [pc, #508]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4433      	add	r3, r6
 8001c7e:	330c      	adds	r3, #12
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	462b      	mov	r3, r5
 8001c86:	4622      	mov	r2, r4
 8001c88:	f7ff fb58 	bl	800133c <ILI9341_DrawImage>
				objects[i].redraw = true;
 8001c8c:	79ba      	ldrb	r2, [r7, #6]
 8001c8e:	4978      	ldr	r1, [pc, #480]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	3311      	adds	r3, #17
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]
				break;
 8001ca0:	e160      	b.n	8001f64 <isTouchingGround+0x3d8>
			} else if (objects[i].redraw) {
 8001ca2:	79ba      	ldrb	r2, [r7, #6]
 8001ca4:	4972      	ldr	r1, [pc, #456]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	3311      	adds	r3, #17
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 8147 	beq.w	8001f48 <isTouchingGround+0x3bc>
				ILI9341_DrawImage(objects[i].x, objects[i].y, objects[i].width, objects[i].height, objects[i].frame);
 8001cba:	79ba      	ldrb	r2, [r7, #6]
 8001cbc:	496c      	ldr	r1, [pc, #432]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ccc:	b298      	uxth	r0, r3
 8001cce:	79ba      	ldrb	r2, [r7, #6]
 8001cd0:	4967      	ldr	r1, [pc, #412]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce2:	b299      	uxth	r1, r3
 8001ce4:	79ba      	ldrb	r2, [r7, #6]
 8001ce6:	4c62      	ldr	r4, [pc, #392]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4423      	add	r3, r4
 8001cf2:	3308      	adds	r3, #8
 8001cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf8:	b29c      	uxth	r4, r3
 8001cfa:	79ba      	ldrb	r2, [r7, #6]
 8001cfc:	4d5c      	ldr	r5, [pc, #368]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	442b      	add	r3, r5
 8001d08:	330a      	adds	r3, #10
 8001d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0e:	b29d      	uxth	r5, r3
 8001d10:	79ba      	ldrb	r2, [r7, #6]
 8001d12:	4e57      	ldr	r6, [pc, #348]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4433      	add	r3, r6
 8001d1e:	330c      	adds	r3, #12
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	462b      	mov	r3, r5
 8001d26:	4622      	mov	r2, r4
 8001d28:	f7ff fb08 	bl	800133c <ILI9341_DrawImage>
				objects[i].redraw = false;
 8001d2c:	79ba      	ldrb	r2, [r7, #6]
 8001d2e:	4950      	ldr	r1, [pc, #320]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	3311      	adds	r3, #17
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
			}
        continue;
 8001d40:	e102      	b.n	8001f48 <isTouchingGround+0x3bc>
        }

        if (!collision_detection(mario, objects[i]))
 8001d42:	79ba      	ldrb	r2, [r7, #6]
 8001d44:	4e4c      	ldr	r6, [pc, #304]	@ (8001e78 <isTouchingGround+0x2ec>)
 8001d46:	494a      	ldr	r1, [pc, #296]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	ac01      	add	r4, sp, #4
 8001d54:	461d      	mov	r5, r3
 8001d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d5a:	682b      	ldr	r3, [r5, #0]
 8001d5c:	6023      	str	r3, [r4, #0]
 8001d5e:	6933      	ldr	r3, [r6, #16]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d66:	f7ff fca3 	bl	80016b0 <collision_detection>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f083 0301 	eor.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 80ea 	bne.w	8001f4c <isTouchingGround+0x3c0>
            continue;

        collision_detected = true;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	70fb      	strb	r3, [r7, #3]

        // Landing from above (moving downward)
        if (mario.y_velocity > 0 &&
 8001d7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e78 <isTouchingGround+0x2ec>)
 8001d7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	dd2e      	ble.n	8001dea <isTouchingGround+0x25e>
            prev_mario.y + prev_mario.height <= objects[i].y) {
 8001d8c:	4b39      	ldr	r3, [pc, #228]	@ (8001e74 <isTouchingGround+0x2e8>)
 8001d8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b37      	ldr	r3, [pc, #220]	@ (8001e74 <isTouchingGround+0x2e8>)
 8001d96:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d9a:	18d1      	adds	r1, r2, r3
 8001d9c:	79ba      	ldrb	r2, [r7, #6]
 8001d9e:	4834      	ldr	r0, [pc, #208]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4403      	add	r3, r0
 8001daa:	3302      	adds	r3, #2
 8001dac:	f9b3 3000 	ldrsh.w	r3, [r3]
        if (mario.y_velocity > 0 &&
 8001db0:	4299      	cmp	r1, r3
 8001db2:	dc1a      	bgt.n	8001dea <isTouchingGround+0x25e>

            mario.y = objects[i].y - mario.height;
 8001db4:	79ba      	ldrb	r2, [r7, #6]
 8001db6:	492e      	ldr	r1, [pc, #184]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	4b2b      	ldr	r3, [pc, #172]	@ (8001e78 <isTouchingGround+0x2ec>)
 8001dcc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	4b27      	ldr	r3, [pc, #156]	@ (8001e78 <isTouchingGround+0x2ec>)
 8001dda:	805a      	strh	r2, [r3, #2]
            mario.y_velocity = 0;
 8001ddc:	4b26      	ldr	r3, [pc, #152]	@ (8001e78 <isTouchingGround+0x2ec>)
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	60da      	str	r2, [r3, #12]
            onGround = true;
 8001de4:	2301      	movs	r3, #1
 8001de6:	71fb      	strb	r3, [r7, #7]
 8001de8:	e0ad      	b.n	8001f46 <isTouchingGround+0x3ba>
        }
        // Hit head from below (moving upward)
        else if (mario.y_velocity < 0 &&
 8001dea:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <isTouchingGround+0x2ec>)
 8001dec:	edd3 7a03 	vldr	s15, [r3, #12]
 8001df0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d542      	bpl.n	8001e80 <isTouchingGround+0x2f4>
                 prev_mario.y >= objects[i].y + objects[i].height) {
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <isTouchingGround+0x2e8>)
 8001dfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e00:	4618      	mov	r0, r3
 8001e02:	79ba      	ldrb	r2, [r7, #6]
 8001e04:	491a      	ldr	r1, [pc, #104]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	3302      	adds	r3, #2
 8001e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e16:	461c      	mov	r4, r3
 8001e18:	79ba      	ldrb	r2, [r7, #6]
 8001e1a:	4915      	ldr	r1, [pc, #84]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	330a      	adds	r3, #10
 8001e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2c:	4423      	add	r3, r4
        else if (mario.y_velocity < 0 &&
 8001e2e:	4298      	cmp	r0, r3
 8001e30:	db26      	blt.n	8001e80 <isTouchingGround+0x2f4>

            mario.y = objects[i].y + objects[i].height;
 8001e32:	79ba      	ldrb	r2, [r7, #6]
 8001e34:	490e      	ldr	r1, [pc, #56]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	3302      	adds	r3, #2
 8001e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e46:	b299      	uxth	r1, r3
 8001e48:	79ba      	ldrb	r2, [r7, #6]
 8001e4a:	4809      	ldr	r0, [pc, #36]	@ (8001e70 <isTouchingGround+0x2e4>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4403      	add	r3, r0
 8001e56:	330a      	adds	r3, #10
 8001e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	440b      	add	r3, r1
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	b21a      	sxth	r2, r3
 8001e64:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <isTouchingGround+0x2ec>)
 8001e66:	805a      	strh	r2, [r3, #2]
            mario.y_velocity = 0.1;  // Start falling
 8001e68:	4b03      	ldr	r3, [pc, #12]	@ (8001e78 <isTouchingGround+0x2ec>)
 8001e6a:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <isTouchingGround+0x2f0>)
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	e06a      	b.n	8001f46 <isTouchingGround+0x3ba>
 8001e70:	200002d8 	.word	0x200002d8
 8001e74:	2000000c 	.word	0x2000000c
 8001e78:	20000020 	.word	0x20000020
 8001e7c:	3dcccccd 	.word	0x3dcccccd
        }
        // Hit from left
        else if (prev_mario.x + prev_mario.width <= objects[i].x) {
 8001e80:	4b62      	ldr	r3, [pc, #392]	@ (800200c <isTouchingGround+0x480>)
 8001e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b60      	ldr	r3, [pc, #384]	@ (800200c <isTouchingGround+0x480>)
 8001e8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e8e:	18d1      	adds	r1, r2, r3
 8001e90:	79ba      	ldrb	r2, [r7, #6]
 8001e92:	485f      	ldr	r0, [pc, #380]	@ (8002010 <isTouchingGround+0x484>)
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4403      	add	r3, r0
 8001e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea2:	4299      	cmp	r1, r3
 8001ea4:	dc16      	bgt.n	8001ed4 <isTouchingGround+0x348>
            mario.x = objects[i].x - mario.width;
 8001ea6:	79ba      	ldrb	r2, [r7, #6]
 8001ea8:	4959      	ldr	r1, [pc, #356]	@ (8002010 <isTouchingGround+0x484>)
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	4b56      	ldr	r3, [pc, #344]	@ (8002014 <isTouchingGround+0x488>)
 8001ebc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	b21a      	sxth	r2, r3
 8001ec8:	4b52      	ldr	r3, [pc, #328]	@ (8002014 <isTouchingGround+0x488>)
 8001eca:	801a      	strh	r2, [r3, #0]
            mario.x_distance_between_frame = 0;
 8001ecc:	4b51      	ldr	r3, [pc, #324]	@ (8002014 <isTouchingGround+0x488>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	811a      	strh	r2, [r3, #8]
        else if (prev_mario.x >= objects[i].x + objects[i].width) {
            mario.x = objects[i].x + objects[i].width;
            mario.x_distance_between_frame = 0;
        }

        break;  // Handle only one collision per frame
 8001ed2:	e046      	b.n	8001f62 <isTouchingGround+0x3d6>
        else if (prev_mario.x >= objects[i].x + objects[i].width) {
 8001ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800200c <isTouchingGround+0x480>)
 8001ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eda:	4618      	mov	r0, r3
 8001edc:	79ba      	ldrb	r2, [r7, #6]
 8001ede:	494c      	ldr	r1, [pc, #304]	@ (8002010 <isTouchingGround+0x484>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eee:	461c      	mov	r4, r3
 8001ef0:	79ba      	ldrb	r2, [r7, #6]
 8001ef2:	4947      	ldr	r1, [pc, #284]	@ (8002010 <isTouchingGround+0x484>)
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	3308      	adds	r3, #8
 8001f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f04:	4423      	add	r3, r4
 8001f06:	4298      	cmp	r0, r3
 8001f08:	db2b      	blt.n	8001f62 <isTouchingGround+0x3d6>
            mario.x = objects[i].x + objects[i].width;
 8001f0a:	79ba      	ldrb	r2, [r7, #6]
 8001f0c:	4940      	ldr	r1, [pc, #256]	@ (8002010 <isTouchingGround+0x484>)
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1c:	b299      	uxth	r1, r3
 8001f1e:	79ba      	ldrb	r2, [r7, #6]
 8001f20:	483b      	ldr	r0, [pc, #236]	@ (8002010 <isTouchingGround+0x484>)
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4403      	add	r3, r0
 8001f2c:	3308      	adds	r3, #8
 8001f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	440b      	add	r3, r1
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	4b36      	ldr	r3, [pc, #216]	@ (8002014 <isTouchingGround+0x488>)
 8001f3c:	801a      	strh	r2, [r3, #0]
            mario.x_distance_between_frame = 0;
 8001f3e:	4b35      	ldr	r3, [pc, #212]	@ (8002014 <isTouchingGround+0x488>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	811a      	strh	r2, [r3, #8]
        break;  // Handle only one collision per frame
 8001f44:	e00d      	b.n	8001f62 <isTouchingGround+0x3d6>
 8001f46:	e00c      	b.n	8001f62 <isTouchingGround+0x3d6>
        continue;
 8001f48:	bf00      	nop
 8001f4a:	e000      	b.n	8001f4e <isTouchingGround+0x3c2>
            continue;
 8001f4c:	bf00      	nop
    for (uint8_t i = 0; i < num_objects; i++) {
 8001f4e:	79bb      	ldrb	r3, [r7, #6]
 8001f50:	3301      	adds	r3, #1
 8001f52:	71bb      	strb	r3, [r7, #6]
 8001f54:	4b30      	ldr	r3, [pc, #192]	@ (8002018 <isTouchingGround+0x48c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	79ba      	ldrb	r2, [r7, #6]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	f4ff ae20 	bcc.w	8001ba0 <isTouchingGround+0x14>
 8001f60:	e000      	b.n	8001f64 <isTouchingGround+0x3d8>
        break;  // Handle only one collision per frame
 8001f62:	bf00      	nop
    // 1. Mario is not currently on ground from collision detection
    // 2. Mario is not standing on any platform
    // 3. Mario has zero velocity (not already falling/jumping)
    // 4. Mario is not at the bottom boundary

    if (!onGround && mario.y_velocity == 0 && mario.y < 176) {
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f083 0301 	eor.w	r3, r3, #1
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d047      	beq.n	8002000 <isTouchingGround+0x474>
 8001f70:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <isTouchingGround+0x488>)
 8001f72:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	d13f      	bne.n	8002000 <isTouchingGround+0x474>
 8001f80:	4b24      	ldr	r3, [pc, #144]	@ (8002014 <isTouchingGround+0x488>)
 8001f82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f86:	2baf      	cmp	r3, #175	@ 0xaf
 8001f88:	dc3a      	bgt.n	8002000 <isTouchingGround+0x474>
        bool is_standing_on_something = false;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	717b      	strb	r3, [r7, #5]

        for (uint8_t i = 0; i < num_objects; i++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	713b      	strb	r3, [r7, #4]
 8001f92:	e027      	b.n	8001fe4 <isTouchingGround+0x458>
            if (objects[i].collidable && standing_on(mario, objects[i])) {
 8001f94:	793a      	ldrb	r2, [r7, #4]
 8001f96:	491e      	ldr	r1, [pc, #120]	@ (8002010 <isTouchingGround+0x484>)
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3310      	adds	r3, #16
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d019      	beq.n	8001fde <isTouchingGround+0x452>
 8001faa:	793a      	ldrb	r2, [r7, #4]
 8001fac:	4e19      	ldr	r6, [pc, #100]	@ (8002014 <isTouchingGround+0x488>)
 8001fae:	4918      	ldr	r1, [pc, #96]	@ (8002010 <isTouchingGround+0x484>)
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	ac01      	add	r4, sp, #4
 8001fbc:	461d      	mov	r5, r3
 8001fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc2:	682b      	ldr	r3, [r5, #0]
 8001fc4:	6023      	str	r3, [r4, #0]
 8001fc6:	6933      	ldr	r3, [r6, #16]
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001fce:	f7ff fd7b 	bl	8001ac8 <standing_on>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <isTouchingGround+0x452>
                is_standing_on_something = true;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	717b      	strb	r3, [r7, #5]
                break;
 8001fdc:	e007      	b.n	8001fee <isTouchingGround+0x462>
        for (uint8_t i = 0; i < num_objects; i++) {
 8001fde:	793b      	ldrb	r3, [r7, #4]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	713b      	strb	r3, [r7, #4]
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <isTouchingGround+0x48c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	793a      	ldrb	r2, [r7, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d3d2      	bcc.n	8001f94 <isTouchingGround+0x408>
            }
        }

        // Only apply gravity if not standing on anything
        if (!is_standing_on_something) {
 8001fee:	797b      	ldrb	r3, [r7, #5]
 8001ff0:	f083 0301 	eor.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <isTouchingGround+0x474>
            mario.y_velocity = 0.1;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <isTouchingGround+0x488>)
 8001ffc:	4a07      	ldr	r2, [pc, #28]	@ (800201c <isTouchingGround+0x490>)
 8001ffe:	60da      	str	r2, [r3, #12]
        }
    }

    return onGround;
 8002000:	79fb      	ldrb	r3, [r7, #7]
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200a:	bf00      	nop
 800200c:	2000000c 	.word	0x2000000c
 8002010:	200002d8 	.word	0x200002d8
 8002014:	20000020 	.word	0x20000020
 8002018:	20002ce8 	.word	0x20002ce8
 800201c:	3dcccccd 	.word	0x3dcccccd

08002020 <cleanMarioBackground>:



void cleanMarioBackground(uint16_t* frame, uint16_t* buffer, uint16_t width, uint16_t height, uint16_t buffsize) {
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	4611      	mov	r1, r2
 800202c:	461a      	mov	r2, r3
 800202e:	460b      	mov	r3, r1
 8002030:	80fb      	strh	r3, [r7, #6]
 8002032:	4613      	mov	r3, r2
 8002034:	80bb      	strh	r3, [r7, #4]
    for (uint16_t i = 0; i < buffsize; i++) {
 8002036:	2300      	movs	r3, #0
 8002038:	82fb      	strh	r3, [r7, #22]
 800203a:	e009      	b.n	8002050 <cleanMarioBackground+0x30>
        buffer[i] = ILI9341_CYAN;  // Initialize everything to cyan
 800203c:	8afb      	ldrh	r3, [r7, #22]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	4413      	add	r3, r2
 8002044:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002048:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < buffsize; i++) {
 800204a:	8afb      	ldrh	r3, [r7, #22]
 800204c:	3301      	adds	r3, #1
 800204e:	82fb      	strh	r3, [r7, #22]
 8002050:	8afa      	ldrh	r2, [r7, #22]
 8002052:	8c3b      	ldrh	r3, [r7, #32]
 8002054:	429a      	cmp	r2, r3
 8002056:	d3f1      	bcc.n	800203c <cleanMarioBackground+0x1c>
    }
	for (uint16_t i = 0; i < width * height; i++) {
 8002058:	2300      	movs	r3, #0
 800205a:	82bb      	strh	r3, [r7, #20]
 800205c:	e013      	b.n	8002086 <cleanMarioBackground+0x66>
		if (frame[i] != 0){
 800205e:	8abb      	ldrh	r3, [r7, #20]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4413      	add	r3, r2
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d009      	beq.n	8002080 <cleanMarioBackground+0x60>
			buffer[i] = frame[i];
 800206c:	8abb      	ldrh	r3, [r7, #20]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	441a      	add	r2, r3
 8002074:	8abb      	ldrh	r3, [r7, #20]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	440b      	add	r3, r1
 800207c:	8812      	ldrh	r2, [r2, #0]
 800207e:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < width * height; i++) {
 8002080:	8abb      	ldrh	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	82bb      	strh	r3, [r7, #20]
 8002086:	8aba      	ldrh	r2, [r7, #20]
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	88b9      	ldrh	r1, [r7, #4]
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	429a      	cmp	r2, r3
 8002092:	dbe4      	blt.n	800205e <cleanMarioBackground+0x3e>
		}
	}
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <draw_map_1>:
}


uint8_t map = 1;

void draw_map_1() {
 80020a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a6:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 80020aa:	b085      	sub	sp, #20
 80020ac:	af02      	add	r7, sp, #8
	ILI9341_FillScreen(ILI9341_CYAN);
 80020ae:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 80020b2:	f7ff f931 	bl	8001318 <ILI9341_FillScreen>
	for (int i = 0; i < 10; i++) {
 80020b6:	2300      	movs	r3, #0
 80020b8:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80020bc:	f102 0204 	add.w	r2, r2, #4
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e0d8      	b.n	8002276 <draw_map_1+0x1d2>
		objects[i].x = i * 32;
 80020c4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80020c8:	f103 0304 	add.w	r3, r3, #4
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	015b      	lsls	r3, r3, #5
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b218      	sxth	r0, r3
 80020d6:	49cb      	ldr	r1, [pc, #812]	@ (8002404 <draw_map_1+0x360>)
 80020d8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80020dc:	f103 0304 	add.w	r3, r3, #4
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	4602      	mov	r2, r0
 80020ee:	801a      	strh	r2, [r3, #0]
		objects[i].prev_x = i * 32;
 80020f0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80020f4:	f103 0304 	add.w	r3, r3, #4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	015b      	lsls	r3, r3, #5
 80020fe:	b29b      	uxth	r3, r3
 8002100:	b218      	sxth	r0, r3
 8002102:	49c0      	ldr	r1, [pc, #768]	@ (8002404 <draw_map_1+0x360>)
 8002104:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002108:	f103 0304 	add.w	r3, r3, #4
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	3304      	adds	r3, #4
 800211a:	4602      	mov	r2, r0
 800211c:	801a      	strh	r2, [r3, #0]
		objects[i].y = 208;
 800211e:	49b9      	ldr	r1, [pc, #740]	@ (8002404 <draw_map_1+0x360>)
 8002120:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002124:	f103 0304 	add.w	r3, r3, #4
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	3302      	adds	r3, #2
 8002136:	22d0      	movs	r2, #208	@ 0xd0
 8002138:	801a      	strh	r2, [r3, #0]
		objects[i].prev_y = 208;
 800213a:	49b2      	ldr	r1, [pc, #712]	@ (8002404 <draw_map_1+0x360>)
 800213c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002140:	f103 0304 	add.w	r3, r3, #4
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	3306      	adds	r3, #6
 8002152:	22d0      	movs	r2, #208	@ 0xd0
 8002154:	801a      	strh	r2, [r3, #0]
		objects[i].width = 32;
 8002156:	49ab      	ldr	r1, [pc, #684]	@ (8002404 <draw_map_1+0x360>)
 8002158:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800215c:	f103 0304 	add.w	r3, r3, #4
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	3308      	adds	r3, #8
 800216e:	2220      	movs	r2, #32
 8002170:	801a      	strh	r2, [r3, #0]
		objects[i].height = 32;
 8002172:	49a4      	ldr	r1, [pc, #656]	@ (8002404 <draw_map_1+0x360>)
 8002174:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002178:	f103 0304 	add.w	r3, r3, #4
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	330a      	adds	r3, #10
 800218a:	2220      	movs	r2, #32
 800218c:	801a      	strh	r2, [r3, #0]
		objects[i].frame = ground;
 800218e:	499d      	ldr	r1, [pc, #628]	@ (8002404 <draw_map_1+0x360>)
 8002190:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002194:	f103 0304 	add.w	r3, r3, #4
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	330c      	adds	r3, #12
 80021a6:	4a98      	ldr	r2, [pc, #608]	@ (8002408 <draw_map_1+0x364>)
 80021a8:	601a      	str	r2, [r3, #0]
		objects[i].collidable = true;
 80021aa:	4996      	ldr	r1, [pc, #600]	@ (8002404 <draw_map_1+0x360>)
 80021ac:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80021b0:	f103 0304 	add.w	r3, r3, #4
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	3310      	adds	r3, #16
 80021c2:	2201      	movs	r2, #1
 80021c4:	701a      	strb	r2, [r3, #0]


		ILI9341_DrawImage(objects[i].x, objects[i].y, objects[i].width, objects[i].height, objects[i].frame);
 80021c6:	498f      	ldr	r1, [pc, #572]	@ (8002404 <draw_map_1+0x360>)
 80021c8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80021cc:	f103 0304 	add.w	r3, r3, #4
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e0:	b298      	uxth	r0, r3
 80021e2:	4988      	ldr	r1, [pc, #544]	@ (8002404 <draw_map_1+0x360>)
 80021e4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80021e8:	f103 0304 	add.w	r3, r3, #4
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	3302      	adds	r3, #2
 80021fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021fe:	b299      	uxth	r1, r3
 8002200:	4c80      	ldr	r4, [pc, #512]	@ (8002404 <draw_map_1+0x360>)
 8002202:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002206:	f103 0304 	add.w	r3, r3, #4
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4423      	add	r3, r4
 8002216:	3308      	adds	r3, #8
 8002218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800221c:	b29c      	uxth	r4, r3
 800221e:	4d79      	ldr	r5, [pc, #484]	@ (8002404 <draw_map_1+0x360>)
 8002220:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002224:	f103 0304 	add.w	r3, r3, #4
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	442b      	add	r3, r5
 8002234:	330a      	adds	r3, #10
 8002236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800223a:	b29d      	uxth	r5, r3
 800223c:	4e71      	ldr	r6, [pc, #452]	@ (8002404 <draw_map_1+0x360>)
 800223e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002242:	f103 0304 	add.w	r3, r3, #4
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4433      	add	r3, r6
 8002252:	330c      	adds	r3, #12
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	462b      	mov	r3, r5
 800225a:	4622      	mov	r2, r4
 800225c:	f7ff f86e 	bl	800133c <ILI9341_DrawImage>
	for (int i = 0; i < 10; i++) {
 8002260:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002264:	f103 0304 	add.w	r3, r3, #4
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8002270:	f102 0204 	add.w	r2, r2, #4
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800227a:	f103 0304 	add.w	r3, r3, #4
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b09      	cmp	r3, #9
 8002282:	f77f af1f 	ble.w	80020c4 <draw_map_1+0x20>
	}

	objects[10].x = 160;
 8002286:	4b5f      	ldr	r3, [pc, #380]	@ (8002404 <draw_map_1+0x360>)
 8002288:	22a0      	movs	r2, #160	@ 0xa0
 800228a:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
	objects[10].prev_x = 160;
 800228e:	4b5d      	ldr	r3, [pc, #372]	@ (8002404 <draw_map_1+0x360>)
 8002290:	22a0      	movs	r2, #160	@ 0xa0
 8002292:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
	objects[10].y = 100;
 8002296:	4b5b      	ldr	r3, [pc, #364]	@ (8002404 <draw_map_1+0x360>)
 8002298:	2264      	movs	r2, #100	@ 0x64
 800229a:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
	objects[10].prev_y = 160;
 800229e:	4b59      	ldr	r3, [pc, #356]	@ (8002404 <draw_map_1+0x360>)
 80022a0:	22a0      	movs	r2, #160	@ 0xa0
 80022a2:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
	objects[10].width = 32;
 80022a6:	4b57      	ldr	r3, [pc, #348]	@ (8002404 <draw_map_1+0x360>)
 80022a8:	2220      	movs	r2, #32
 80022aa:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
	objects[10].height = 32;
 80022ae:	4b55      	ldr	r3, [pc, #340]	@ (8002404 <draw_map_1+0x360>)
 80022b0:	2220      	movs	r2, #32
 80022b2:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
	objects[10].frame = brick;
 80022b6:	4b53      	ldr	r3, [pc, #332]	@ (8002404 <draw_map_1+0x360>)
 80022b8:	4a54      	ldr	r2, [pc, #336]	@ (800240c <draw_map_1+0x368>)
 80022ba:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	objects[10].collidable = true;
 80022be:	4b51      	ldr	r3, [pc, #324]	@ (8002404 <draw_map_1+0x360>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
	objects[10].redraw = false;
 80022c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002404 <draw_map_1+0x360>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9

	objects[11].x = 128;
 80022ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002404 <draw_map_1+0x360>)
 80022d0:	2280      	movs	r2, #128	@ 0x80
 80022d2:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
	objects[11].prev_x = 128;
 80022d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002404 <draw_map_1+0x360>)
 80022d8:	2280      	movs	r2, #128	@ 0x80
 80022da:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	objects[11].y = 100;
 80022de:	4b49      	ldr	r3, [pc, #292]	@ (8002404 <draw_map_1+0x360>)
 80022e0:	2264      	movs	r2, #100	@ 0x64
 80022e2:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
	objects[11].prev_y = 160;
 80022e6:	4b47      	ldr	r3, [pc, #284]	@ (8002404 <draw_map_1+0x360>)
 80022e8:	22a0      	movs	r2, #160	@ 0xa0
 80022ea:	f8a3 20e2 	strh.w	r2, [r3, #226]	@ 0xe2
	objects[11].width = 32;
 80022ee:	4b45      	ldr	r3, [pc, #276]	@ (8002404 <draw_map_1+0x360>)
 80022f0:	2220      	movs	r2, #32
 80022f2:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
	objects[11].height = 32;
 80022f6:	4b43      	ldr	r3, [pc, #268]	@ (8002404 <draw_map_1+0x360>)
 80022f8:	2220      	movs	r2, #32
 80022fa:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
	objects[11].frame = brick;
 80022fe:	4b41      	ldr	r3, [pc, #260]	@ (8002404 <draw_map_1+0x360>)
 8002300:	4a42      	ldr	r2, [pc, #264]	@ (800240c <draw_map_1+0x368>)
 8002302:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	objects[11].collidable = true;
 8002306:	4b3f      	ldr	r3, [pc, #252]	@ (8002404 <draw_map_1+0x360>)
 8002308:	2201      	movs	r2, #1
 800230a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	objects[11].redraw = false;
 800230e:	4b3d      	ldr	r3, [pc, #244]	@ (8002404 <draw_map_1+0x360>)
 8002310:	2200      	movs	r2, #0
 8002312:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed

	objects[12].x = 96;
 8002316:	4b3b      	ldr	r3, [pc, #236]	@ (8002404 <draw_map_1+0x360>)
 8002318:	2260      	movs	r2, #96	@ 0x60
 800231a:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
	objects[12].prev_x = 96;
 800231e:	4b39      	ldr	r3, [pc, #228]	@ (8002404 <draw_map_1+0x360>)
 8002320:	2260      	movs	r2, #96	@ 0x60
 8002322:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
	objects[12].y = 100;
 8002326:	4b37      	ldr	r3, [pc, #220]	@ (8002404 <draw_map_1+0x360>)
 8002328:	2264      	movs	r2, #100	@ 0x64
 800232a:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	objects[12].prev_y = 160;
 800232e:	4b35      	ldr	r3, [pc, #212]	@ (8002404 <draw_map_1+0x360>)
 8002330:	22a0      	movs	r2, #160	@ 0xa0
 8002332:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
	objects[12].width = 32;
 8002336:	4b33      	ldr	r3, [pc, #204]	@ (8002404 <draw_map_1+0x360>)
 8002338:	2220      	movs	r2, #32
 800233a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	objects[12].height = 32;
 800233e:	4b31      	ldr	r3, [pc, #196]	@ (8002404 <draw_map_1+0x360>)
 8002340:	2220      	movs	r2, #32
 8002342:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
	objects[12].frame = brick;
 8002346:	4b2f      	ldr	r3, [pc, #188]	@ (8002404 <draw_map_1+0x360>)
 8002348:	4a30      	ldr	r2, [pc, #192]	@ (800240c <draw_map_1+0x368>)
 800234a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	objects[12].collidable = true;
 800234e:	4b2d      	ldr	r3, [pc, #180]	@ (8002404 <draw_map_1+0x360>)
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
	objects[12].redraw = false;
 8002356:	4b2b      	ldr	r3, [pc, #172]	@ (8002404 <draw_map_1+0x360>)
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101

	objects[13].x = 10;
 800235e:	4b29      	ldr	r3, [pc, #164]	@ (8002404 <draw_map_1+0x360>)
 8002360:	220a      	movs	r2, #10
 8002362:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
	objects[13].prev_x = 10;
 8002366:	4b27      	ldr	r3, [pc, #156]	@ (8002404 <draw_map_1+0x360>)
 8002368:	220a      	movs	r2, #10
 800236a:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
	objects[13].y = 40;
 800236e:	4b25      	ldr	r3, [pc, #148]	@ (8002404 <draw_map_1+0x360>)
 8002370:	2228      	movs	r2, #40	@ 0x28
 8002372:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	objects[13].prev_y = 230;
 8002376:	4b23      	ldr	r3, [pc, #140]	@ (8002404 <draw_map_1+0x360>)
 8002378:	22e6      	movs	r2, #230	@ 0xe6
 800237a:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a
	objects[13].width = 64;
 800237e:	4b21      	ldr	r3, [pc, #132]	@ (8002404 <draw_map_1+0x360>)
 8002380:	2240      	movs	r2, #64	@ 0x40
 8002382:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
	objects[13].height = 48;
 8002386:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <draw_map_1+0x360>)
 8002388:	2230      	movs	r2, #48	@ 0x30
 800238a:	f8a3 210e 	strh.w	r2, [r3, #270]	@ 0x10e
	objects[13].frame = cloud;
 800238e:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <draw_map_1+0x360>)
 8002390:	4a1f      	ldr	r2, [pc, #124]	@ (8002410 <draw_map_1+0x36c>)
 8002392:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	objects[13].collidable = false;
 8002396:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <draw_map_1+0x360>)
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
	objects[13].redraw = false;
 800239e:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <draw_map_1+0x360>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	objects[14].x = 256;
 80023a6:	4b17      	ldr	r3, [pc, #92]	@ (8002404 <draw_map_1+0x360>)
 80023a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023ac:	f8a3 2118 	strh.w	r2, [r3, #280]	@ 0x118
	objects[14].prev_x = 256;
 80023b0:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <draw_map_1+0x360>)
 80023b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023b6:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
	objects[14].y = 144;
 80023ba:	4b12      	ldr	r3, [pc, #72]	@ (8002404 <draw_map_1+0x360>)
 80023bc:	2290      	movs	r2, #144	@ 0x90
 80023be:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
	objects[14].prev_y = 144;
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <draw_map_1+0x360>)
 80023c4:	2290      	movs	r2, #144	@ 0x90
 80023c6:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e
	objects[14].width = 64;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002404 <draw_map_1+0x360>)
 80023cc:	2240      	movs	r2, #64	@ 0x40
 80023ce:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
	objects[14].height = 64;
 80023d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <draw_map_1+0x360>)
 80023d4:	2240      	movs	r2, #64	@ 0x40
 80023d6:	f8a3 2122 	strh.w	r2, [r3, #290]	@ 0x122
	objects[14].frame = pipe;
 80023da:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <draw_map_1+0x360>)
 80023dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002414 <draw_map_1+0x370>)
 80023de:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
	objects[14].collidable = true;
 80023e2:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <draw_map_1+0x360>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
	objects[14].redraw = false;
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <draw_map_1+0x360>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129


	uint16_t pipe_final[64*64];

	cleanMarioBackground(pipe, pipe_final, 64, 64, 64*64);
 80023f2:	f107 0108 	add.w	r1, r7, #8
 80023f6:	3908      	subs	r1, #8
 80023f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2340      	movs	r3, #64	@ 0x40
 8002400:	2240      	movs	r2, #64	@ 0x40
 8002402:	e009      	b.n	8002418 <draw_map_1+0x374>
 8002404:	200002d8 	.word	0x200002d8
 8002408:	0800e5e0 	.word	0x0800e5e0
 800240c:	0800dde0 	.word	0x0800dde0
 8002410:	0800ede0 	.word	0x0800ede0
 8002414:	0801a1e0 	.word	0x0801a1e0
 8002418:	483d      	ldr	r0, [pc, #244]	@ (8002510 <draw_map_1+0x46c>)
 800241a:	f7ff fe01 	bl	8002020 <cleanMarioBackground>

	for (int i = 10; i < 14; i++)
 800241e:	230a      	movs	r3, #10
 8002420:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e049      	b.n	80024bc <draw_map_1+0x418>
		ILI9341_DrawImage(objects[i].x, objects[i].y, objects[i].width, objects[i].height, objects[i].frame);
 8002428:	493a      	ldr	r1, [pc, #232]	@ (8002514 <draw_map_1+0x470>)
 800242a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243e:	b298      	uxth	r0, r3
 8002440:	4934      	ldr	r1, [pc, #208]	@ (8002514 <draw_map_1+0x470>)
 8002442:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	3302      	adds	r3, #2
 8002454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002458:	b299      	uxth	r1, r3
 800245a:	4c2e      	ldr	r4, [pc, #184]	@ (8002514 <draw_map_1+0x470>)
 800245c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4423      	add	r3, r4
 800246c:	3308      	adds	r3, #8
 800246e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002472:	b29c      	uxth	r4, r3
 8002474:	4d27      	ldr	r5, [pc, #156]	@ (8002514 <draw_map_1+0x470>)
 8002476:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	442b      	add	r3, r5
 8002486:	330a      	adds	r3, #10
 8002488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248c:	b29d      	uxth	r5, r3
 800248e:	4e21      	ldr	r6, [pc, #132]	@ (8002514 <draw_map_1+0x470>)
 8002490:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4433      	add	r3, r6
 80024a0:	330c      	adds	r3, #12
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	462b      	mov	r3, r5
 80024a8:	4622      	mov	r2, r4
 80024aa:	f7fe ff47 	bl	800133c <ILI9341_DrawImage>
	for (int i = 10; i < 14; i++)
 80024ae:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b0d      	cmp	r3, #13
 80024c4:	ddb0      	ble.n	8002428 <draw_map_1+0x384>

	ILI9341_DrawImage(objects[14].x, objects[14].y, objects[14].width, objects[14].height, pipe_final);
 80024c6:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <draw_map_1+0x470>)
 80024c8:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 80024cc:	b298      	uxth	r0, r3
 80024ce:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <draw_map_1+0x470>)
 80024d0:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 80024d4:	b299      	uxth	r1, r3
 80024d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <draw_map_1+0x470>)
 80024d8:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	@ 0x120
 80024dc:	b29a      	uxth	r2, r3
 80024de:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <draw_map_1+0x470>)
 80024e0:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	@ 0x122
 80024e4:	b29c      	uxth	r4, r3
 80024e6:	f107 0308 	add.w	r3, r7, #8
 80024ea:	3b08      	subs	r3, #8
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	4623      	mov	r3, r4
 80024f0:	f7fe ff24 	bl	800133c <ILI9341_DrawImage>
	num_objects = 15;
 80024f4:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <draw_map_1+0x474>)
 80024f6:	220f      	movs	r2, #15
 80024f8:	701a      	strb	r2, [r3, #0]
//		HAL_StatusTypeDef spi_status = HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &test_data, &received, 1, 1000);
//		snprintf(debug_msg, sizeof(debug_msg), "SPI Test: %d, RX: 0x%02X", spi_status, received);
//		ILI9341_WriteString(40, 80, debug_msg, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);

	// test
	HAL_Delay(2000); // Give time to read debug info
 80024fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80024fe:	f001 fcf5 	bl	8003eec <HAL_Delay>

}
 8002502:	bf00      	nop
 8002504:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800250e:	bf00      	nop
 8002510:	0801a1e0 	.word	0x0801a1e0
 8002514:	200002d8 	.word	0x200002d8
 8002518:	20002ce8 	.word	0x20002ce8

0800251c <draw_bowser>:


void draw_bowser() {
 800251c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251e:	b095      	sub	sp, #84	@ 0x54
 8002520:	af06      	add	r7, sp, #24
	static uint32_t mario_last_hit = 0;
	static uint32_t flame_timer = 0;
	static struct Object fireballs[10];
	static fireball_final[48 * 16];
	static flames = 5;
	if (bowser_last_moved == 0) {
 8002522:	4b98      	ldr	r3, [pc, #608]	@ (8002784 <draw_bowser+0x268>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d110      	bne.n	800254c <draw_bowser+0x30>
		bowser_last_moved = HAL_GetTick();
 800252a:	f001 fcd3 	bl	8003ed4 <HAL_GetTick>
 800252e:	4603      	mov	r3, r0
 8002530:	4a94      	ldr	r2, [pc, #592]	@ (8002784 <draw_bowser+0x268>)
 8002532:	6013      	str	r3, [r2, #0]
		bowser_last_updated = bowser_last_moved;
 8002534:	4b93      	ldr	r3, [pc, #588]	@ (8002784 <draw_bowser+0x268>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a93      	ldr	r2, [pc, #588]	@ (8002788 <draw_bowser+0x26c>)
 800253a:	6013      	str	r3, [r2, #0]
		flame_timer = bowser_last_moved;
 800253c:	4b91      	ldr	r3, [pc, #580]	@ (8002784 <draw_bowser+0x268>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a92      	ldr	r2, [pc, #584]	@ (800278c <draw_bowser+0x270>)
 8002542:	6013      	str	r3, [r2, #0]
		mario_last_hit = flame_timer;
 8002544:	4b91      	ldr	r3, [pc, #580]	@ (800278c <draw_bowser+0x270>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a91      	ldr	r2, [pc, #580]	@ (8002790 <draw_bowser+0x274>)
 800254a:	6013      	str	r3, [r2, #0]
	}
	static uint8_t frame_num = 0;
	static uint16_t* frames[4] = { bowser_1, bowser_2, bowser_3, bowser_4 };
	if (frame_num > 3)
 800254c:	4b91      	ldr	r3, [pc, #580]	@ (8002794 <draw_bowser+0x278>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d902      	bls.n	800255a <draw_bowser+0x3e>
		frame_num = 0;
 8002554:	4b8f      	ldr	r3, [pc, #572]	@ (8002794 <draw_bowser+0x278>)
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
	uint16_t* bowser_frame =  frames[frame_num];
 800255a:	4b8e      	ldr	r3, [pc, #568]	@ (8002794 <draw_bowser+0x278>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	4b8d      	ldr	r3, [pc, #564]	@ (8002798 <draw_bowser+0x27c>)
 8002562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002566:	633b      	str	r3, [r7, #48]	@ 0x30

	uint32_t now = HAL_GetTick();
 8002568:	f001 fcb4 	bl	8003ed4 <HAL_GetTick>
 800256c:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (now - bowser_last_updated > 100) {
 800256e:	4b86      	ldr	r3, [pc, #536]	@ (8002788 <draw_bowser+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	@ 0x64
 8002578:	f240 80d7 	bls.w	800272a <draw_bowser+0x20e>
		if (flames != 0) {
 800257c:	4b87      	ldr	r3, [pc, #540]	@ (800279c <draw_bowser+0x280>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 808d 	beq.w	80026a0 <draw_bowser+0x184>
			if (now - flame_timer > 1700) {
 8002586:	4b81      	ldr	r3, [pc, #516]	@ (800278c <draw_bowser+0x270>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8002592:	4293      	cmp	r3, r2
 8002594:	f240 80c6 	bls.w	8002724 <draw_bowser+0x208>
				fireballs[5 - flames].x = bowser.x;
 8002598:	4b80      	ldr	r3, [pc, #512]	@ (800279c <draw_bowser+0x280>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f1c3 0205 	rsb	r2, r3, #5
 80025a0:	4b7f      	ldr	r3, [pc, #508]	@ (80027a0 <draw_bowser+0x284>)
 80025a2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80025a6:	497f      	ldr	r1, [pc, #508]	@ (80027a4 <draw_bowser+0x288>)
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	4602      	mov	r2, r0
 80025b4:	801a      	strh	r2, [r3, #0]
				fireballs[5 - flames].y = bowser.y + 35;
 80025b6:	4b7a      	ldr	r3, [pc, #488]	@ (80027a0 <draw_bowser+0x284>)
 80025b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3323      	adds	r3, #35	@ 0x23
 80025c0:	b299      	uxth	r1, r3
 80025c2:	4b76      	ldr	r3, [pc, #472]	@ (800279c <draw_bowser+0x280>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f1c3 0205 	rsb	r2, r3, #5
 80025ca:	b208      	sxth	r0, r1
 80025cc:	4975      	ldr	r1, [pc, #468]	@ (80027a4 <draw_bowser+0x288>)
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3302      	adds	r3, #2
 80025da:	4602      	mov	r2, r0
 80025dc:	801a      	strh	r2, [r3, #0]
				fireballs[5 - flames].width = 48;
 80025de:	4b6f      	ldr	r3, [pc, #444]	@ (800279c <draw_bowser+0x280>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1c3 0205 	rsb	r2, r3, #5
 80025e6:	496f      	ldr	r1, [pc, #444]	@ (80027a4 <draw_bowser+0x288>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	3308      	adds	r3, #8
 80025f4:	2230      	movs	r2, #48	@ 0x30
 80025f6:	801a      	strh	r2, [r3, #0]
				fireballs[5 - flames].height = 16;
 80025f8:	4b68      	ldr	r3, [pc, #416]	@ (800279c <draw_bowser+0x280>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1c3 0205 	rsb	r2, r3, #5
 8002600:	4968      	ldr	r1, [pc, #416]	@ (80027a4 <draw_bowser+0x288>)
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	330a      	adds	r3, #10
 800260e:	2210      	movs	r2, #16
 8002610:	801a      	strh	r2, [r3, #0]
				fireballs[5 - flames].prev_x = bowser.x;
 8002612:	4b62      	ldr	r3, [pc, #392]	@ (800279c <draw_bowser+0x280>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f1c3 0205 	rsb	r2, r3, #5
 800261a:	4b61      	ldr	r3, [pc, #388]	@ (80027a0 <draw_bowser+0x284>)
 800261c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002620:	4960      	ldr	r1, [pc, #384]	@ (80027a4 <draw_bowser+0x288>)
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3304      	adds	r3, #4
 800262e:	4602      	mov	r2, r0
 8002630:	801a      	strh	r2, [r3, #0]
				fireballs[5 - flames].prev_y = bowser.y + 35;
 8002632:	4b5b      	ldr	r3, [pc, #364]	@ (80027a0 <draw_bowser+0x284>)
 8002634:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002638:	b29b      	uxth	r3, r3
 800263a:	3323      	adds	r3, #35	@ 0x23
 800263c:	b299      	uxth	r1, r3
 800263e:	4b57      	ldr	r3, [pc, #348]	@ (800279c <draw_bowser+0x280>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f1c3 0205 	rsb	r2, r3, #5
 8002646:	b208      	sxth	r0, r1
 8002648:	4956      	ldr	r1, [pc, #344]	@ (80027a4 <draw_bowser+0x288>)
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	3306      	adds	r3, #6
 8002656:	4602      	mov	r2, r0
 8002658:	801a      	strh	r2, [r3, #0]
				fireballs[5 - flames].frame = fireball_1;
 800265a:	4b50      	ldr	r3, [pc, #320]	@ (800279c <draw_bowser+0x280>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f1c3 0205 	rsb	r2, r3, #5
 8002662:	4950      	ldr	r1, [pc, #320]	@ (80027a4 <draw_bowser+0x288>)
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	330c      	adds	r3, #12
 8002670:	4a4d      	ldr	r2, [pc, #308]	@ (80027a8 <draw_bowser+0x28c>)
 8002672:	601a      	str	r2, [r3, #0]
				fireballs[5 - flames].redraw = false;
 8002674:	4b49      	ldr	r3, [pc, #292]	@ (800279c <draw_bowser+0x280>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f1c3 0205 	rsb	r2, r3, #5
 800267c:	4949      	ldr	r1, [pc, #292]	@ (80027a4 <draw_bowser+0x288>)
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	3311      	adds	r3, #17
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
				flames--;
 800268e:	4b43      	ldr	r3, [pc, #268]	@ (800279c <draw_bowser+0x280>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	3b01      	subs	r3, #1
 8002694:	4a41      	ldr	r2, [pc, #260]	@ (800279c <draw_bowser+0x280>)
 8002696:	6013      	str	r3, [r2, #0]
				flame_timer = now;
 8002698:	4a3c      	ldr	r2, [pc, #240]	@ (800278c <draw_bowser+0x270>)
 800269a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e041      	b.n	8002724 <draw_bowser+0x208>
			}

		}
		else if (prev_bowser.x >= bowser.x) {
 80026a0:	4b42      	ldr	r3, [pc, #264]	@ (80027ac <draw_bowser+0x290>)
 80026a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026a6:	4b3e      	ldr	r3, [pc, #248]	@ (80027a0 <draw_bowser+0x284>)
 80026a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	db1b      	blt.n	80026e8 <draw_bowser+0x1cc>
			prev_bowser = bowser;
 80026b0:	4a3e      	ldr	r2, [pc, #248]	@ (80027ac <draw_bowser+0x290>)
 80026b2:	4b3b      	ldr	r3, [pc, #236]	@ (80027a0 <draw_bowser+0x284>)
 80026b4:	4614      	mov	r4, r2
 80026b6:	461d      	mov	r5, r3
 80026b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80026c0:	e884 0003 	stmia.w	r4, {r0, r1}
			bowser.x -= 10;
 80026c4:	4b36      	ldr	r3, [pc, #216]	@ (80027a0 <draw_bowser+0x284>)
 80026c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b0a      	subs	r3, #10
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	4b33      	ldr	r3, [pc, #204]	@ (80027a0 <draw_bowser+0x284>)
 80026d4:	801a      	strh	r2, [r3, #0]
			if (bowser.x <= 0) {
 80026d6:	4b32      	ldr	r3, [pc, #200]	@ (80027a0 <draw_bowser+0x284>)
 80026d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	dc21      	bgt.n	8002724 <draw_bowser+0x208>
				bowser.x = 11;
 80026e0:	4b2f      	ldr	r3, [pc, #188]	@ (80027a0 <draw_bowser+0x284>)
 80026e2:	220b      	movs	r2, #11
 80026e4:	801a      	strh	r2, [r3, #0]
 80026e6:	e01d      	b.n	8002724 <draw_bowser+0x208>
			}
		} else {
			prev_bowser = bowser;
 80026e8:	4a30      	ldr	r2, [pc, #192]	@ (80027ac <draw_bowser+0x290>)
 80026ea:	4b2d      	ldr	r3, [pc, #180]	@ (80027a0 <draw_bowser+0x284>)
 80026ec:	4614      	mov	r4, r2
 80026ee:	461d      	mov	r5, r3
 80026f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80026f8:	e884 0003 	stmia.w	r4, {r0, r1}
			bowser.x += 10;
 80026fc:	4b28      	ldr	r3, [pc, #160]	@ (80027a0 <draw_bowser+0x284>)
 80026fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002702:	b29b      	uxth	r3, r3
 8002704:	330a      	adds	r3, #10
 8002706:	b29b      	uxth	r3, r3
 8002708:	b21a      	sxth	r2, r3
 800270a:	4b25      	ldr	r3, [pc, #148]	@ (80027a0 <draw_bowser+0x284>)
 800270c:	801a      	strh	r2, [r3, #0]
			if (bowser.x >= 190) {
 800270e:	4b24      	ldr	r3, [pc, #144]	@ (80027a0 <draw_bowser+0x284>)
 8002710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002714:	2bbd      	cmp	r3, #189	@ 0xbd
 8002716:	dd05      	ble.n	8002724 <draw_bowser+0x208>
				bowser.x = 180;
 8002718:	4b21      	ldr	r3, [pc, #132]	@ (80027a0 <draw_bowser+0x284>)
 800271a:	22b4      	movs	r2, #180	@ 0xb4
 800271c:	801a      	strh	r2, [r3, #0]
				flames = 5;
 800271e:	4b1f      	ldr	r3, [pc, #124]	@ (800279c <draw_bowser+0x280>)
 8002720:	2205      	movs	r2, #5
 8002722:	601a      	str	r2, [r3, #0]
			}
		}
		bowser_last_updated = now;
 8002724:	4a18      	ldr	r2, [pc, #96]	@ (8002788 <draw_bowser+0x26c>)
 8002726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002728:	6013      	str	r3, [r2, #0]
	}
	if (now - bowser_last_moved > 300) {
 800272a:	4b16      	ldr	r3, [pc, #88]	@ (8002784 <draw_bowser+0x268>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002736:	d908      	bls.n	800274a <draw_bowser+0x22e>
		frame_num++;
 8002738:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <draw_bowser+0x278>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	b2da      	uxtb	r2, r3
 8002740:	4b14      	ldr	r3, [pc, #80]	@ (8002794 <draw_bowser+0x278>)
 8002742:	701a      	strb	r2, [r3, #0]
		bowser_last_moved = now;
 8002744:	4a0f      	ldr	r2, [pc, #60]	@ (8002784 <draw_bowser+0x268>)
 8002746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002748:	6013      	str	r3, [r2, #0]
	}
	static uint16_t* frame = fireball_2;
	if (10 - flames) {
 800274a:	4b14      	ldr	r3, [pc, #80]	@ (800279c <draw_bowser+0x280>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b0a      	cmp	r3, #10
 8002750:	d013      	beq.n	800277a <draw_bowser+0x25e>
		frame = (frame == fireball_1) ? fireball_2 : fireball_1;
 8002752:	4b17      	ldr	r3, [pc, #92]	@ (80027b0 <draw_bowser+0x294>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a14      	ldr	r2, [pc, #80]	@ (80027a8 <draw_bowser+0x28c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d101      	bne.n	8002760 <draw_bowser+0x244>
 800275c:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <draw_bowser+0x298>)
 800275e:	e000      	b.n	8002762 <draw_bowser+0x246>
 8002760:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <draw_bowser+0x28c>)
 8002762:	4a13      	ldr	r2, [pc, #76]	@ (80027b0 <draw_bowser+0x294>)
 8002764:	6013      	str	r3, [r2, #0]
		cleanMarioBackground(frame, fireball_final, 48, 16, 48 * 16);
 8002766:	4b12      	ldr	r3, [pc, #72]	@ (80027b0 <draw_bowser+0x294>)
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	2310      	movs	r3, #16
 8002772:	2230      	movs	r2, #48	@ 0x30
 8002774:	4910      	ldr	r1, [pc, #64]	@ (80027b8 <draw_bowser+0x29c>)
 8002776:	f7ff fc53 	bl	8002020 <cleanMarioBackground>
	}
	for (uint8_t i = 0; i < 5 - flames; i++) {
 800277a:	2300      	movs	r3, #0
 800277c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002780:	e113      	b.n	80029aa <draw_bowser+0x48e>
 8002782:	bf00      	nop
 8002784:	20005398 	.word	0x20005398
 8002788:	2000539c 	.word	0x2000539c
 800278c:	200053a0 	.word	0x200053a0
 8002790:	200053a4 	.word	0x200053a4
 8002794:	200053a8 	.word	0x200053a8
 8002798:	200000a0 	.word	0x200000a0
 800279c:	200000b0 	.word	0x200000b0
 80027a0:	2000004c 	.word	0x2000004c
 80027a4:	200053ac 	.word	0x200053ac
 80027a8:	080195e0 	.word	0x080195e0
 80027ac:	20000034 	.word	0x20000034
 80027b0:	200000b4 	.word	0x200000b4
 80027b4:	08019be0 	.word	0x08019be0
 80027b8:	20005474 	.word	0x20005474
		// update fireball
		// update its frame
		if (collision_detection(mario, fireballs[i])) {
 80027bc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80027c0:	4ea0      	ldr	r6, [pc, #640]	@ (8002a44 <draw_bowser+0x528>)
 80027c2:	49a1      	ldr	r1, [pc, #644]	@ (8002a48 <draw_bowser+0x52c>)
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	ac01      	add	r4, sp, #4
 80027d0:	461d      	mov	r5, r3
 80027d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027d6:	682b      	ldr	r3, [r5, #0]
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	6933      	ldr	r3, [r6, #16]
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80027e2:	f7fe ff65 	bl	80016b0 <collision_detection>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d012      	beq.n	8002812 <draw_bowser+0x2f6>
			if (now - mario_last_hit > 1000) {
 80027ec:	4b97      	ldr	r3, [pc, #604]	@ (8002a4c <draw_bowser+0x530>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027f8:	d90b      	bls.n	8002812 <draw_bowser+0x2f6>
				mario_lives--;
 80027fa:	4b95      	ldr	r3, [pc, #596]	@ (8002a50 <draw_bowser+0x534>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	3b01      	subs	r3, #1
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4b93      	ldr	r3, [pc, #588]	@ (8002a50 <draw_bowser+0x534>)
 8002804:	701a      	strb	r2, [r3, #0]
				mario.redraw = true;
 8002806:	4b8f      	ldr	r3, [pc, #572]	@ (8002a44 <draw_bowser+0x528>)
 8002808:	2201      	movs	r2, #1
 800280a:	741a      	strb	r2, [r3, #16]
				mario_last_hit = now;
 800280c:	4a8f      	ldr	r2, [pc, #572]	@ (8002a4c <draw_bowser+0x530>)
 800280e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002810:	6013      	str	r3, [r2, #0]
			}
		}
		if (fireballs[i].x > 0 || fireballs[i].prev_x >= 0) {
 8002812:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002816:	498c      	ldr	r1, [pc, #560]	@ (8002a48 <draw_bowser+0x52c>)
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002826:	2b00      	cmp	r3, #0
 8002828:	dc0d      	bgt.n	8002846 <draw_bowser+0x32a>
 800282a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800282e:	4986      	ldr	r1, [pc, #536]	@ (8002a48 <draw_bowser+0x52c>)
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	3304      	adds	r3, #4
 800283c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f2c0 80ad 	blt.w	80029a0 <draw_bowser+0x484>
			fireballs[i].prev_x = fireballs[i].x;
 8002846:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800284a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800284e:	487e      	ldr	r0, [pc, #504]	@ (8002a48 <draw_bowser+0x52c>)
 8002850:	460b      	mov	r3, r1
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4403      	add	r3, r0
 800285a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800285e:	497a      	ldr	r1, [pc, #488]	@ (8002a48 <draw_bowser+0x52c>)
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	3304      	adds	r3, #4
 800286c:	4602      	mov	r2, r0
 800286e:	801a      	strh	r2, [r3, #0]
			fireballs[i].prev_y = fireballs[i].y;
 8002870:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8002874:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002878:	4873      	ldr	r0, [pc, #460]	@ (8002a48 <draw_bowser+0x52c>)
 800287a:	460b      	mov	r3, r1
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4403      	add	r3, r0
 8002884:	3302      	adds	r3, #2
 8002886:	f9b3 0000 	ldrsh.w	r0, [r3]
 800288a:	496f      	ldr	r1, [pc, #444]	@ (8002a48 <draw_bowser+0x52c>)
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	3306      	adds	r3, #6
 8002898:	4602      	mov	r2, r0
 800289a:	801a      	strh	r2, [r3, #0]
			fireballs[i].x -= 20;
 800289c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80028a0:	4969      	ldr	r1, [pc, #420]	@ (8002a48 <draw_bowser+0x52c>)
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b14      	subs	r3, #20
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80028ba:	b218      	sxth	r0, r3
 80028bc:	4962      	ldr	r1, [pc, #392]	@ (8002a48 <draw_bowser+0x52c>)
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	4602      	mov	r2, r0
 80028ca:	801a      	strh	r2, [r3, #0]

			ILI9341_FillRectangle(fireballs[i].prev_x, fireballs[i].prev_y, fireballs[i].width, fireballs[i].height, ILI9341_CYAN);
 80028cc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80028d0:	495d      	ldr	r1, [pc, #372]	@ (8002a48 <draw_bowser+0x52c>)
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3304      	adds	r3, #4
 80028de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e2:	b298      	uxth	r0, r3
 80028e4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80028e8:	4957      	ldr	r1, [pc, #348]	@ (8002a48 <draw_bowser+0x52c>)
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	3306      	adds	r3, #6
 80028f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028fa:	b299      	uxth	r1, r3
 80028fc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002900:	4c51      	ldr	r4, [pc, #324]	@ (8002a48 <draw_bowser+0x52c>)
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4423      	add	r3, r4
 800290c:	3308      	adds	r3, #8
 800290e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002912:	b29c      	uxth	r4, r3
 8002914:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002918:	4d4b      	ldr	r5, [pc, #300]	@ (8002a48 <draw_bowser+0x52c>)
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	442b      	add	r3, r5
 8002924:	330a      	adds	r3, #10
 8002926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292a:	b29b      	uxth	r3, r3
 800292c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002930:	9200      	str	r2, [sp, #0]
 8002932:	4622      	mov	r2, r4
 8002934:	f7fe fc82 	bl	800123c <ILI9341_FillRectangle>
			ILI9341_DrawImage(fireballs[i].x, fireballs[i].y, fireballs[i].width, fireballs[i].height, fireball_final);
 8002938:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800293c:	4942      	ldr	r1, [pc, #264]	@ (8002a48 <draw_bowser+0x52c>)
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800294c:	b298      	uxth	r0, r3
 800294e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002952:	493d      	ldr	r1, [pc, #244]	@ (8002a48 <draw_bowser+0x52c>)
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	3302      	adds	r3, #2
 8002960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002964:	b299      	uxth	r1, r3
 8002966:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800296a:	4c37      	ldr	r4, [pc, #220]	@ (8002a48 <draw_bowser+0x52c>)
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4423      	add	r3, r4
 8002976:	3308      	adds	r3, #8
 8002978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297c:	b29c      	uxth	r4, r3
 800297e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002982:	4d31      	ldr	r5, [pc, #196]	@ (8002a48 <draw_bowser+0x52c>)
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	442b      	add	r3, r5
 800298e:	330a      	adds	r3, #10
 8002990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002994:	b29b      	uxth	r3, r3
 8002996:	4a2f      	ldr	r2, [pc, #188]	@ (8002a54 <draw_bowser+0x538>)
 8002998:	9200      	str	r2, [sp, #0]
 800299a:	4622      	mov	r2, r4
 800299c:	f7fe fcce 	bl	800133c <ILI9341_DrawImage>
	for (uint8_t i = 0; i < 5 - flames; i++) {
 80029a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029a4:	3301      	adds	r3, #1
 80029a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80029aa:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80029ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002a58 <draw_bowser+0x53c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f1c3 0305 	rsb	r3, r3, #5
 80029b6:	429a      	cmp	r2, r3
 80029b8:	f6ff af00 	blt.w	80027bc <draw_bowser+0x2a0>
		}
	}


	cleanMarioBackground(bowser_frame, bowser_final, 64, 64, 64*64);
 80029bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2340      	movs	r3, #64	@ 0x40
 80029c4:	2240      	movs	r2, #64	@ 0x40
 80029c6:	4925      	ldr	r1, [pc, #148]	@ (8002a5c <draw_bowser+0x540>)
 80029c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029ca:	f7ff fb29 	bl	8002020 <cleanMarioBackground>
	if (bowser.x > prev_bowser.x) {
 80029ce:	4b24      	ldr	r3, [pc, #144]	@ (8002a60 <draw_bowser+0x544>)
 80029d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029d4:	4b23      	ldr	r3, [pc, #140]	@ (8002a64 <draw_bowser+0x548>)
 80029d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029da:	429a      	cmp	r2, r3
 80029dc:	dd44      	ble.n	8002a68 <draw_bowser+0x54c>
		ILI9341_FillRectangle(prev_bowser.x, prev_bowser.y, bowser.x - prev_bowser.x, prev_bowser.height, ILI9341_CYAN);
 80029de:	4b21      	ldr	r3, [pc, #132]	@ (8002a64 <draw_bowser+0x548>)
 80029e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e4:	b298      	uxth	r0, r3
 80029e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a64 <draw_bowser+0x548>)
 80029e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029ec:	b299      	uxth	r1, r3
 80029ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002a60 <draw_bowser+0x544>)
 80029f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a64 <draw_bowser+0x548>)
 80029f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	4b18      	ldr	r3, [pc, #96]	@ (8002a64 <draw_bowser+0x548>)
 8002a04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f240 74ff 	movw	r4, #2047	@ 0x7ff
 8002a0e:	9400      	str	r4, [sp, #0]
 8002a10:	f7fe fc14 	bl	800123c <ILI9341_FillRectangle>
		turn_enemy(bowser.width, bowser.height, bowser_final, bowser);
 8002a14:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <draw_bowser+0x544>)
 8002a16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a1a:	fa5f fc83 	uxtb.w	ip, r3
 8002a1e:	4b10      	ldr	r3, [pc, #64]	@ (8002a60 <draw_bowser+0x544>)
 8002a20:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002a24:	fa5f fe83 	uxtb.w	lr, r3
 8002a28:	4e0d      	ldr	r6, [pc, #52]	@ (8002a60 <draw_bowser+0x544>)
 8002a2a:	466d      	mov	r5, sp
 8002a2c:	1d34      	adds	r4, r6, #4
 8002a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	602b      	str	r3, [r5, #0]
 8002a36:	6833      	ldr	r3, [r6, #0]
 8002a38:	4a08      	ldr	r2, [pc, #32]	@ (8002a5c <draw_bowser+0x540>)
 8002a3a:	4671      	mov	r1, lr
 8002a3c:	4660      	mov	r0, ip
 8002a3e:	f7fe fde7 	bl	8001610 <turn_enemy>
 8002a42:	e047      	b.n	8002ad4 <draw_bowser+0x5b8>
 8002a44:	20000020 	.word	0x20000020
 8002a48:	200053ac 	.word	0x200053ac
 8002a4c:	200053a4 	.word	0x200053a4
 8002a50:	20000008 	.word	0x20000008
 8002a54:	20005474 	.word	0x20005474
 8002a58:	200000b0 	.word	0x200000b0
 8002a5c:	20000ce8 	.word	0x20000ce8
 8002a60:	2000004c 	.word	0x2000004c
 8002a64:	20000034 	.word	0x20000034
	} else if (prev_bowser.x > bowser.x) {
 8002a68:	4b63      	ldr	r3, [pc, #396]	@ (8002bf8 <draw_bowser+0x6dc>)
 8002a6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a6e:	4b63      	ldr	r3, [pc, #396]	@ (8002bfc <draw_bowser+0x6e0>)
 8002a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	dd2d      	ble.n	8002ad4 <draw_bowser+0x5b8>
		ILI9341_FillRectangle(bowser.x + bowser.width, prev_bowser.y, prev_bowser.x + prev_bowser.width - (bowser.x + bowser.width), prev_bowser.height, ILI9341_CYAN);
 8002a78:	4b60      	ldr	r3, [pc, #384]	@ (8002bfc <draw_bowser+0x6e0>)
 8002a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	4b5e      	ldr	r3, [pc, #376]	@ (8002bfc <draw_bowser+0x6e0>)
 8002a82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	b298      	uxth	r0, r3
 8002a8c:	4b5a      	ldr	r3, [pc, #360]	@ (8002bf8 <draw_bowser+0x6dc>)
 8002a8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a92:	b29c      	uxth	r4, r3
 8002a94:	4b58      	ldr	r3, [pc, #352]	@ (8002bf8 <draw_bowser+0x6dc>)
 8002a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	4b56      	ldr	r3, [pc, #344]	@ (8002bf8 <draw_bowser+0x6dc>)
 8002a9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	4b54      	ldr	r3, [pc, #336]	@ (8002bfc <draw_bowser+0x6e0>)
 8002aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aae:	b299      	uxth	r1, r3
 8002ab0:	4b52      	ldr	r3, [pc, #328]	@ (8002bfc <draw_bowser+0x6e0>)
 8002ab2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	440b      	add	r3, r1
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf8 <draw_bowser+0x6dc>)
 8002ac2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8002acc:	9100      	str	r1, [sp, #0]
 8002ace:	4621      	mov	r1, r4
 8002ad0:	f7fe fbb4 	bl	800123c <ILI9341_FillRectangle>
	}


	static uint8_t bowser_health = 0;
	struct Character goomba_char = {goomba.x, goomba.y, goomba.width, goomba.height};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
 8002ae4:	4b46      	ldr	r3, [pc, #280]	@ (8002c00 <draw_bowser+0x6e4>)
 8002ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aea:	82bb      	strh	r3, [r7, #20]
 8002aec:	4b44      	ldr	r3, [pc, #272]	@ (8002c00 <draw_bowser+0x6e4>)
 8002aee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002af2:	82fb      	strh	r3, [r7, #22]
 8002af4:	4b42      	ldr	r3, [pc, #264]	@ (8002c00 <draw_bowser+0x6e4>)
 8002af6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002afa:	833b      	strh	r3, [r7, #24]
 8002afc:	4b40      	ldr	r3, [pc, #256]	@ (8002c00 <draw_bowser+0x6e4>)
 8002afe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002b02:	837b      	strh	r3, [r7, #26]
	struct Object health_char = {198, 8, 0, 0, 2 * bowser.health + 4, 14};
 8002b04:	463b      	mov	r3, r7
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	609a      	str	r2, [r3, #8]
 8002b0e:	60da      	str	r2, [r3, #12]
 8002b10:	611a      	str	r2, [r3, #16]
 8002b12:	23c6      	movs	r3, #198	@ 0xc6
 8002b14:	803b      	strh	r3, [r7, #0]
 8002b16:	2308      	movs	r3, #8
 8002b18:	807b      	strh	r3, [r7, #2]
 8002b1a:	4b38      	ldr	r3, [pc, #224]	@ (8002bfc <draw_bowser+0x6e0>)
 8002b1c:	7ddb      	ldrb	r3, [r3, #23]
 8002b1e:	3302      	adds	r3, #2
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	b21b      	sxth	r3, r3
 8002b28:	813b      	strh	r3, [r7, #8]
 8002b2a:	230e      	movs	r3, #14
 8002b2c:	817b      	strh	r3, [r7, #10]
	static bool prev_collision = false;
	bool current_collision = collision_detection(goomba_char, health_char);
 8002b2e:	ad01      	add	r5, sp, #4
 8002b30:	463c      	mov	r4, r7
 8002b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	602b      	str	r3, [r5, #0]
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b44:	f7fe fdb4 	bl	80016b0 <collision_detection>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if (bowser_health != bowser.health || prev_collision || current_collision) {
 8002b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bfc <draw_bowser+0x6e0>)
 8002b50:	7dda      	ldrb	r2, [r3, #23]
 8002b52:	4b2c      	ldr	r3, [pc, #176]	@ (8002c04 <draw_bowser+0x6e8>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d107      	bne.n	8002b6a <draw_bowser+0x64e>
 8002b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c08 <draw_bowser+0x6ec>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d103      	bne.n	8002b6a <draw_bowser+0x64e>
 8002b62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d02e      	beq.n	8002bc8 <draw_bowser+0x6ac>
		// bowser health
		ILI9341_FillRectangle(198, 8, 2 * bowser.health + 4, 14, ILI9341_CYAN);
 8002b6a:	4b24      	ldr	r3, [pc, #144]	@ (8002bfc <draw_bowser+0x6e0>)
 8002b6c:	7ddb      	ldrb	r3, [r3, #23]
 8002b6e:	3302      	adds	r3, #2
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	230e      	movs	r3, #14
 8002b7e:	2108      	movs	r1, #8
 8002b80:	20c6      	movs	r0, #198	@ 0xc6
 8002b82:	f7fe fb5b 	bl	800123c <ILI9341_FillRectangle>
		ILI9341_FillRectangle(198, 8, 2 * bowser.health + 4, 14, ILI9341_BLACK);
 8002b86:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <draw_bowser+0x6e0>)
 8002b88:	7ddb      	ldrb	r3, [r3, #23]
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	2300      	movs	r3, #0
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	230e      	movs	r3, #14
 8002b98:	2108      	movs	r1, #8
 8002b9a:	20c6      	movs	r0, #198	@ 0xc6
 8002b9c:	f7fe fb4e 	bl	800123c <ILI9341_FillRectangle>
		ILI9341_FillRectangle(200, 10, 2 * bowser.health, 10, ILI9341_RED);
 8002ba0:	4b16      	ldr	r3, [pc, #88]	@ (8002bfc <draw_bowser+0x6e0>)
 8002ba2:	7ddb      	ldrb	r3, [r3, #23]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	230a      	movs	r3, #10
 8002bb0:	210a      	movs	r1, #10
 8002bb2:	20c8      	movs	r0, #200	@ 0xc8
 8002bb4:	f7fe fb42 	bl	800123c <ILI9341_FillRectangle>
		bowser_health = bowser.health;
 8002bb8:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <draw_bowser+0x6e0>)
 8002bba:	7dda      	ldrb	r2, [r3, #23]
 8002bbc:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <draw_bowser+0x6e8>)
 8002bbe:	701a      	strb	r2, [r3, #0]
		prev_collision = current_collision;
 8002bc0:	4a11      	ldr	r2, [pc, #68]	@ (8002c08 <draw_bowser+0x6ec>)
 8002bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002bc6:	7013      	strb	r3, [r2, #0]
	}

	ILI9341_DrawImage(bowser.x, bowser.y, bowser.width, bowser.height, bowser_final);
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bfc <draw_bowser+0x6e0>)
 8002bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bce:	b298      	uxth	r0, r3
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <draw_bowser+0x6e0>)
 8002bd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bd6:	b299      	uxth	r1, r3
 8002bd8:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <draw_bowser+0x6e0>)
 8002bda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <draw_bowser+0x6e0>)
 8002be2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	4c08      	ldr	r4, [pc, #32]	@ (8002c0c <draw_bowser+0x6f0>)
 8002bea:	9400      	str	r4, [sp, #0]
 8002bec:	f7fe fba6 	bl	800133c <ILI9341_DrawImage>
}
 8002bf0:	bf00      	nop
 8002bf2:	373c      	adds	r7, #60	@ 0x3c
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf8:	20000034 	.word	0x20000034
 8002bfc:	2000004c 	.word	0x2000004c
 8002c00:	2000007c 	.word	0x2000007c
 8002c04:	20006074 	.word	0x20006074
 8002c08:	20006075 	.word	0x20006075
 8002c0c:	20000ce8 	.word	0x20000ce8

08002c10 <draw_goomba>:

void draw_goomba() {
 8002c10:	b5b0      	push	{r4, r5, r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af02      	add	r7, sp, #8

	static goomba_final[32 * 32];
	static uint16_t* frame = goomba_2;
	static bool jump = false;
	static int16_t velocity = -43;
	frame = (frame == goomba_1) ? goomba_2: goomba_1;
 8002c16:	4b6f      	ldr	r3, [pc, #444]	@ (8002dd4 <draw_goomba+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a6f      	ldr	r2, [pc, #444]	@ (8002dd8 <draw_goomba+0x1c8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d101      	bne.n	8002c24 <draw_goomba+0x14>
 8002c20:	4b6e      	ldr	r3, [pc, #440]	@ (8002ddc <draw_goomba+0x1cc>)
 8002c22:	e000      	b.n	8002c26 <draw_goomba+0x16>
 8002c24:	4b6c      	ldr	r3, [pc, #432]	@ (8002dd8 <draw_goomba+0x1c8>)
 8002c26:	4a6b      	ldr	r2, [pc, #428]	@ (8002dd4 <draw_goomba+0x1c4>)
 8002c28:	6013      	str	r3, [r2, #0]

	if (goomba.x == 272 && goomba.y == 112) {
 8002c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002de0 <draw_goomba+0x1d0>)
 8002c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c30:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8002c34:	d10b      	bne.n	8002c4e <draw_goomba+0x3e>
 8002c36:	4b6a      	ldr	r3, [pc, #424]	@ (8002de0 <draw_goomba+0x1d0>)
 8002c38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c3c:	2b70      	cmp	r3, #112	@ 0x70
 8002c3e:	d106      	bne.n	8002c4e <draw_goomba+0x3e>
		jump = true;
 8002c40:	4b68      	ldr	r3, [pc, #416]	@ (8002de4 <draw_goomba+0x1d4>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
		velocity = -43;
 8002c46:	4b68      	ldr	r3, [pc, #416]	@ (8002de8 <draw_goomba+0x1d8>)
 8002c48:	f64f 72d5 	movw	r2, #65493	@ 0xffd5
 8002c4c:	801a      	strh	r2, [r3, #0]
	}

	if (jump) {
 8002c4e:	4b65      	ldr	r3, [pc, #404]	@ (8002de4 <draw_goomba+0x1d4>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d048      	beq.n	8002ce8 <draw_goomba+0xd8>
		prev_goomba = goomba;
 8002c56:	4a65      	ldr	r2, [pc, #404]	@ (8002dec <draw_goomba+0x1dc>)
 8002c58:	4b61      	ldr	r3, [pc, #388]	@ (8002de0 <draw_goomba+0x1d0>)
 8002c5a:	4614      	mov	r4, r2
 8002c5c:	461d      	mov	r5, r3
 8002c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c66:	e884 0003 	stmia.w	r4, {r0, r1}
		goomba.y += velocity;
 8002c6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002de0 <draw_goomba+0x1d0>)
 8002c6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	4b5d      	ldr	r3, [pc, #372]	@ (8002de8 <draw_goomba+0x1d8>)
 8002c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	b21a      	sxth	r2, r3
 8002c80:	4b57      	ldr	r3, [pc, #348]	@ (8002de0 <draw_goomba+0x1d0>)
 8002c82:	805a      	strh	r2, [r3, #2]
		velocity -= (velocity / 3 - 2);
 8002c84:	4b58      	ldr	r3, [pc, #352]	@ (8002de8 <draw_goomba+0x1d8>)
 8002c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	4b56      	ldr	r3, [pc, #344]	@ (8002de8 <draw_goomba+0x1d8>)
 8002c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c92:	4957      	ldr	r1, [pc, #348]	@ (8002df0 <draw_goomba+0x1e0>)
 8002c94:	fb81 0103 	smull	r0, r1, r1, r3
 8002c98:	17db      	asrs	r3, r3, #31
 8002c9a:	1acb      	subs	r3, r1, r3
 8002c9c:	b21b      	sxth	r3, r3
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	b21a      	sxth	r2, r3
 8002caa:	4b4f      	ldr	r3, [pc, #316]	@ (8002de8 <draw_goomba+0x1d8>)
 8002cac:	801a      	strh	r2, [r3, #0]
		goomba.x -= 7;
 8002cae:	4b4c      	ldr	r3, [pc, #304]	@ (8002de0 <draw_goomba+0x1d0>)
 8002cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b07      	subs	r3, #7
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b21a      	sxth	r2, r3
 8002cbc:	4b48      	ldr	r3, [pc, #288]	@ (8002de0 <draw_goomba+0x1d0>)
 8002cbe:	801a      	strh	r2, [r3, #0]
		if (velocity > 0 && goomba.y > 64) {
 8002cc0:	4b49      	ldr	r3, [pc, #292]	@ (8002de8 <draw_goomba+0x1d8>)
 8002cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	dd4d      	ble.n	8002d66 <draw_goomba+0x156>
 8002cca:	4b45      	ldr	r3, [pc, #276]	@ (8002de0 <draw_goomba+0x1d0>)
 8002ccc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cd0:	2b40      	cmp	r3, #64	@ 0x40
 8002cd2:	dd48      	ble.n	8002d66 <draw_goomba+0x156>
			jump = false;
 8002cd4:	4b43      	ldr	r3, [pc, #268]	@ (8002de4 <draw_goomba+0x1d4>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
			goomba.x = 160;
 8002cda:	4b41      	ldr	r3, [pc, #260]	@ (8002de0 <draw_goomba+0x1d0>)
 8002cdc:	22a0      	movs	r2, #160	@ 0xa0
 8002cde:	801a      	strh	r2, [r3, #0]
			goomba.y = 64;
 8002ce0:	4b3f      	ldr	r3, [pc, #252]	@ (8002de0 <draw_goomba+0x1d0>)
 8002ce2:	2240      	movs	r2, #64	@ 0x40
 8002ce4:	805a      	strh	r2, [r3, #2]
 8002ce6:	e03e      	b.n	8002d66 <draw_goomba+0x156>
		}
	}
	else if (prev_goomba.x >= goomba.x) {
 8002ce8:	4b40      	ldr	r3, [pc, #256]	@ (8002dec <draw_goomba+0x1dc>)
 8002cea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002cee:	4b3c      	ldr	r3, [pc, #240]	@ (8002de0 <draw_goomba+0x1d0>)
 8002cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	db1b      	blt.n	8002d30 <draw_goomba+0x120>
			prev_goomba = goomba;
 8002cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8002dec <draw_goomba+0x1dc>)
 8002cfa:	4b39      	ldr	r3, [pc, #228]	@ (8002de0 <draw_goomba+0x1d0>)
 8002cfc:	4614      	mov	r4, r2
 8002cfe:	461d      	mov	r5, r3
 8002d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d08:	e884 0003 	stmia.w	r4, {r0, r1}
			goomba.x -= 5;
 8002d0c:	4b34      	ldr	r3, [pc, #208]	@ (8002de0 <draw_goomba+0x1d0>)
 8002d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b05      	subs	r3, #5
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	b21a      	sxth	r2, r3
 8002d1a:	4b31      	ldr	r3, [pc, #196]	@ (8002de0 <draw_goomba+0x1d0>)
 8002d1c:	801a      	strh	r2, [r3, #0]
			if (goomba.x <= 90) {
 8002d1e:	4b30      	ldr	r3, [pc, #192]	@ (8002de0 <draw_goomba+0x1d0>)
 8002d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d24:	2b5a      	cmp	r3, #90	@ 0x5a
 8002d26:	dc1e      	bgt.n	8002d66 <draw_goomba+0x156>
				goomba.x = 96;
 8002d28:	4b2d      	ldr	r3, [pc, #180]	@ (8002de0 <draw_goomba+0x1d0>)
 8002d2a:	2260      	movs	r2, #96	@ 0x60
 8002d2c:	801a      	strh	r2, [r3, #0]
 8002d2e:	e01a      	b.n	8002d66 <draw_goomba+0x156>
			}
		} else {
			prev_goomba = goomba;
 8002d30:	4a2e      	ldr	r2, [pc, #184]	@ (8002dec <draw_goomba+0x1dc>)
 8002d32:	4b2b      	ldr	r3, [pc, #172]	@ (8002de0 <draw_goomba+0x1d0>)
 8002d34:	4614      	mov	r4, r2
 8002d36:	461d      	mov	r5, r3
 8002d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d40:	e884 0003 	stmia.w	r4, {r0, r1}
			goomba.x += 5;
 8002d44:	4b26      	ldr	r3, [pc, #152]	@ (8002de0 <draw_goomba+0x1d0>)
 8002d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3305      	adds	r3, #5
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	b21a      	sxth	r2, r3
 8002d52:	4b23      	ldr	r3, [pc, #140]	@ (8002de0 <draw_goomba+0x1d0>)
 8002d54:	801a      	strh	r2, [r3, #0]
			if (goomba.x >= 160) {
 8002d56:	4b22      	ldr	r3, [pc, #136]	@ (8002de0 <draw_goomba+0x1d0>)
 8002d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d5c:	2b9f      	cmp	r3, #159	@ 0x9f
 8002d5e:	dd02      	ble.n	8002d66 <draw_goomba+0x156>
				goomba.x = 154;
 8002d60:	4b1f      	ldr	r3, [pc, #124]	@ (8002de0 <draw_goomba+0x1d0>)
 8002d62:	229a      	movs	r2, #154	@ 0x9a
 8002d64:	801a      	strh	r2, [r3, #0]
			}
	}

	cleanMarioBackground(frame, goomba_final, 32, 32, 32*32);
 8002d66:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd4 <draw_goomba+0x1c4>)
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2320      	movs	r3, #32
 8002d72:	2220      	movs	r2, #32
 8002d74:	491f      	ldr	r1, [pc, #124]	@ (8002df4 <draw_goomba+0x1e4>)
 8002d76:	f7ff f953 	bl	8002020 <cleanMarioBackground>
	ILI9341_FillRectangle(prev_goomba.x, prev_goomba.y, prev_goomba.width, prev_goomba.height, ILI9341_CYAN);
 8002d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dec <draw_goomba+0x1dc>)
 8002d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d80:	b298      	uxth	r0, r3
 8002d82:	4b1a      	ldr	r3, [pc, #104]	@ (8002dec <draw_goomba+0x1dc>)
 8002d84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d88:	b299      	uxth	r1, r3
 8002d8a:	4b18      	ldr	r3, [pc, #96]	@ (8002dec <draw_goomba+0x1dc>)
 8002d8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <draw_goomba+0x1dc>)
 8002d94:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	f240 74ff 	movw	r4, #2047	@ 0x7ff
 8002d9e:	9400      	str	r4, [sp, #0]
 8002da0:	f7fe fa4c 	bl	800123c <ILI9341_FillRectangle>
	ILI9341_DrawImage(goomba.x, goomba.y, goomba.width, goomba.height, goomba_final);
 8002da4:	4b0e      	ldr	r3, [pc, #56]	@ (8002de0 <draw_goomba+0x1d0>)
 8002da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002daa:	b298      	uxth	r0, r3
 8002dac:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <draw_goomba+0x1d0>)
 8002dae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002db2:	b299      	uxth	r1, r3
 8002db4:	4b0a      	ldr	r3, [pc, #40]	@ (8002de0 <draw_goomba+0x1d0>)
 8002db6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	4b08      	ldr	r3, [pc, #32]	@ (8002de0 <draw_goomba+0x1d0>)
 8002dbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	4c0b      	ldr	r4, [pc, #44]	@ (8002df4 <draw_goomba+0x1e4>)
 8002dc6:	9400      	str	r4, [sp, #0]
 8002dc8:	f7fe fab8 	bl	800133c <ILI9341_DrawImage>

}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200000b8 	.word	0x200000b8
 8002dd8:	080105e0 	.word	0x080105e0
 8002ddc:	08010de0 	.word	0x08010de0
 8002de0:	2000007c 	.word	0x2000007c
 8002de4:	20006076 	.word	0x20006076
 8002de8:	200000bc 	.word	0x200000bc
 8002dec:	20000064 	.word	0x20000064
 8002df0:	55555556 	.word	0x55555556
 8002df4:	20006078 	.word	0x20006078

08002df8 <drawScene>:

void drawScene(uint8_t map_num) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
	if (map_num == 1) {
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <drawScene+0x14>

		draw_map_1();
 8002e08:	f7ff f94c 	bl	80020a4 <draw_map_1>
	}
}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	0000      	movs	r0, r0
	...

08002e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e18:	b5b0      	push	{r4, r5, r7, lr}
 8002e1a:	b0a2      	sub	sp, #136	@ 0x88
 8002e1c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e1e:	f000 fff3 	bl	8003e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e22:	f000 fb8b 	bl	800353c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e26:	f000 fd35 	bl	8003894 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002e2a:	f000 fd09 	bl	8003840 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002e2e:	f000 fbed 	bl	800360c <MX_SPI1_Init>
  MX_SPI2_Init();
 8002e32:	f000 fc21 	bl	8003678 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002e36:	f003 fd53 	bl	80068e0 <MX_FATFS_Init>
  MX_TIM3_Init();
 8002e3a:	f000 fc53 	bl	80036e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002e3e:	f000 fca7 	bl	8003790 <MX_TIM4_Init>
//  HAL_GPIO_WritePin(SD_Power_GPIO_Port, SD_Power_Pin, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 8002e42:	f7fe fb75 	bl	8001530 <init>

//  ILI9341_FillScreen(ILI9341_CYAN);


  uint32_t last_tick = HAL_GetTick();
 8002e46:	f001 f845 	bl	8003ed4 <HAL_GetTick>
 8002e4a:	6638      	str	r0, [r7, #96]	@ 0x60
  uint32_t move_tick = HAL_GetTick();
 8002e4c:	f001 f842 	bl	8003ed4 <HAL_GetTick>
 8002e50:	65f8      	str	r0, [r7, #92]	@ 0x5c
  uint32_t walk_tick = HAL_GetTick();
 8002e52:	f001 f83f 	bl	8003ed4 <HAL_GetTick>
 8002e56:	6778      	str	r0, [r7, #116]	@ 0x74
  uint32_t read_pin_tick = HAL_GetTick();
 8002e58:	f001 f83c 	bl	8003ed4 <HAL_GetTick>
 8002e5c:	6738      	str	r0, [r7, #112]	@ 0x70
  uint8_t curr_walk_frame = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t* walk_frames[] = { mario_walk_1, mario_walk_2, mario_walk_3 };
 8002e64:	4aa2      	ldr	r2, [pc, #648]	@ (80030f0 <main+0x2d8>)
 8002e66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t walk_frames_size[] = { 32, 32, 24, 32, 28, 32 };
 8002e70:	4aa0      	ldr	r2, [pc, #640]	@ (80030f4 <main+0x2dc>)
 8002e72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e7a:	6018      	str	r0, [r3, #0]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	8019      	strh	r1, [r3, #0]
  uint8_t text_height = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  bool idle = false;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

  uint32_t now = HAL_GetTick();
 8002e8c:	f001 f822 	bl	8003ed4 <HAL_GetTick>
 8002e90:	6578      	str	r0, [r7, #84]	@ 0x54
  uint32_t frame_count = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	66bb      	str	r3, [r7, #104]	@ 0x68

//  hard_reset_system();
  HAL_Delay(50);
 8002e96:	2032      	movs	r0, #50	@ 0x32
 8002e98:	f001 f828 	bl	8003eec <HAL_Delay>
  ILI9341_WriteString(40, 20, "Starting Mount!", Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002e9c:	4b96      	ldr	r3, [pc, #600]	@ (80030f8 <main+0x2e0>)
 8002e9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ea2:	9202      	str	r2, [sp, #8]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	9201      	str	r2, [sp, #4]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	9200      	str	r2, [sp, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a93      	ldr	r2, [pc, #588]	@ (80030fc <main+0x2e4>)
 8002eb0:	2114      	movs	r1, #20
 8002eb2:	2028      	movs	r0, #40	@ 0x28
 8002eb4:	f7fe f976 	bl	80011a4 <ILI9341_WriteString>
  HAL_Delay(50);
 8002eb8:	2032      	movs	r0, #50	@ 0x32
 8002eba:	f001 f817 	bl	8003eec <HAL_Delay>


//	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, SET);
	// Now try mount
	  //Open the file system
	  fres = f_mount(&FatFs, "", 1); //1=mount now
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	498f      	ldr	r1, [pc, #572]	@ (8003100 <main+0x2e8>)
 8002ec2:	4890      	ldr	r0, [pc, #576]	@ (8003104 <main+0x2ec>)
 8002ec4:	f006 faae 	bl	8009424 <f_mount>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b8e      	ldr	r3, [pc, #568]	@ (8003108 <main+0x2f0>)
 8002ece:	701a      	strb	r2, [r3, #0]
	  while (fres != FR_OK) {
 8002ed0:	e041      	b.n	8002f56 <main+0x13e>
		char msg[32];
		snprintf(msg, sizeof(msg), "mount err %u", (unsigned)fres);
 8002ed2:	4b8d      	ldr	r3, [pc, #564]	@ (8003108 <main+0x2f0>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	4638      	mov	r0, r7
 8002ed8:	4a8c      	ldr	r2, [pc, #560]	@ (800310c <main+0x2f4>)
 8002eda:	2120      	movs	r1, #32
 8002edc:	f007 f9c2 	bl	800a264 <sniprintf>
		HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, RESET);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ee6:	488a      	ldr	r0, [pc, #552]	@ (8003110 <main+0x2f8>)
 8002ee8:	f001 fad2 	bl	8004490 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8002eec:	2064      	movs	r0, #100	@ 0x64
 8002eee:	f000 fffd 	bl	8003eec <HAL_Delay>
		HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, SET);
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ef8:	4885      	ldr	r0, [pc, #532]	@ (8003110 <main+0x2f8>)
 8002efa:	f001 fac9 	bl	8004490 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8002efe:	200a      	movs	r0, #10
 8002f00:	f000 fff4 	bl	8003eec <HAL_Delay>
		ILI9341_WriteString(40, 60, msg, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002f04:	4b7c      	ldr	r3, [pc, #496]	@ (80030f8 <main+0x2e0>)
 8002f06:	4639      	mov	r1, r7
 8002f08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f0c:	9202      	str	r2, [sp, #8]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	9201      	str	r2, [sp, #4]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	9200      	str	r2, [sp, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	460a      	mov	r2, r1
 8002f1a:	213c      	movs	r1, #60	@ 0x3c
 8002f1c:	2028      	movs	r0, #40	@ 0x28
 8002f1e:	f7fe f941 	bl	80011a4 <ILI9341_WriteString>
		HAL_Delay(100);
 8002f22:	2064      	movs	r0, #100	@ 0x64
 8002f24:	f000 ffe2 	bl	8003eec <HAL_Delay>
		fres = f_mount(&FatFs, "", 1); //1=mount now
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4975      	ldr	r1, [pc, #468]	@ (8003100 <main+0x2e8>)
 8002f2c:	4875      	ldr	r0, [pc, #468]	@ (8003104 <main+0x2ec>)
 8002f2e:	f006 fa79 	bl	8009424 <f_mount>
 8002f32:	4603      	mov	r3, r0
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b74      	ldr	r3, [pc, #464]	@ (8003108 <main+0x2f0>)
 8002f38:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteString(40, 60, "Retrying: please wait!", Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002f3a:	4b6f      	ldr	r3, [pc, #444]	@ (80030f8 <main+0x2e0>)
 8002f3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f40:	9202      	str	r2, [sp, #8]
 8002f42:	2200      	movs	r2, #0
 8002f44:	9201      	str	r2, [sp, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	9200      	str	r2, [sp, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a71      	ldr	r2, [pc, #452]	@ (8003114 <main+0x2fc>)
 8002f4e:	213c      	movs	r1, #60	@ 0x3c
 8002f50:	2028      	movs	r0, #40	@ 0x28
 8002f52:	f7fe f927 	bl	80011a4 <ILI9341_WriteString>
	  while (fres != FR_OK) {
 8002f56:	4b6c      	ldr	r3, [pc, #432]	@ (8003108 <main+0x2f0>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1b9      	bne.n	8002ed2 <main+0xba>
	  }

	  HAL_Delay(10);
 8002f5e:	200a      	movs	r0, #10
 8002f60:	f000 ffc4 	bl	8003eec <HAL_Delay>
	  ILI9341_WriteString(0, 280, "SD Card Mounted", Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002f64:	4b64      	ldr	r3, [pc, #400]	@ (80030f8 <main+0x2e0>)
 8002f66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f6a:	9202      	str	r2, [sp, #8]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	9201      	str	r2, [sp, #4]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	9200      	str	r2, [sp, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a68      	ldr	r2, [pc, #416]	@ (8003118 <main+0x300>)
 8002f78:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7fe f911 	bl	80011a4 <ILI9341_WriteString>
	  HAL_Delay(5000);
 8002f82:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002f86:	f000 ffb1 	bl	8003eec <HAL_Delay>
	  DWORD free_clusters, free_sectors, total_sectors;

	  FATFS* getFreeFs;

	  fres = f_getfree("", &free_clusters, &getFreeFs);
 8002f8a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002f8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f92:	4619      	mov	r1, r3
 8002f94:	485a      	ldr	r0, [pc, #360]	@ (8003100 <main+0x2e8>)
 8002f96:	f006 ff8d 	bl	8009eb4 <f_getfree>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b5a      	ldr	r3, [pc, #360]	@ (8003108 <main+0x2f0>)
 8002fa0:	701a      	strb	r2, [r3, #0]
	  if (fres != FR_OK) {
 8002fa2:	4b59      	ldr	r3, [pc, #356]	@ (8003108 <main+0x2f0>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00f      	beq.n	8002fca <main+0x1b2>
		  ILI9341_WriteString(40, 40, "step 2", Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002faa:	4b53      	ldr	r3, [pc, #332]	@ (80030f8 <main+0x2e0>)
 8002fac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fb0:	9202      	str	r2, [sp, #8]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	9201      	str	r2, [sp, #4]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	9200      	str	r2, [sp, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a57      	ldr	r2, [pc, #348]	@ (800311c <main+0x304>)
 8002fbe:	2128      	movs	r1, #40	@ 0x28
 8002fc0:	2028      	movs	r0, #40	@ 0x28
 8002fc2:	f7fe f8ef 	bl	80011a4 <ILI9341_WriteString>
//			myprintf("f_getfree error (%i)\r\n", fres);
		while(1);
 8002fc6:	bf00      	nop
 8002fc8:	e7fd      	b.n	8002fc6 <main+0x1ae>
	  }

	  fres = f_open(&fil, "mario.wav", FA_READ);
 8002fca:	2201      	movs	r2, #1
 8002fcc:	4954      	ldr	r1, [pc, #336]	@ (8003120 <main+0x308>)
 8002fce:	4855      	ldr	r0, [pc, #340]	@ (8003124 <main+0x30c>)
 8002fd0:	f006 fa6e 	bl	80094b0 <f_open>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b4b      	ldr	r3, [pc, #300]	@ (8003108 <main+0x2f0>)
 8002fda:	701a      	strb	r2, [r3, #0]
	  if (fres != FR_OK) {
 8002fdc:	4b4a      	ldr	r3, [pc, #296]	@ (8003108 <main+0x2f0>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00d      	beq.n	8003000 <main+0x1e8>
		  ILI9341_WriteString(40, 40, "step 3", Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002fe4:	4b44      	ldr	r3, [pc, #272]	@ (80030f8 <main+0x2e0>)
 8002fe6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fea:	9202      	str	r2, [sp, #8]
 8002fec:	2200      	movs	r2, #0
 8002fee:	9201      	str	r2, [sp, #4]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	9200      	str	r2, [sp, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a4c      	ldr	r2, [pc, #304]	@ (8003128 <main+0x310>)
 8002ff8:	2128      	movs	r1, #40	@ 0x28
 8002ffa:	2028      	movs	r0, #40	@ 0x28
 8002ffc:	f7fe f8d2 	bl	80011a4 <ILI9341_WriteString>
	  }
//			myprintf("f_open error (%i)\r\n");
	  fres = f_open(&fil_yahoo, "yahoo.wav", FA_READ);
 8003000:	2201      	movs	r2, #1
 8003002:	494a      	ldr	r1, [pc, #296]	@ (800312c <main+0x314>)
 8003004:	484a      	ldr	r0, [pc, #296]	@ (8003130 <main+0x318>)
 8003006:	f006 fa53 	bl	80094b0 <f_open>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
 800300e:	4b3e      	ldr	r3, [pc, #248]	@ (8003108 <main+0x2f0>)
 8003010:	701a      	strb	r2, [r3, #0]

	  //Read first 44 bytes of the wav file
//	  BYTE readBuff[44];
//      FRESULT res = f_read(&fil, readBuff, 44, &numRead);
	  f_lseek(&fil, 0x2C);
 8003012:	212c      	movs	r1, #44	@ 0x2c
 8003014:	4843      	ldr	r0, [pc, #268]	@ (8003124 <main+0x30c>)
 8003016:	f006 fd44 	bl	8009aa2 <f_lseek>
	  f_lseek(&fil_yahoo, 0x55);
 800301a:	2155      	movs	r1, #85	@ 0x55
 800301c:	4844      	ldr	r0, [pc, #272]	@ (8003130 <main+0x318>)
 800301e:	f006 fd40 	bl	8009aa2 <f_lseek>
      HAL_Delay(10);
 8003022:	200a      	movs	r0, #10
 8003024:	f000 ff62 	bl	8003eec <HAL_Delay>

	  int numRead = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	623b      	str	r3, [r7, #32]
      FRESULT res = f_read(&fil, audio_buff, BUFF_SIZE, &numRead);
 800302c:	f107 0320 	add.w	r3, r7, #32
 8003030:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003034:	493f      	ldr	r1, [pc, #252]	@ (8003134 <main+0x31c>)
 8003036:	483b      	ldr	r0, [pc, #236]	@ (8003124 <main+0x30c>)
 8003038:	f006 fbf4 	bl	8009824 <f_read>
 800303c:	4603      	mov	r3, r0
 800303e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      res = f_read(&fil_yahoo, yahoo_buff, BUFF_SIZE, &numRead);
 8003042:	f107 0320 	add.w	r3, r7, #32
 8003046:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800304a:	493b      	ldr	r1, [pc, #236]	@ (8003138 <main+0x320>)
 800304c:	4838      	ldr	r0, [pc, #224]	@ (8003130 <main+0x318>)
 800304e:	f006 fbe9 	bl	8009824 <f_read>
 8003052:	4603      	mov	r3, r0
 8003054:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	  HAL_Delay(300);
 8003058:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800305c:	f000 ff46 	bl	8003eec <HAL_Delay>
	  drawScene(1);
 8003060:	2001      	movs	r0, #1
 8003062:	f7ff fec9 	bl	8002df8 <drawScene>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);     // PWM out
 8003066:	2100      	movs	r1, #0
 8003068:	4834      	ldr	r0, [pc, #208]	@ (800313c <main+0x324>)
 800306a:	f002 fbd5 	bl	8005818 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800306e:	4834      	ldr	r0, [pc, #208]	@ (8003140 <main+0x328>)
 8003070:	f002 fad2 	bl	8005618 <HAL_TIM_Base_Start_IT>
  uint16_t* curr_goomba = goomba_1;
 8003074:	4b33      	ldr	r3, [pc, #204]	@ (8003144 <main+0x32c>)
 8003076:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (mario.x < 0) mario.x = 0;
 8003078:	4b33      	ldr	r3, [pc, #204]	@ (8003148 <main+0x330>)
 800307a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800307e:	2b00      	cmp	r3, #0
 8003080:	da02      	bge.n	8003088 <main+0x270>
 8003082:	4b31      	ldr	r3, [pc, #196]	@ (8003148 <main+0x330>)
 8003084:	2200      	movs	r2, #0
 8003086:	801a      	strh	r2, [r3, #0]
    if (mario.x > 320 - mario.width) mario.x = 320 - mario.width;
 8003088:	4b2f      	ldr	r3, [pc, #188]	@ (8003148 <main+0x330>)
 800308a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800308e:	461a      	mov	r2, r3
 8003090:	4b2d      	ldr	r3, [pc, #180]	@ (8003148 <main+0x330>)
 8003092:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003096:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800309a:	429a      	cmp	r2, r3
 800309c:	dd09      	ble.n	80030b2 <main+0x29a>
 800309e:	4b2a      	ldr	r3, [pc, #168]	@ (8003148 <main+0x330>)
 80030a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	b21a      	sxth	r2, r3
 80030ae:	4b26      	ldr	r3, [pc, #152]	@ (8003148 <main+0x330>)
 80030b0:	801a      	strh	r2, [r3, #0]
	uint32_t now = HAL_GetTick();
 80030b2:	f000 ff0f 	bl	8003ed4 <HAL_GetTick>
 80030b6:	64b8      	str	r0, [r7, #72]	@ 0x48
//		idle = true;
//		prev_mario = mario;
//	}

	// DRAW LOOP
	if (now - walk_tick >= 100) {
 80030b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b63      	cmp	r3, #99	@ 0x63
 80030c0:	f240 81c3 	bls.w	800344a <main+0x632>
//			ILI9341_FillRectangle(prev_goomba.x, prev_goomba.y, prev_goomba.width, prev_goomba.height, ILI9341_CYAN);
//		}

		uint16_t* frame;
		// no movement happened
		if (!mario.x_distance_between_frame && (!mario.y_velocity)) {
 80030c4:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <main+0x330>)
 80030c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d140      	bne.n	8003150 <main+0x338>
 80030ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003148 <main+0x330>)
 80030d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80030d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030dc:	d138      	bne.n	8003150 <main+0x338>
			frame = mario_idle;
 80030de:	4b1b      	ldr	r3, [pc, #108]	@ (800314c <main+0x334>)
 80030e0:	667b      	str	r3, [r7, #100]	@ 0x64
			mario.width = 26;
 80030e2:	4b19      	ldr	r3, [pc, #100]	@ (8003148 <main+0x330>)
 80030e4:	221a      	movs	r2, #26
 80030e6:	809a      	strh	r2, [r3, #4]
			mario.height = 32;
 80030e8:	4b17      	ldr	r3, [pc, #92]	@ (8003148 <main+0x330>)
 80030ea:	2220      	movs	r2, #32
 80030ec:	80da      	strh	r2, [r3, #6]
 80030ee:	e0b1      	b.n	8003254 <main+0x43c>
 80030f0:	0800ac98 	.word	0x0800ac98
 80030f4:	0800aca4 	.word	0x0800aca4
 80030f8:	20000000 	.word	0x20000000
 80030fc:	0800ac18 	.word	0x0800ac18
 8003100:	0800ac28 	.word	0x0800ac28
 8003104:	20004cf0 	.word	0x20004cf0
 8003108:	20005384 	.word	0x20005384
 800310c:	0800ac2c 	.word	0x0800ac2c
 8003110:	40020000 	.word	0x40020000
 8003114:	0800ac3c 	.word	0x0800ac3c
 8003118:	0800ac54 	.word	0x0800ac54
 800311c:	0800ac64 	.word	0x0800ac64
 8003120:	0800ac6c 	.word	0x0800ac6c
 8003124:	20004f24 	.word	0x20004f24
 8003128:	0800ac78 	.word	0x0800ac78
 800312c:	0800ac80 	.word	0x0800ac80
 8003130:	20005154 	.word	0x20005154
 8003134:	20002cec 	.word	0x20002cec
 8003138:	20003cec 	.word	0x20003cec
 800313c:	20000248 	.word	0x20000248
 8003140:	20000200 	.word	0x20000200
 8003144:	080105e0 	.word	0x080105e0
 8003148:	20000020 	.word	0x20000020
 800314c:	0800ba50 	.word	0x0800ba50
		}
		else {
			mario.x += mario.x_distance_between_frame;
 8003150:	4b9d      	ldr	r3, [pc, #628]	@ (80033c8 <main+0x5b0>)
 8003152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003156:	b29a      	uxth	r2, r3
 8003158:	4b9b      	ldr	r3, [pc, #620]	@ (80033c8 <main+0x5b0>)
 800315a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800315e:	b29b      	uxth	r3, r3
 8003160:	4413      	add	r3, r2
 8003162:	b29b      	uxth	r3, r3
 8003164:	b21a      	sxth	r2, r3
 8003166:	4b98      	ldr	r3, [pc, #608]	@ (80033c8 <main+0x5b0>)
 8003168:	801a      	strh	r2, [r3, #0]
//			for (int i = 0; i < num_objects; i++) {
//				objects[i].prev_x = objects[i].x;
//				objects[i].x -= mario.x_distance_between_frame;
//			}

			if (mario.y_velocity) {
 800316a:	4b97      	ldr	r3, [pc, #604]	@ (80033c8 <main+0x5b0>)
 800316c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003170:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003178:	d02d      	beq.n	80031d6 <main+0x3be>
					mario.y_velocity += 0.10 * 550;
 800317a:	4b93      	ldr	r3, [pc, #588]	@ (80033c8 <main+0x5b0>)
 800317c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003180:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 80033cc <main+0x5b4>
 8003184:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003188:	4b8f      	ldr	r3, [pc, #572]	@ (80033c8 <main+0x5b0>)
 800318a:	edc3 7a03 	vstr	s15, [r3, #12]
					float y_traveled = mario.y_velocity * 0.10;
 800318e:	4b8e      	ldr	r3, [pc, #568]	@ (80033c8 <main+0x5b0>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd fb02 	bl	800079c <__aeabi_f2d>
 8003198:	a389      	add	r3, pc, #548	@ (adr r3, 80033c0 <main+0x5a8>)
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	f7fd f86f 	bl	8000280 <__aeabi_dmul>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f7fd fb4f 	bl	800084c <__aeabi_d2f>
 80031ae:	4603      	mov	r3, r0
 80031b0:	647b      	str	r3, [r7, #68]	@ 0x44

					mario.y += y_traveled;
 80031b2:	4b85      	ldr	r3, [pc, #532]	@ (80033c8 <main+0x5b0>)
 80031b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031b8:	ee07 3a90 	vmov	s15, r3
 80031bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031c0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80031c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031cc:	ee17 3a90 	vmov	r3, s15
 80031d0:	b21a      	sxth	r2, r3
 80031d2:	4b7d      	ldr	r3, [pc, #500]	@ (80033c8 <main+0x5b0>)
 80031d4:	805a      	strh	r2, [r3, #2]
//						mario.y = 176;
//						mario.y_velocity = 0;
//					}
			}

			if (mario.y_velocity) {
 80031d6:	4b7c      	ldr	r3, [pc, #496]	@ (80033c8 <main+0x5b0>)
 80031d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80031dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e4:	d008      	beq.n	80031f8 <main+0x3e0>
				frame = mario_jump;
 80031e6:	4b7a      	ldr	r3, [pc, #488]	@ (80033d0 <main+0x5b8>)
 80031e8:	667b      	str	r3, [r7, #100]	@ 0x64
				mario.width = 34;
 80031ea:	4b77      	ldr	r3, [pc, #476]	@ (80033c8 <main+0x5b0>)
 80031ec:	2222      	movs	r2, #34	@ 0x22
 80031ee:	809a      	strh	r2, [r3, #4]
				mario.height = 32;
 80031f0:	4b75      	ldr	r3, [pc, #468]	@ (80033c8 <main+0x5b0>)
 80031f2:	2220      	movs	r2, #32
 80031f4:	80da      	strh	r2, [r3, #6]
 80031f6:	e02d      	b.n	8003254 <main+0x43c>
			}
			else {
				curr_walk_frame++;
 80031f8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80031fc:	3301      	adds	r3, #1
 80031fe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				curr_walk_frame %= 3;
 8003202:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8003206:	4b73      	ldr	r3, [pc, #460]	@ (80033d4 <main+0x5bc>)
 8003208:	fba3 1302 	umull	r1, r3, r3, r2
 800320c:	0859      	lsrs	r1, r3, #1
 800320e:	460b      	mov	r3, r1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	440b      	add	r3, r1
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				frame = walk_frames[curr_walk_frame];
 800321a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	3378      	adds	r3, #120	@ 0x78
 8003222:	443b      	add	r3, r7
 8003224:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003228:	667b      	str	r3, [r7, #100]	@ 0x64
				mario.width = walk_frames_size[curr_walk_frame * 2];
 800322a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	3378      	adds	r3, #120	@ 0x78
 8003232:	443b      	add	r3, r7
 8003234:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8003238:	b21a      	sxth	r2, r3
 800323a:	4b63      	ldr	r3, [pc, #396]	@ (80033c8 <main+0x5b0>)
 800323c:	809a      	strh	r2, [r3, #4]
				mario.height = walk_frames_size[curr_walk_frame * 2 + 1];
 800323e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	3301      	adds	r3, #1
 8003246:	3378      	adds	r3, #120	@ 0x78
 8003248:	443b      	add	r3, r7
 800324a:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800324e:	b21a      	sxth	r2, r3
 8003250:	4b5d      	ldr	r3, [pc, #372]	@ (80033c8 <main+0x5b0>)
 8003252:	80da      	strh	r2, [r3, #6]

//			sprintf(buf_vel, "%f", mario.y_velocity);
//			ILI9341_WriteString(180, 220, buf_vel, Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
		}

		collision_detection_enemies();
 8003254:	f7fe fa94 	bl	8001780 <collision_detection_enemies>
		bool touching_ground = isTouchingGround();
 8003258:	f7fe fc98 	bl	8001b8c <isTouchingGround>
 800325c:	4603      	mov	r3, r0
 800325e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		// if mario isn't idle or he is but its the first frame where he is idle, then draw
		// otherwise skip to optimize speed.
		if (frame != mario_idle || (frame == mario_idle && !idle) || mario.redraw) {
 8003262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003264:	4a5c      	ldr	r2, [pc, #368]	@ (80033d8 <main+0x5c0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10e      	bne.n	8003288 <main+0x470>
 800326a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800326c:	4a5a      	ldr	r2, [pc, #360]	@ (80033d8 <main+0x5c0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d106      	bne.n	8003280 <main+0x468>
 8003272:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003276:	f083 0301 	eor.w	r3, r3, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d103      	bne.n	8003288 <main+0x470>
 8003280:	4b51      	ldr	r3, [pc, #324]	@ (80033c8 <main+0x5b0>)
 8003282:	7c1b      	ldrb	r3, [r3, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d06c      	beq.n	8003362 <main+0x54a>
			static uint8_t redraw_frames = 10;
			redraw_frames--;
 8003288:	4b54      	ldr	r3, [pc, #336]	@ (80033dc <main+0x5c4>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	3b01      	subs	r3, #1
 800328e:	b2da      	uxtb	r2, r3
 8003290:	4b52      	ldr	r3, [pc, #328]	@ (80033dc <main+0x5c4>)
 8003292:	701a      	strb	r2, [r3, #0]

			if (redraw_frames == 0) {
 8003294:	4b51      	ldr	r3, [pc, #324]	@ (80033dc <main+0x5c4>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <main+0x490>
				mario.redraw = false;
 800329c:	4b4a      	ldr	r3, [pc, #296]	@ (80033c8 <main+0x5b0>)
 800329e:	2200      	movs	r2, #0
 80032a0:	741a      	strb	r2, [r3, #16]
				redraw_frames = 10;
 80032a2:	4b4e      	ldr	r3, [pc, #312]	@ (80033dc <main+0x5c4>)
 80032a4:	220a      	movs	r2, #10
 80032a6:	701a      	strb	r2, [r3, #0]
			}
			if (!idle && frame == mario_idle) {
 80032a8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80032ac:	f083 0301 	eor.w	r3, r3, #1
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d006      	beq.n	80032c4 <main+0x4ac>
 80032b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032b8:	4a47      	ldr	r2, [pc, #284]	@ (80033d8 <main+0x5c0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d102      	bne.n	80032c4 <main+0x4ac>
				// prevent another print while he's idle
				idle = true;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
			}

			if (idle && frame != mario_idle) {
 80032c4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d006      	beq.n	80032da <main+0x4c2>
 80032cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032ce:	4a42      	ldr	r2, [pc, #264]	@ (80033d8 <main+0x5c0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d002      	beq.n	80032da <main+0x4c2>
				idle = false;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
			}


			ILI9341_FillRectangle(prev_mario.x, prev_mario.y, prev_mario.width, prev_mario.height, ILI9341_CYAN);
 80032da:	4b41      	ldr	r3, [pc, #260]	@ (80033e0 <main+0x5c8>)
 80032dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e0:	b298      	uxth	r0, r3
 80032e2:	4b3f      	ldr	r3, [pc, #252]	@ (80033e0 <main+0x5c8>)
 80032e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032e8:	b299      	uxth	r1, r3
 80032ea:	4b3d      	ldr	r3, [pc, #244]	@ (80033e0 <main+0x5c8>)
 80032ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	4b3b      	ldr	r3, [pc, #236]	@ (80033e0 <main+0x5c8>)
 80032f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f240 74ff 	movw	r4, #2047	@ 0x7ff
 80032fe:	9400      	str	r4, [sp, #0]
 8003300:	f7fd ff9c 	bl	800123c <ILI9341_FillRectangle>
	//		ILI9341_DrawImage(mario.x, mario.y, mario.width, mario.height, frame);
			cleanMarioBackground(frame, mario_final, mario.width, mario.height, 34*32);
 8003304:	4b30      	ldr	r3, [pc, #192]	@ (80033c8 <main+0x5b0>)
 8003306:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800330a:	b29a      	uxth	r2, r3
 800330c:	4b2e      	ldr	r3, [pc, #184]	@ (80033c8 <main+0x5b0>)
 800330e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003312:	b29b      	uxth	r3, r3
 8003314:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8003318:	9100      	str	r1, [sp, #0]
 800331a:	4932      	ldr	r1, [pc, #200]	@ (80033e4 <main+0x5cc>)
 800331c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800331e:	f7fe fe7f 	bl	8002020 <cleanMarioBackground>
//				if (objects[i].redraw) {
//					ILI9341_DrawImage(objects[i].x, objects[i].y, objects[i].width, objects[i].height, objects[i].frame);
//					objects[i].redraw = false;
//				}
//			}
			turn_mario(mario.width, mario.height);
 8003322:	4b29      	ldr	r3, [pc, #164]	@ (80033c8 <main+0x5b0>)
 8003324:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	4a27      	ldr	r2, [pc, #156]	@ (80033c8 <main+0x5b0>)
 800332c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe f903 	bl	8001540 <turn_mario>
//			for (int i = 0; i < num_objects; i++) {
//				if (objects[i].x >= 0 && objects[i].x < 320 || objects[i].y >= 0 || objects[i].y < 240) {
//					ILI9341_DrawImage(objects[i].x, objects[i].y, objects[i].width, objects[i].height, objects[i].frame);
//				}
//			}
			ILI9341_DrawImage(mario.x, mario.y, mario.width, mario.height, mario_final);
 800333a:	4b23      	ldr	r3, [pc, #140]	@ (80033c8 <main+0x5b0>)
 800333c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003340:	b298      	uxth	r0, r3
 8003342:	4b21      	ldr	r3, [pc, #132]	@ (80033c8 <main+0x5b0>)
 8003344:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003348:	b299      	uxth	r1, r3
 800334a:	4b1f      	ldr	r3, [pc, #124]	@ (80033c8 <main+0x5b0>)
 800334c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003350:	b29a      	uxth	r2, r3
 8003352:	4b1d      	ldr	r3, [pc, #116]	@ (80033c8 <main+0x5b0>)
 8003354:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003358:	b29b      	uxth	r3, r3
 800335a:	4c22      	ldr	r4, [pc, #136]	@ (80033e4 <main+0x5cc>)
 800335c:	9400      	str	r4, [sp, #0]
 800335e:	f7fd ffed 	bl	800133c <ILI9341_DrawImage>
//			cleanMarioBackground(curr_goomba, goomba_final, goomba.width, goomba.height);
//			ILI9341_FillRectangle(prev_goomba.x, prev_goomba.y, prev_goomba.width, prev_goomba.height, ILI9341_CYAN);
//			ILI9341_DrawImage(goomba.x, goomba.y, goomba.width, goomba.height, goomba_final);
//		}

		prev_mario = mario;
 8003362:	4a1f      	ldr	r2, [pc, #124]	@ (80033e0 <main+0x5c8>)
 8003364:	4b18      	ldr	r3, [pc, #96]	@ (80033c8 <main+0x5b0>)
 8003366:	4614      	mov	r4, r2
 8003368:	461d      	mov	r5, r3
 800336a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800336c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800336e:	682b      	ldr	r3, [r5, #0]
 8003370:	6023      	str	r3, [r4, #0]
		mario.x_distance_between_frame = 0;
 8003372:	4b15      	ldr	r3, [pc, #84]	@ (80033c8 <main+0x5b0>)
 8003374:	2200      	movs	r2, #0
 8003376:	811a      	strh	r2, [r3, #8]
		walk_tick = now;
 8003378:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800337a:	677b      	str	r3, [r7, #116]	@ 0x74
		char msg[32];
		snprintf(msg, sizeof(msg), "Lives: %d", mario_lives);
 800337c:	4b1a      	ldr	r3, [pc, #104]	@ (80033e8 <main+0x5d0>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	4638      	mov	r0, r7
 8003382:	4a1a      	ldr	r2, [pc, #104]	@ (80033ec <main+0x5d4>)
 8003384:	2120      	movs	r1, #32
 8003386:	f006 ff6d 	bl	800a264 <sniprintf>
		ILI9341_WriteString(10, 10, msg, Font_11x18, ILI9341_BLACK, ILI9341_CYAN);
 800338a:	4b19      	ldr	r3, [pc, #100]	@ (80033f0 <main+0x5d8>)
 800338c:	4639      	mov	r1, r7
 800338e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003392:	9202      	str	r2, [sp, #8]
 8003394:	2200      	movs	r2, #0
 8003396:	9201      	str	r2, [sp, #4]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	9200      	str	r2, [sp, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	460a      	mov	r2, r1
 80033a0:	210a      	movs	r1, #10
 80033a2:	200a      	movs	r0, #10
 80033a4:	f7fd fefe 	bl	80011a4 <ILI9341_WriteString>
		draw_bowser();
 80033a8:	f7ff f8b8 	bl	800251c <draw_bowser>
		if (!goomba.died) {
 80033ac:	4b11      	ldr	r3, [pc, #68]	@ (80033f4 <main+0x5dc>)
 80033ae:	7d5b      	ldrb	r3, [r3, #21]
 80033b0:	f083 0301 	eor.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01e      	beq.n	80033f8 <main+0x5e0>
			draw_goomba();
 80033ba:	f7ff fc29 	bl	8002c10 <draw_goomba>
 80033be:	e044      	b.n	800344a <main+0x632>
 80033c0:	9999999a 	.word	0x9999999a
 80033c4:	3fb99999 	.word	0x3fb99999
 80033c8:	20000020 	.word	0x20000020
 80033cc:	425c0000 	.word	0x425c0000
 80033d0:	0800d560 	.word	0x0800d560
 80033d4:	aaaaaaab 	.word	0xaaaaaaab
 80033d8:	0800ba50 	.word	0x0800ba50
 80033dc:	200000be 	.word	0x200000be
 80033e0:	2000000c 	.word	0x2000000c
 80033e4:	20000468 	.word	0x20000468
 80033e8:	20000008 	.word	0x20000008
 80033ec:	0800ac8c 	.word	0x0800ac8c
 80033f0:	20000000 	.word	0x20000000
 80033f4:	2000007c 	.word	0x2000007c
		} else {
			ILI9341_FillRectangle(goomba.x, goomba.y, goomba.width, goomba.height, ILI9341_CYAN);
 80033f8:	4b46      	ldr	r3, [pc, #280]	@ (8003514 <main+0x6fc>)
 80033fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033fe:	b298      	uxth	r0, r3
 8003400:	4b44      	ldr	r3, [pc, #272]	@ (8003514 <main+0x6fc>)
 8003402:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003406:	b299      	uxth	r1, r3
 8003408:	4b42      	ldr	r3, [pc, #264]	@ (8003514 <main+0x6fc>)
 800340a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800340e:	b29a      	uxth	r2, r3
 8003410:	4b40      	ldr	r3, [pc, #256]	@ (8003514 <main+0x6fc>)
 8003412:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003416:	b29b      	uxth	r3, r3
 8003418:	f240 74ff 	movw	r4, #2047	@ 0x7ff
 800341c:	9400      	str	r4, [sp, #0]
 800341e:	f7fd ff0d 	bl	800123c <ILI9341_FillRectangle>
			goomba.died = false;
 8003422:	4b3c      	ldr	r3, [pc, #240]	@ (8003514 <main+0x6fc>)
 8003424:	2200      	movs	r2, #0
 8003426:	755a      	strb	r2, [r3, #21]
			prev_goomba = goomba;
 8003428:	4a3b      	ldr	r2, [pc, #236]	@ (8003518 <main+0x700>)
 800342a:	4b3a      	ldr	r3, [pc, #232]	@ (8003514 <main+0x6fc>)
 800342c:	4614      	mov	r4, r2
 800342e:	461d      	mov	r5, r3
 8003430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003434:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003438:	e884 0003 	stmia.w	r4, {r0, r1}
			goomba.x = 272;
 800343c:	4b35      	ldr	r3, [pc, #212]	@ (8003514 <main+0x6fc>)
 800343e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8003442:	801a      	strh	r2, [r3, #0]
			goomba.y = 112;
 8003444:	4b33      	ldr	r3, [pc, #204]	@ (8003514 <main+0x6fc>)
 8003446:	2270      	movs	r2, #112	@ 0x70
 8003448:	805a      	strh	r2, [r3, #2]
		}
	}

	frame_count++;
 800344a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800344c:	3301      	adds	r3, #1
 800344e:	66bb      	str	r3, [r7, #104]	@ 0x68

//	if (frame_count > 30) {
//		HAL_Delay(10);
//	}
	// forward
	if (now - read_pin_tick >= 50) {
 8003450:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003452:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b31      	cmp	r3, #49	@ 0x31
 8003458:	f67f ae0e 	bls.w	8003078 <main+0x260>
		if (HAL_GPIO_ReadPin(RIGHT_BUTTON_GPIO_Port, RIGHT_BUTTON_Pin) == GPIO_PIN_SET) {
 800345c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003460:	482e      	ldr	r0, [pc, #184]	@ (800351c <main+0x704>)
 8003462:	f000 fffd 	bl	8004460 <HAL_GPIO_ReadPin>
 8003466:	4603      	mov	r3, r0
 8003468:	2b01      	cmp	r3, #1
 800346a:	d10b      	bne.n	8003484 <main+0x66c>
			// Button is held down - move the character
			mario.x_distance_between_frame += 3;
 800346c:	4b2c      	ldr	r3, [pc, #176]	@ (8003520 <main+0x708>)
 800346e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003472:	b29b      	uxth	r3, r3
 8003474:	3303      	adds	r3, #3
 8003476:	b29b      	uxth	r3, r3
 8003478:	b21a      	sxth	r2, r3
 800347a:	4b29      	ldr	r3, [pc, #164]	@ (8003520 <main+0x708>)
 800347c:	811a      	strh	r2, [r3, #8]
			move_tick = now;
 800347e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003480:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003482:	e012      	b.n	80034aa <main+0x692>
	   }
		else if (HAL_GPIO_ReadPin(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin) == GPIO_PIN_SET) {
 8003484:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003488:	4826      	ldr	r0, [pc, #152]	@ (8003524 <main+0x70c>)
 800348a:	f000 ffe9 	bl	8004460 <HAL_GPIO_ReadPin>
 800348e:	4603      	mov	r3, r0
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10a      	bne.n	80034aa <main+0x692>
			// Button is held down - move the character
			mario.x_distance_between_frame -= 3;
 8003494:	4b22      	ldr	r3, [pc, #136]	@ (8003520 <main+0x708>)
 8003496:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b03      	subs	r3, #3
 800349e:	b29b      	uxth	r3, r3
 80034a0:	b21a      	sxth	r2, r3
 80034a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003520 <main+0x708>)
 80034a4:	811a      	strh	r2, [r3, #8]
			move_tick = now;
 80034a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
	   if (HAL_GPIO_ReadPin(JUMP_BUTTON_GPIO_Port, JUMP_BUTTON_Pin) == GPIO_PIN_SET) {
 80034aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034ae:	481b      	ldr	r0, [pc, #108]	@ (800351c <main+0x704>)
 80034b0:	f000 ffd6 	bl	8004460 <HAL_GPIO_ReadPin>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d129      	bne.n	800350e <main+0x6f6>
			// Button is held down - move the character
		   is_jumping = true;
 80034ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <main+0x710>)
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
		   jump_timer = HAL_GetTick();
 80034c0:	f000 fd08 	bl	8003ed4 <HAL_GetTick>
 80034c4:	4603      	mov	r3, r0
 80034c6:	4a19      	ldr	r2, [pc, #100]	@ (800352c <main+0x714>)
 80034c8:	6013      	str	r3, [r2, #0]
		   mario.y_velocity = (mario.y_velocity) ? mario.y_velocity : -450;
 80034ca:	4b15      	ldr	r3, [pc, #84]	@ (8003520 <main+0x708>)
 80034cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80034d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d8:	d002      	beq.n	80034e0 <main+0x6c8>
 80034da:	4b11      	ldr	r3, [pc, #68]	@ (8003520 <main+0x708>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	e000      	b.n	80034e2 <main+0x6ca>
 80034e0:	4b13      	ldr	r3, [pc, #76]	@ (8003530 <main+0x718>)
 80034e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003520 <main+0x708>)
 80034e4:	60d3      	str	r3, [r2, #12]
		   if (mario.y < 120 && mario.y_velocity == -450) {
 80034e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <main+0x708>)
 80034e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034ec:	2b77      	cmp	r3, #119	@ 0x77
 80034ee:	dc0c      	bgt.n	800350a <main+0x6f2>
 80034f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003520 <main+0x708>)
 80034f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80034f6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003534 <main+0x71c>
 80034fa:	eef4 7a47 	vcmp.f32	s15, s14
 80034fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003502:	d102      	bne.n	800350a <main+0x6f2>
			  mario.y_velocity = -285;
 8003504:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <main+0x708>)
 8003506:	4a0c      	ldr	r2, [pc, #48]	@ (8003538 <main+0x720>)
 8003508:	60da      	str	r2, [r3, #12]
		   }
		   move_tick = now;
 800350a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800350c:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		read_pin_tick = now;
 800350e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003510:	673b      	str	r3, [r7, #112]	@ 0x70
  {
 8003512:	e5b1      	b.n	8003078 <main+0x260>
 8003514:	2000007c 	.word	0x2000007c
 8003518:	20000064 	.word	0x20000064
 800351c:	40020400 	.word	0x40020400
 8003520:	20000020 	.word	0x20000020
 8003524:	40020000 	.word	0x40020000
 8003528:	2000538c 	.word	0x2000538c
 800352c:	20005390 	.word	0x20005390
 8003530:	c3e10000 	.word	0xc3e10000
 8003534:	c3e10000 	.word	0xc3e10000
 8003538:	c38e8000 	.word	0xc38e8000

0800353c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b094      	sub	sp, #80	@ 0x50
 8003540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003542:	f107 0320 	add.w	r3, r7, #32
 8003546:	2230      	movs	r2, #48	@ 0x30
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f006 febe 	bl	800a2cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003560:	2300      	movs	r3, #0
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	4b27      	ldr	r3, [pc, #156]	@ (8003604 <SystemClock_Config+0xc8>)
 8003566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003568:	4a26      	ldr	r2, [pc, #152]	@ (8003604 <SystemClock_Config+0xc8>)
 800356a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800356e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003570:	4b24      	ldr	r3, [pc, #144]	@ (8003604 <SystemClock_Config+0xc8>)
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800357c:	2300      	movs	r3, #0
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	4b21      	ldr	r3, [pc, #132]	@ (8003608 <SystemClock_Config+0xcc>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a20      	ldr	r2, [pc, #128]	@ (8003608 <SystemClock_Config+0xcc>)
 8003586:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b1e      	ldr	r3, [pc, #120]	@ (8003608 <SystemClock_Config+0xcc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003598:	2302      	movs	r3, #2
 800359a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800359c:	2301      	movs	r3, #1
 800359e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035a0:	2310      	movs	r3, #16
 80035a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035a4:	2302      	movs	r3, #2
 80035a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035a8:	2300      	movs	r3, #0
 80035aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80035ac:	2308      	movs	r3, #8
 80035ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80035b0:	2364      	movs	r3, #100	@ 0x64
 80035b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035b4:	2302      	movs	r3, #2
 80035b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80035b8:	2304      	movs	r3, #4
 80035ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035bc:	f107 0320 	add.w	r3, r7, #32
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 ff7f 	bl	80044c4 <HAL_RCC_OscConfig>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80035cc:	f000 f9f8 	bl	80039c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035d0:	230f      	movs	r3, #15
 80035d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035d4:	2302      	movs	r3, #2
 80035d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80035e6:	f107 030c 	add.w	r3, r7, #12
 80035ea:	2103      	movs	r1, #3
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 f9e1 	bl	80049b4 <HAL_RCC_ClockConfig>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80035f8:	f000 f9e2 	bl	80039c0 <Error_Handler>
  }
}
 80035fc:	bf00      	nop
 80035fe:	3750      	adds	r7, #80	@ 0x50
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	40007000 	.word	0x40007000

0800360c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003610:	4b17      	ldr	r3, [pc, #92]	@ (8003670 <MX_SPI1_Init+0x64>)
 8003612:	4a18      	ldr	r2, [pc, #96]	@ (8003674 <MX_SPI1_Init+0x68>)
 8003614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003616:	4b16      	ldr	r3, [pc, #88]	@ (8003670 <MX_SPI1_Init+0x64>)
 8003618:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800361c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800361e:	4b14      	ldr	r3, [pc, #80]	@ (8003670 <MX_SPI1_Init+0x64>)
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003624:	4b12      	ldr	r3, [pc, #72]	@ (8003670 <MX_SPI1_Init+0x64>)
 8003626:	2200      	movs	r2, #0
 8003628:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800362a:	4b11      	ldr	r3, [pc, #68]	@ (8003670 <MX_SPI1_Init+0x64>)
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003630:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <MX_SPI1_Init+0x64>)
 8003632:	2200      	movs	r2, #0
 8003634:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003636:	4b0e      	ldr	r3, [pc, #56]	@ (8003670 <MX_SPI1_Init+0x64>)
 8003638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800363c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800363e:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <MX_SPI1_Init+0x64>)
 8003640:	2200      	movs	r2, #0
 8003642:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003644:	4b0a      	ldr	r3, [pc, #40]	@ (8003670 <MX_SPI1_Init+0x64>)
 8003646:	2200      	movs	r2, #0
 8003648:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800364a:	4b09      	ldr	r3, [pc, #36]	@ (8003670 <MX_SPI1_Init+0x64>)
 800364c:	2200      	movs	r2, #0
 800364e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003650:	4b07      	ldr	r3, [pc, #28]	@ (8003670 <MX_SPI1_Init+0x64>)
 8003652:	2200      	movs	r2, #0
 8003654:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003656:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <MX_SPI1_Init+0x64>)
 8003658:	220a      	movs	r2, #10
 800365a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800365c:	4804      	ldr	r0, [pc, #16]	@ (8003670 <MX_SPI1_Init+0x64>)
 800365e:	f001 fb89 	bl	8004d74 <HAL_SPI_Init>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003668:	f000 f9aa 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800366c:	bf00      	nop
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20000150 	.word	0x20000150
 8003674:	40013000 	.word	0x40013000

08003678 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800367c:	4b17      	ldr	r3, [pc, #92]	@ (80036dc <MX_SPI2_Init+0x64>)
 800367e:	4a18      	ldr	r2, [pc, #96]	@ (80036e0 <MX_SPI2_Init+0x68>)
 8003680:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003682:	4b16      	ldr	r3, [pc, #88]	@ (80036dc <MX_SPI2_Init+0x64>)
 8003684:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003688:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800368a:	4b14      	ldr	r3, [pc, #80]	@ (80036dc <MX_SPI2_Init+0x64>)
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003690:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <MX_SPI2_Init+0x64>)
 8003692:	2200      	movs	r2, #0
 8003694:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003696:	4b11      	ldr	r3, [pc, #68]	@ (80036dc <MX_SPI2_Init+0x64>)
 8003698:	2200      	movs	r2, #0
 800369a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800369c:	4b0f      	ldr	r3, [pc, #60]	@ (80036dc <MX_SPI2_Init+0x64>)
 800369e:	2200      	movs	r2, #0
 80036a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036a2:	4b0e      	ldr	r3, [pc, #56]	@ (80036dc <MX_SPI2_Init+0x64>)
 80036a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80036aa:	4b0c      	ldr	r3, [pc, #48]	@ (80036dc <MX_SPI2_Init+0x64>)
 80036ac:	2230      	movs	r2, #48	@ 0x30
 80036ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036b0:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <MX_SPI2_Init+0x64>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036b6:	4b09      	ldr	r3, [pc, #36]	@ (80036dc <MX_SPI2_Init+0x64>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036bc:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <MX_SPI2_Init+0x64>)
 80036be:	2200      	movs	r2, #0
 80036c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80036c2:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <MX_SPI2_Init+0x64>)
 80036c4:	220a      	movs	r2, #10
 80036c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80036c8:	4804      	ldr	r0, [pc, #16]	@ (80036dc <MX_SPI2_Init+0x64>)
 80036ca:	f001 fb53 	bl	8004d74 <HAL_SPI_Init>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80036d4:	f000 f974 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80036d8:	bf00      	nop
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	200001a8 	.word	0x200001a8
 80036e0:	40003800 	.word	0x40003800

080036e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	@ 0x28
 80036e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ea:	f107 0320 	add.w	r3, r7, #32
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036f4:	1d3b      	adds	r3, r7, #4
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	609a      	str	r2, [r3, #8]
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	611a      	str	r2, [r3, #16]
 8003702:	615a      	str	r2, [r3, #20]
 8003704:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003706:	4b20      	ldr	r3, [pc, #128]	@ (8003788 <MX_TIM3_Init+0xa4>)
 8003708:	4a20      	ldr	r2, [pc, #128]	@ (800378c <MX_TIM3_Init+0xa8>)
 800370a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800370c:	4b1e      	ldr	r3, [pc, #120]	@ (8003788 <MX_TIM3_Init+0xa4>)
 800370e:	2200      	movs	r2, #0
 8003710:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003712:	4b1d      	ldr	r3, [pc, #116]	@ (8003788 <MX_TIM3_Init+0xa4>)
 8003714:	2200      	movs	r2, #0
 8003716:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12500;
 8003718:	4b1b      	ldr	r3, [pc, #108]	@ (8003788 <MX_TIM3_Init+0xa4>)
 800371a:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800371e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003720:	4b19      	ldr	r3, [pc, #100]	@ (8003788 <MX_TIM3_Init+0xa4>)
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003726:	4b18      	ldr	r3, [pc, #96]	@ (8003788 <MX_TIM3_Init+0xa4>)
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800372c:	4816      	ldr	r0, [pc, #88]	@ (8003788 <MX_TIM3_Init+0xa4>)
 800372e:	f001 ffd5 	bl	80056dc <HAL_TIM_OC_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003738:	f000 f942 	bl	80039c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800373c:	2300      	movs	r3, #0
 800373e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003740:	2300      	movs	r3, #0
 8003742:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003744:	f107 0320 	add.w	r3, r7, #32
 8003748:	4619      	mov	r1, r3
 800374a:	480f      	ldr	r0, [pc, #60]	@ (8003788 <MX_TIM3_Init+0xa4>)
 800374c:	f002 fd82 	bl	8006254 <HAL_TIMEx_MasterConfigSynchronization>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003756:	f000 f933 	bl	80039c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800376a:	1d3b      	adds	r3, r7, #4
 800376c:	2200      	movs	r2, #0
 800376e:	4619      	mov	r1, r3
 8003770:	4805      	ldr	r0, [pc, #20]	@ (8003788 <MX_TIM3_Init+0xa4>)
 8003772:	f002 f9f1 	bl	8005b58 <HAL_TIM_OC_ConfigChannel>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800377c:	f000 f920 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003780:	bf00      	nop
 8003782:	3728      	adds	r7, #40	@ 0x28
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000200 	.word	0x20000200
 800378c:	40000400 	.word	0x40000400

08003790 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	@ 0x28
 8003794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003796:	f107 0320 	add.w	r3, r7, #32
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	609a      	str	r2, [r3, #8]
 80037aa:	60da      	str	r2, [r3, #12]
 80037ac:	611a      	str	r2, [r3, #16]
 80037ae:	615a      	str	r2, [r3, #20]
 80037b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80037b2:	4b21      	ldr	r3, [pc, #132]	@ (8003838 <MX_TIM4_Init+0xa8>)
 80037b4:	4a21      	ldr	r2, [pc, #132]	@ (800383c <MX_TIM4_Init+0xac>)
 80037b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80037b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003838 <MX_TIM4_Init+0xa8>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037be:	4b1e      	ldr	r3, [pc, #120]	@ (8003838 <MX_TIM4_Init+0xa8>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80037c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003838 <MX_TIM4_Init+0xa8>)
 80037c6:	22ff      	movs	r2, #255	@ 0xff
 80037c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003838 <MX_TIM4_Init+0xa8>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037d0:	4b19      	ldr	r3, [pc, #100]	@ (8003838 <MX_TIM4_Init+0xa8>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80037d6:	4818      	ldr	r0, [pc, #96]	@ (8003838 <MX_TIM4_Init+0xa8>)
 80037d8:	f001 ffcf 	bl	800577a <HAL_TIM_PWM_Init>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80037e2:	f000 f8ed 	bl	80039c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80037ee:	f107 0320 	add.w	r3, r7, #32
 80037f2:	4619      	mov	r1, r3
 80037f4:	4810      	ldr	r0, [pc, #64]	@ (8003838 <MX_TIM4_Init+0xa8>)
 80037f6:	f002 fd2d 	bl	8006254 <HAL_TIMEx_MasterConfigSynchronization>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8003800:	f000 f8de 	bl	80039c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003804:	2360      	movs	r3, #96	@ 0x60
 8003806:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003814:	1d3b      	adds	r3, r7, #4
 8003816:	2200      	movs	r2, #0
 8003818:	4619      	mov	r1, r3
 800381a:	4807      	ldr	r0, [pc, #28]	@ (8003838 <MX_TIM4_Init+0xa8>)
 800381c:	f002 f9f8 	bl	8005c10 <HAL_TIM_PWM_ConfigChannel>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003826:	f000 f8cb 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800382a:	4803      	ldr	r0, [pc, #12]	@ (8003838 <MX_TIM4_Init+0xa8>)
 800382c:	f000 f9be 	bl	8003bac <HAL_TIM_MspPostInit>

}
 8003830:	bf00      	nop
 8003832:	3728      	adds	r7, #40	@ 0x28
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000248 	.word	0x20000248
 800383c:	40000800 	.word	0x40000800

08003840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003844:	4b11      	ldr	r3, [pc, #68]	@ (800388c <MX_USART2_UART_Init+0x4c>)
 8003846:	4a12      	ldr	r2, [pc, #72]	@ (8003890 <MX_USART2_UART_Init+0x50>)
 8003848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800384a:	4b10      	ldr	r3, [pc, #64]	@ (800388c <MX_USART2_UART_Init+0x4c>)
 800384c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003852:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <MX_USART2_UART_Init+0x4c>)
 8003854:	2200      	movs	r2, #0
 8003856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003858:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <MX_USART2_UART_Init+0x4c>)
 800385a:	2200      	movs	r2, #0
 800385c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800385e:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <MX_USART2_UART_Init+0x4c>)
 8003860:	2200      	movs	r2, #0
 8003862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003864:	4b09      	ldr	r3, [pc, #36]	@ (800388c <MX_USART2_UART_Init+0x4c>)
 8003866:	220c      	movs	r2, #12
 8003868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800386a:	4b08      	ldr	r3, [pc, #32]	@ (800388c <MX_USART2_UART_Init+0x4c>)
 800386c:	2200      	movs	r2, #0
 800386e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003870:	4b06      	ldr	r3, [pc, #24]	@ (800388c <MX_USART2_UART_Init+0x4c>)
 8003872:	2200      	movs	r2, #0
 8003874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003876:	4805      	ldr	r0, [pc, #20]	@ (800388c <MX_USART2_UART_Init+0x4c>)
 8003878:	f002 fd6e 	bl	8006358 <HAL_UART_Init>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003882:	f000 f89d 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20000290 	.word	0x20000290
 8003890:	40004400 	.word	0x40004400

08003894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389a:	f107 030c 	add.w	r3, r7, #12
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	609a      	str	r2, [r3, #8]
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	4b41      	ldr	r3, [pc, #260]	@ (80039b4 <MX_GPIO_Init+0x120>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b2:	4a40      	ldr	r2, [pc, #256]	@ (80039b4 <MX_GPIO_Init+0x120>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ba:	4b3e      	ldr	r3, [pc, #248]	@ (80039b4 <MX_GPIO_Init+0x120>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	4b3a      	ldr	r3, [pc, #232]	@ (80039b4 <MX_GPIO_Init+0x120>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	4a39      	ldr	r2, [pc, #228]	@ (80039b4 <MX_GPIO_Init+0x120>)
 80038d0:	f043 0302 	orr.w	r3, r3, #2
 80038d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d6:	4b37      	ldr	r3, [pc, #220]	@ (80039b4 <MX_GPIO_Init+0x120>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	607b      	str	r3, [r7, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|SD_Power_Pin, GPIO_PIN_RESET);
 80038e2:	2200      	movs	r2, #0
 80038e4:	f640 0101 	movw	r1, #2049	@ 0x801
 80038e8:	4833      	ldr	r0, [pc, #204]	@ (80039b8 <MX_GPIO_Init+0x124>)
 80038ea:	f000 fdd1 	bl	8004490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|SD_CS_Pin, GPIO_PIN_SET);
 80038ee:	2201      	movs	r2, #1
 80038f0:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80038f4:	4830      	ldr	r0, [pc, #192]	@ (80039b8 <MX_GPIO_Init+0x124>)
 80038f6:	f000 fdcb 	bl	8004490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|DC_Pin|LED_Pin, GPIO_PIN_SET);
 80038fa:	2201      	movs	r2, #1
 80038fc:	2107      	movs	r1, #7
 80038fe:	482f      	ldr	r0, [pc, #188]	@ (80039bc <MX_GPIO_Init+0x128>)
 8003900:	f000 fdc6 	bl	8004490 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|RST_Pin;
 8003904:	2311      	movs	r3, #17
 8003906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003908:	2301      	movs	r3, #1
 800390a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003910:	2300      	movs	r3, #0
 8003912:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003914:	f107 030c 	add.w	r3, r7, #12
 8003918:	4619      	mov	r1, r3
 800391a:	4827      	ldr	r0, [pc, #156]	@ (80039b8 <MX_GPIO_Init+0x124>)
 800391c:	f000 fc1c 	bl	8004158 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin LED_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|LED_Pin;
 8003920:	2307      	movs	r3, #7
 8003922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003924:	2301      	movs	r3, #1
 8003926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800392c:	2302      	movs	r3, #2
 800392e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003930:	f107 030c 	add.w	r3, r7, #12
 8003934:	4619      	mov	r1, r3
 8003936:	4821      	ldr	r0, [pc, #132]	@ (80039bc <MX_GPIO_Init+0x128>)
 8003938:	f000 fc0e 	bl	8004158 <HAL_GPIO_Init>

  /*Configure GPIO pins : JUMP_BUTTON_Pin RIGHT_BUTTON_Pin */
  GPIO_InitStruct.Pin = JUMP_BUTTON_Pin|RIGHT_BUTTON_Pin;
 800393c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003946:	2302      	movs	r3, #2
 8003948:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800394a:	f107 030c 	add.w	r3, r7, #12
 800394e:	4619      	mov	r1, r3
 8003950:	481a      	ldr	r0, [pc, #104]	@ (80039bc <MX_GPIO_Init+0x128>)
 8003952:	f000 fc01 	bl	8004158 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8003956:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800395a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800395c:	2301      	movs	r3, #1
 800395e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003960:	2301      	movs	r3, #1
 8003962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003964:	2300      	movs	r3, #0
 8003966:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003968:	f107 030c 	add.w	r3, r7, #12
 800396c:	4619      	mov	r1, r3
 800396e:	4812      	ldr	r0, [pc, #72]	@ (80039b8 <MX_GPIO_Init+0x124>)
 8003970:	f000 fbf2 	bl	8004158 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEFT_BUTTON_Pin */
  GPIO_InitStruct.Pin = LEFT_BUTTON_Pin;
 8003974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003978:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800397e:	2302      	movs	r3, #2
 8003980:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LEFT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003982:	f107 030c 	add.w	r3, r7, #12
 8003986:	4619      	mov	r1, r3
 8003988:	480b      	ldr	r0, [pc, #44]	@ (80039b8 <MX_GPIO_Init+0x124>)
 800398a:	f000 fbe5 	bl	8004158 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Power_Pin */
  GPIO_InitStruct.Pin = SD_Power_Pin;
 800398e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003994:	2301      	movs	r3, #1
 8003996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399c:	2303      	movs	r3, #3
 800399e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_Power_GPIO_Port, &GPIO_InitStruct);
 80039a0:	f107 030c 	add.w	r3, r7, #12
 80039a4:	4619      	mov	r1, r3
 80039a6:	4804      	ldr	r0, [pc, #16]	@ (80039b8 <MX_GPIO_Init+0x124>)
 80039a8:	f000 fbd6 	bl	8004158 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
/* USER CODE END MX_GPIO_Init_2 */
}
 80039ac:	bf00      	nop
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40020000 	.word	0x40020000
 80039bc:	40020400 	.word	0x40020400

080039c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039c4:	b672      	cpsid	i
}
 80039c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039c8:	bf00      	nop
 80039ca:	e7fd      	b.n	80039c8 <Error_Handler+0x8>

080039cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	4b10      	ldr	r3, [pc, #64]	@ (8003a18 <HAL_MspInit+0x4c>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	4a0f      	ldr	r2, [pc, #60]	@ (8003a18 <HAL_MspInit+0x4c>)
 80039dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003a18 <HAL_MspInit+0x4c>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ea:	607b      	str	r3, [r7, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	603b      	str	r3, [r7, #0]
 80039f2:	4b09      	ldr	r3, [pc, #36]	@ (8003a18 <HAL_MspInit+0x4c>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	4a08      	ldr	r2, [pc, #32]	@ (8003a18 <HAL_MspInit+0x4c>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80039fe:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <HAL_MspInit+0x4c>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800

08003a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08c      	sub	sp, #48	@ 0x30
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	f107 031c 	add.w	r3, r7, #28
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a32      	ldr	r2, [pc, #200]	@ (8003b04 <HAL_SPI_MspInit+0xe8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d12c      	bne.n	8003a98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	4b31      	ldr	r3, [pc, #196]	@ (8003b08 <HAL_SPI_MspInit+0xec>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	4a30      	ldr	r2, [pc, #192]	@ (8003b08 <HAL_SPI_MspInit+0xec>)
 8003a48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a4e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b08 <HAL_SPI_MspInit+0xec>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003b08 <HAL_SPI_MspInit+0xec>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a62:	4a29      	ldr	r2, [pc, #164]	@ (8003b08 <HAL_SPI_MspInit+0xec>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a6a:	4b27      	ldr	r3, [pc, #156]	@ (8003b08 <HAL_SPI_MspInit+0xec>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ILI_SCK_Pin|ILI_MISO_Pin|ILI_MOSI_Pin;
 8003a76:	23e0      	movs	r3, #224	@ 0xe0
 8003a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a82:	2303      	movs	r3, #3
 8003a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a86:	2305      	movs	r3, #5
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8a:	f107 031c 	add.w	r3, r7, #28
 8003a8e:	4619      	mov	r1, r3
 8003a90:	481e      	ldr	r0, [pc, #120]	@ (8003b0c <HAL_SPI_MspInit+0xf0>)
 8003a92:	f000 fb61 	bl	8004158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003a96:	e031      	b.n	8003afc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <HAL_SPI_MspInit+0xf4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d12c      	bne.n	8003afc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	4b18      	ldr	r3, [pc, #96]	@ (8003b08 <HAL_SPI_MspInit+0xec>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	4a17      	ldr	r2, [pc, #92]	@ (8003b08 <HAL_SPI_MspInit+0xec>)
 8003aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ab2:	4b15      	ldr	r3, [pc, #84]	@ (8003b08 <HAL_SPI_MspInit+0xec>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	4b11      	ldr	r3, [pc, #68]	@ (8003b08 <HAL_SPI_MspInit+0xec>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	4a10      	ldr	r2, [pc, #64]	@ (8003b08 <HAL_SPI_MspInit+0xec>)
 8003ac8:	f043 0302 	orr.w	r3, r3, #2
 8003acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ace:	4b0e      	ldr	r3, [pc, #56]	@ (8003b08 <HAL_SPI_MspInit+0xec>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003ada:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8003ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003aec:	2305      	movs	r3, #5
 8003aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af0:	f107 031c 	add.w	r3, r7, #28
 8003af4:	4619      	mov	r1, r3
 8003af6:	4807      	ldr	r0, [pc, #28]	@ (8003b14 <HAL_SPI_MspInit+0xf8>)
 8003af8:	f000 fb2e 	bl	8004158 <HAL_GPIO_Init>
}
 8003afc:	bf00      	nop
 8003afe:	3730      	adds	r7, #48	@ 0x30
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40013000 	.word	0x40013000
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40020000 	.word	0x40020000
 8003b10:	40003800 	.word	0x40003800
 8003b14:	40020400 	.word	0x40020400

08003b18 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a0e      	ldr	r2, [pc, #56]	@ (8003b60 <HAL_TIM_OC_MspInit+0x48>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d115      	bne.n	8003b56 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <HAL_TIM_OC_MspInit+0x4c>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	4a0c      	ldr	r2, [pc, #48]	@ (8003b64 <HAL_TIM_OC_MspInit+0x4c>)
 8003b34:	f043 0302 	orr.w	r3, r3, #2
 8003b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <HAL_TIM_OC_MspInit+0x4c>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	2100      	movs	r1, #0
 8003b4a:	201d      	movs	r0, #29
 8003b4c:	f000 facd 	bl	80040ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b50:	201d      	movs	r0, #29
 8003b52:	f000 fae6 	bl	8004122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40023800 	.word	0x40023800

08003b68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a0b      	ldr	r2, [pc, #44]	@ (8003ba4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d10d      	bne.n	8003b96 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba8 <HAL_TIM_PWM_MspInit+0x40>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	4a09      	ldr	r2, [pc, #36]	@ (8003ba8 <HAL_TIM_PWM_MspInit+0x40>)
 8003b84:	f043 0304 	orr.w	r3, r3, #4
 8003b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ba8 <HAL_TIM_PWM_MspInit+0x40>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40000800 	.word	0x40000800
 8003ba8:	40023800 	.word	0x40023800

08003bac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb4:	f107 030c 	add.w	r3, r7, #12
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a12      	ldr	r2, [pc, #72]	@ (8003c14 <HAL_TIM_MspPostInit+0x68>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d11d      	bne.n	8003c0a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	4b11      	ldr	r3, [pc, #68]	@ (8003c18 <HAL_TIM_MspPostInit+0x6c>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd6:	4a10      	ldr	r2, [pc, #64]	@ (8003c18 <HAL_TIM_MspPostInit+0x6c>)
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bde:	4b0e      	ldr	r3, [pc, #56]	@ (8003c18 <HAL_TIM_MspPostInit+0x6c>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003bea:	2340      	movs	r3, #64	@ 0x40
 8003bec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfe:	f107 030c 	add.w	r3, r7, #12
 8003c02:	4619      	mov	r1, r3
 8003c04:	4805      	ldr	r0, [pc, #20]	@ (8003c1c <HAL_TIM_MspPostInit+0x70>)
 8003c06:	f000 faa7 	bl	8004158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003c0a:	bf00      	nop
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40000800 	.word	0x40000800
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40020400 	.word	0x40020400

08003c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	@ 0x28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c28:	f107 0314 	add.w	r3, r7, #20
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a19      	ldr	r2, [pc, #100]	@ (8003ca4 <HAL_UART_MspInit+0x84>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d12b      	bne.n	8003c9a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	4b18      	ldr	r3, [pc, #96]	@ (8003ca8 <HAL_UART_MspInit+0x88>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ca8 <HAL_UART_MspInit+0x88>)
 8003c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c52:	4b15      	ldr	r3, [pc, #84]	@ (8003ca8 <HAL_UART_MspInit+0x88>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	4b11      	ldr	r3, [pc, #68]	@ (8003ca8 <HAL_UART_MspInit+0x88>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	4a10      	ldr	r2, [pc, #64]	@ (8003ca8 <HAL_UART_MspInit+0x88>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca8 <HAL_UART_MspInit+0x88>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c86:	2303      	movs	r3, #3
 8003c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c8e:	f107 0314 	add.w	r3, r7, #20
 8003c92:	4619      	mov	r1, r3
 8003c94:	4805      	ldr	r0, [pc, #20]	@ (8003cac <HAL_UART_MspInit+0x8c>)
 8003c96:	f000 fa5f 	bl	8004158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c9a:	bf00      	nop
 8003c9c:	3728      	adds	r7, #40	@ 0x28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40004400 	.word	0x40004400
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	40020000 	.word	0x40020000

08003cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <NMI_Handler+0x4>

08003cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cbc:	bf00      	nop
 8003cbe:	e7fd      	b.n	8003cbc <HardFault_Handler+0x4>

08003cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <MemManage_Handler+0x4>

08003cc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ccc:	bf00      	nop
 8003cce:	e7fd      	b.n	8003ccc <BusFault_Handler+0x4>

08003cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <UsageFault_Handler+0x4>

08003cd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d06:	f000 f8d1 	bl	8003eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d14:	4802      	ldr	r0, [pc, #8]	@ (8003d20 <TIM3_IRQHandler+0x10>)
 8003d16:	f001 fe2f 	bl	8005978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000200 	.word	0x20000200

08003d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d2c:	4a14      	ldr	r2, [pc, #80]	@ (8003d80 <_sbrk+0x5c>)
 8003d2e:	4b15      	ldr	r3, [pc, #84]	@ (8003d84 <_sbrk+0x60>)
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d38:	4b13      	ldr	r3, [pc, #76]	@ (8003d88 <_sbrk+0x64>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d102      	bne.n	8003d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d40:	4b11      	ldr	r3, [pc, #68]	@ (8003d88 <_sbrk+0x64>)
 8003d42:	4a12      	ldr	r2, [pc, #72]	@ (8003d8c <_sbrk+0x68>)
 8003d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d46:	4b10      	ldr	r3, [pc, #64]	@ (8003d88 <_sbrk+0x64>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d207      	bcs.n	8003d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d54:	f006 fac2 	bl	800a2dc <__errno>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	220c      	movs	r2, #12
 8003d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d62:	e009      	b.n	8003d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d64:	4b08      	ldr	r3, [pc, #32]	@ (8003d88 <_sbrk+0x64>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d6a:	4b07      	ldr	r3, [pc, #28]	@ (8003d88 <_sbrk+0x64>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	4a05      	ldr	r2, [pc, #20]	@ (8003d88 <_sbrk+0x64>)
 8003d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d76:	68fb      	ldr	r3, [r7, #12]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20020000 	.word	0x20020000
 8003d84:	00000400 	.word	0x00000400
 8003d88:	20007078 	.word	0x20007078
 8003d8c:	20007410 	.word	0x20007410

08003d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d94:	4b06      	ldr	r3, [pc, #24]	@ (8003db0 <SystemInit+0x20>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9a:	4a05      	ldr	r2, [pc, #20]	@ (8003db0 <SystemInit+0x20>)
 8003d9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003da0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003db4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003dec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003db8:	f7ff ffea 	bl	8003d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003dbc:	480c      	ldr	r0, [pc, #48]	@ (8003df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003dbe:	490d      	ldr	r1, [pc, #52]	@ (8003df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dc4:	e002      	b.n	8003dcc <LoopCopyDataInit>

08003dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dca:	3304      	adds	r3, #4

08003dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dd0:	d3f9      	bcc.n	8003dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8003e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dd8:	e001      	b.n	8003dde <LoopFillZerobss>

08003dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ddc:	3204      	adds	r2, #4

08003dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003de0:	d3fb      	bcc.n	8003dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003de2:	f006 fa81 	bl	800a2e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003de6:	f7ff f817 	bl	8002e18 <main>
  bx  lr    
 8003dea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003df4:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8003df8:	0801c67c 	.word	0x0801c67c
  ldr r2, =_sbss
 8003dfc:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8003e00:	20007410 	.word	0x20007410

08003e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e04:	e7fe      	b.n	8003e04 <ADC_IRQHandler>
	...

08003e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e48 <HAL_Init+0x40>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0d      	ldr	r2, [pc, #52]	@ (8003e48 <HAL_Init+0x40>)
 8003e12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e18:	4b0b      	ldr	r3, [pc, #44]	@ (8003e48 <HAL_Init+0x40>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e48 <HAL_Init+0x40>)
 8003e1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e24:	4b08      	ldr	r3, [pc, #32]	@ (8003e48 <HAL_Init+0x40>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a07      	ldr	r2, [pc, #28]	@ (8003e48 <HAL_Init+0x40>)
 8003e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e30:	2003      	movs	r0, #3
 8003e32:	f000 f94f 	bl	80040d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e36:	200f      	movs	r0, #15
 8003e38:	f000 f808 	bl	8003e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e3c:	f7ff fdc6 	bl	80039cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40023c00 	.word	0x40023c00

08003e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e54:	4b12      	ldr	r3, [pc, #72]	@ (8003ea0 <HAL_InitTick+0x54>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b12      	ldr	r3, [pc, #72]	@ (8003ea4 <HAL_InitTick+0x58>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f967 	bl	800413e <HAL_SYSTICK_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e00e      	b.n	8003e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b0f      	cmp	r3, #15
 8003e7e:	d80a      	bhi.n	8003e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e80:	2200      	movs	r2, #0
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	f000 f92f 	bl	80040ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e8c:	4a06      	ldr	r2, [pc, #24]	@ (8003ea8 <HAL_InitTick+0x5c>)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e000      	b.n	8003e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	200000c0 	.word	0x200000c0
 8003ea4:	200000c8 	.word	0x200000c8
 8003ea8:	200000c4 	.word	0x200000c4

08003eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003eb0:	4b06      	ldr	r3, [pc, #24]	@ (8003ecc <HAL_IncTick+0x20>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <HAL_IncTick+0x24>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4413      	add	r3, r2
 8003ebc:	4a04      	ldr	r2, [pc, #16]	@ (8003ed0 <HAL_IncTick+0x24>)
 8003ebe:	6013      	str	r3, [r2, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	200000c8 	.word	0x200000c8
 8003ed0:	2000707c 	.word	0x2000707c

08003ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ed8:	4b03      	ldr	r3, [pc, #12]	@ (8003ee8 <HAL_GetTick+0x14>)
 8003eda:	681b      	ldr	r3, [r3, #0]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	2000707c 	.word	0x2000707c

08003eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ef4:	f7ff ffee 	bl	8003ed4 <HAL_GetTick>
 8003ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d005      	beq.n	8003f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f06:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <HAL_Delay+0x44>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f12:	bf00      	nop
 8003f14:	f7ff ffde 	bl	8003ed4 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d8f7      	bhi.n	8003f14 <HAL_Delay+0x28>
  {
  }
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	200000c8 	.word	0x200000c8

08003f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f44:	4b0c      	ldr	r3, [pc, #48]	@ (8003f78 <__NVIC_SetPriorityGrouping+0x44>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f50:	4013      	ands	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f66:	4a04      	ldr	r2, [pc, #16]	@ (8003f78 <__NVIC_SetPriorityGrouping+0x44>)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	60d3      	str	r3, [r2, #12]
}
 8003f6c:	bf00      	nop
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	e000ed00 	.word	0xe000ed00

08003f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f80:	4b04      	ldr	r3, [pc, #16]	@ (8003f94 <__NVIC_GetPriorityGrouping+0x18>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	f003 0307 	and.w	r3, r3, #7
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	e000ed00 	.word	0xe000ed00

08003f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	db0b      	blt.n	8003fc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	f003 021f 	and.w	r2, r3, #31
 8003fb0:	4907      	ldr	r1, [pc, #28]	@ (8003fd0 <__NVIC_EnableIRQ+0x38>)
 8003fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	2001      	movs	r0, #1
 8003fba:	fa00 f202 	lsl.w	r2, r0, r2
 8003fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	e000e100 	.word	0xe000e100

08003fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	6039      	str	r1, [r7, #0]
 8003fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	db0a      	blt.n	8003ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	490c      	ldr	r1, [pc, #48]	@ (8004020 <__NVIC_SetPriority+0x4c>)
 8003fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff2:	0112      	lsls	r2, r2, #4
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ffc:	e00a      	b.n	8004014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	b2da      	uxtb	r2, r3
 8004002:	4908      	ldr	r1, [pc, #32]	@ (8004024 <__NVIC_SetPriority+0x50>)
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	3b04      	subs	r3, #4
 800400c:	0112      	lsls	r2, r2, #4
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	440b      	add	r3, r1
 8004012:	761a      	strb	r2, [r3, #24]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	e000e100 	.word	0xe000e100
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004028:	b480      	push	{r7}
 800402a:	b089      	sub	sp, #36	@ 0x24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f1c3 0307 	rsb	r3, r3, #7
 8004042:	2b04      	cmp	r3, #4
 8004044:	bf28      	it	cs
 8004046:	2304      	movcs	r3, #4
 8004048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3304      	adds	r3, #4
 800404e:	2b06      	cmp	r3, #6
 8004050:	d902      	bls.n	8004058 <NVIC_EncodePriority+0x30>
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3b03      	subs	r3, #3
 8004056:	e000      	b.n	800405a <NVIC_EncodePriority+0x32>
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800405c:	f04f 32ff 	mov.w	r2, #4294967295
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	401a      	ands	r2, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004070:	f04f 31ff 	mov.w	r1, #4294967295
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	43d9      	mvns	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004080:	4313      	orrs	r3, r2
         );
}
 8004082:	4618      	mov	r0, r3
 8004084:	3724      	adds	r7, #36	@ 0x24
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
	...

08004090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3b01      	subs	r3, #1
 800409c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040a0:	d301      	bcc.n	80040a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040a2:	2301      	movs	r3, #1
 80040a4:	e00f      	b.n	80040c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040a6:	4a0a      	ldr	r2, [pc, #40]	@ (80040d0 <SysTick_Config+0x40>)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040ae:	210f      	movs	r1, #15
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295
 80040b4:	f7ff ff8e 	bl	8003fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040b8:	4b05      	ldr	r3, [pc, #20]	@ (80040d0 <SysTick_Config+0x40>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040be:	4b04      	ldr	r3, [pc, #16]	@ (80040d0 <SysTick_Config+0x40>)
 80040c0:	2207      	movs	r2, #7
 80040c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	e000e010 	.word	0xe000e010

080040d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff ff29 	bl	8003f34 <__NVIC_SetPriorityGrouping>
}
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b086      	sub	sp, #24
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	4603      	mov	r3, r0
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040fc:	f7ff ff3e 	bl	8003f7c <__NVIC_GetPriorityGrouping>
 8004100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	6978      	ldr	r0, [r7, #20]
 8004108:	f7ff ff8e 	bl	8004028 <NVIC_EncodePriority>
 800410c:	4602      	mov	r2, r0
 800410e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004112:	4611      	mov	r1, r2
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff ff5d 	bl	8003fd4 <__NVIC_SetPriority>
}
 800411a:	bf00      	nop
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	4603      	mov	r3, r0
 800412a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800412c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff ff31 	bl	8003f98 <__NVIC_EnableIRQ>
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff ffa2 	bl	8004090 <SysTick_Config>
 800414c:	4603      	mov	r3, r0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004158:	b480      	push	{r7}
 800415a:	b089      	sub	sp, #36	@ 0x24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004166:	2300      	movs	r3, #0
 8004168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800416a:	2300      	movs	r3, #0
 800416c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]
 8004172:	e159      	b.n	8004428 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004174:	2201      	movs	r2, #1
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4013      	ands	r3, r2
 8004186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	429a      	cmp	r2, r3
 800418e:	f040 8148 	bne.w	8004422 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d005      	beq.n	80041aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d130      	bne.n	800420c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	2203      	movs	r2, #3
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041e0:	2201      	movs	r2, #1
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4013      	ands	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 0201 	and.w	r2, r3, #1
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4313      	orrs	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b03      	cmp	r3, #3
 8004216:	d017      	beq.n	8004248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	2203      	movs	r2, #3
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d123      	bne.n	800429c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	08da      	lsrs	r2, r3, #3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3208      	adds	r2, #8
 800425c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	220f      	movs	r2, #15
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	08da      	lsrs	r2, r3, #3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3208      	adds	r2, #8
 8004296:	69b9      	ldr	r1, [r7, #24]
 8004298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	2203      	movs	r2, #3
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4013      	ands	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 0203 	and.w	r2, r3, #3
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80a2 	beq.w	8004422 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	4b57      	ldr	r3, [pc, #348]	@ (8004440 <HAL_GPIO_Init+0x2e8>)
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	4a56      	ldr	r2, [pc, #344]	@ (8004440 <HAL_GPIO_Init+0x2e8>)
 80042e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80042ee:	4b54      	ldr	r3, [pc, #336]	@ (8004440 <HAL_GPIO_Init+0x2e8>)
 80042f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042fa:	4a52      	ldr	r2, [pc, #328]	@ (8004444 <HAL_GPIO_Init+0x2ec>)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	089b      	lsrs	r3, r3, #2
 8004300:	3302      	adds	r3, #2
 8004302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	220f      	movs	r2, #15
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4013      	ands	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a49      	ldr	r2, [pc, #292]	@ (8004448 <HAL_GPIO_Init+0x2f0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d019      	beq.n	800435a <HAL_GPIO_Init+0x202>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a48      	ldr	r2, [pc, #288]	@ (800444c <HAL_GPIO_Init+0x2f4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_GPIO_Init+0x1fe>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a47      	ldr	r2, [pc, #284]	@ (8004450 <HAL_GPIO_Init+0x2f8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00d      	beq.n	8004352 <HAL_GPIO_Init+0x1fa>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a46      	ldr	r2, [pc, #280]	@ (8004454 <HAL_GPIO_Init+0x2fc>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <HAL_GPIO_Init+0x1f6>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a45      	ldr	r2, [pc, #276]	@ (8004458 <HAL_GPIO_Init+0x300>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d101      	bne.n	800434a <HAL_GPIO_Init+0x1f2>
 8004346:	2304      	movs	r3, #4
 8004348:	e008      	b.n	800435c <HAL_GPIO_Init+0x204>
 800434a:	2307      	movs	r3, #7
 800434c:	e006      	b.n	800435c <HAL_GPIO_Init+0x204>
 800434e:	2303      	movs	r3, #3
 8004350:	e004      	b.n	800435c <HAL_GPIO_Init+0x204>
 8004352:	2302      	movs	r3, #2
 8004354:	e002      	b.n	800435c <HAL_GPIO_Init+0x204>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <HAL_GPIO_Init+0x204>
 800435a:	2300      	movs	r3, #0
 800435c:	69fa      	ldr	r2, [r7, #28]
 800435e:	f002 0203 	and.w	r2, r2, #3
 8004362:	0092      	lsls	r2, r2, #2
 8004364:	4093      	lsls	r3, r2
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4313      	orrs	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800436c:	4935      	ldr	r1, [pc, #212]	@ (8004444 <HAL_GPIO_Init+0x2ec>)
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	089b      	lsrs	r3, r3, #2
 8004372:	3302      	adds	r3, #2
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800437a:	4b38      	ldr	r3, [pc, #224]	@ (800445c <HAL_GPIO_Init+0x304>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800439e:	4a2f      	ldr	r2, [pc, #188]	@ (800445c <HAL_GPIO_Init+0x304>)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043a4:	4b2d      	ldr	r3, [pc, #180]	@ (800445c <HAL_GPIO_Init+0x304>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	43db      	mvns	r3, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	4013      	ands	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043c8:	4a24      	ldr	r2, [pc, #144]	@ (800445c <HAL_GPIO_Init+0x304>)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043ce:	4b23      	ldr	r3, [pc, #140]	@ (800445c <HAL_GPIO_Init+0x304>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	43db      	mvns	r3, r3
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4013      	ands	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043f2:	4a1a      	ldr	r2, [pc, #104]	@ (800445c <HAL_GPIO_Init+0x304>)
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043f8:	4b18      	ldr	r3, [pc, #96]	@ (800445c <HAL_GPIO_Init+0x304>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	43db      	mvns	r3, r3
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4013      	ands	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800441c:	4a0f      	ldr	r2, [pc, #60]	@ (800445c <HAL_GPIO_Init+0x304>)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	3301      	adds	r3, #1
 8004426:	61fb      	str	r3, [r7, #28]
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	2b0f      	cmp	r3, #15
 800442c:	f67f aea2 	bls.w	8004174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	3724      	adds	r7, #36	@ 0x24
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800
 8004444:	40013800 	.word	0x40013800
 8004448:	40020000 	.word	0x40020000
 800444c:	40020400 	.word	0x40020400
 8004450:	40020800 	.word	0x40020800
 8004454:	40020c00 	.word	0x40020c00
 8004458:	40021000 	.word	0x40021000
 800445c:	40013c00 	.word	0x40013c00

08004460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	887b      	ldrh	r3, [r7, #2]
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
 800447c:	e001      	b.n	8004482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800447e:	2300      	movs	r3, #0
 8004480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004482:	7bfb      	ldrb	r3, [r7, #15]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	807b      	strh	r3, [r7, #2]
 800449c:	4613      	mov	r3, r2
 800449e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044a0:	787b      	ldrb	r3, [r7, #1]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044ac:	e003      	b.n	80044b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044ae:	887b      	ldrh	r3, [r7, #2]
 80044b0:	041a      	lsls	r2, r3, #16
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	619a      	str	r2, [r3, #24]
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
	...

080044c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e267      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d075      	beq.n	80045ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044e2:	4b88      	ldr	r3, [pc, #544]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d00c      	beq.n	8004508 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ee:	4b85      	ldr	r3, [pc, #532]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d112      	bne.n	8004520 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fa:	4b82      	ldr	r3, [pc, #520]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004502:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004506:	d10b      	bne.n	8004520 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004508:	4b7e      	ldr	r3, [pc, #504]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d05b      	beq.n	80045cc <HAL_RCC_OscConfig+0x108>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d157      	bne.n	80045cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e242      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004528:	d106      	bne.n	8004538 <HAL_RCC_OscConfig+0x74>
 800452a:	4b76      	ldr	r3, [pc, #472]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a75      	ldr	r2, [pc, #468]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 8004530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e01d      	b.n	8004574 <HAL_RCC_OscConfig+0xb0>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004540:	d10c      	bne.n	800455c <HAL_RCC_OscConfig+0x98>
 8004542:	4b70      	ldr	r3, [pc, #448]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a6f      	ldr	r2, [pc, #444]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 8004548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	4b6d      	ldr	r3, [pc, #436]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a6c      	ldr	r2, [pc, #432]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 8004554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e00b      	b.n	8004574 <HAL_RCC_OscConfig+0xb0>
 800455c:	4b69      	ldr	r3, [pc, #420]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a68      	ldr	r2, [pc, #416]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 8004562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	4b66      	ldr	r3, [pc, #408]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a65      	ldr	r2, [pc, #404]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 800456e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d013      	beq.n	80045a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7ff fcaa 	bl	8003ed4 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004584:	f7ff fca6 	bl	8003ed4 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	@ 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e207      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004596:	4b5b      	ldr	r3, [pc, #364]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0xc0>
 80045a2:	e014      	b.n	80045ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a4:	f7ff fc96 	bl	8003ed4 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ac:	f7ff fc92 	bl	8003ed4 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	@ 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e1f3      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045be:	4b51      	ldr	r3, [pc, #324]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0xe8>
 80045ca:	e000      	b.n	80045ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d063      	beq.n	80046a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045da:	4b4a      	ldr	r3, [pc, #296]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 030c 	and.w	r3, r3, #12
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00b      	beq.n	80045fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e6:	4b47      	ldr	r3, [pc, #284]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d11c      	bne.n	800462c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f2:	4b44      	ldr	r3, [pc, #272]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d116      	bne.n	800462c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fe:	4b41      	ldr	r3, [pc, #260]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_RCC_OscConfig+0x152>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d001      	beq.n	8004616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e1c7      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004616:	4b3b      	ldr	r3, [pc, #236]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4937      	ldr	r1, [pc, #220]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 8004626:	4313      	orrs	r3, r2
 8004628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462a:	e03a      	b.n	80046a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d020      	beq.n	8004676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004634:	4b34      	ldr	r3, [pc, #208]	@ (8004708 <HAL_RCC_OscConfig+0x244>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463a:	f7ff fc4b 	bl	8003ed4 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004642:	f7ff fc47 	bl	8003ed4 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e1a8      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004654:	4b2b      	ldr	r3, [pc, #172]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004660:	4b28      	ldr	r3, [pc, #160]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	4925      	ldr	r1, [pc, #148]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]
 8004674:	e015      	b.n	80046a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004676:	4b24      	ldr	r3, [pc, #144]	@ (8004708 <HAL_RCC_OscConfig+0x244>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7ff fc2a 	bl	8003ed4 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004684:	f7ff fc26 	bl	8003ed4 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e187      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004696:	4b1b      	ldr	r3, [pc, #108]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d036      	beq.n	800471c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d016      	beq.n	80046e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b6:	4b15      	ldr	r3, [pc, #84]	@ (800470c <HAL_RCC_OscConfig+0x248>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046bc:	f7ff fc0a 	bl	8003ed4 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c4:	f7ff fc06 	bl	8003ed4 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e167      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <HAL_RCC_OscConfig+0x240>)
 80046d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x200>
 80046e2:	e01b      	b.n	800471c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e4:	4b09      	ldr	r3, [pc, #36]	@ (800470c <HAL_RCC_OscConfig+0x248>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ea:	f7ff fbf3 	bl	8003ed4 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f0:	e00e      	b.n	8004710 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f2:	f7ff fbef 	bl	8003ed4 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d907      	bls.n	8004710 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e150      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
 8004704:	40023800 	.word	0x40023800
 8004708:	42470000 	.word	0x42470000
 800470c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004710:	4b88      	ldr	r3, [pc, #544]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 8004712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1ea      	bne.n	80046f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8097 	beq.w	8004858 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800472a:	2300      	movs	r3, #0
 800472c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800472e:	4b81      	ldr	r3, [pc, #516]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10f      	bne.n	800475a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	4b7d      	ldr	r3, [pc, #500]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	4a7c      	ldr	r2, [pc, #496]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 8004744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004748:	6413      	str	r3, [r2, #64]	@ 0x40
 800474a:	4b7a      	ldr	r3, [pc, #488]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004756:	2301      	movs	r3, #1
 8004758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475a:	4b77      	ldr	r3, [pc, #476]	@ (8004938 <HAL_RCC_OscConfig+0x474>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d118      	bne.n	8004798 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004766:	4b74      	ldr	r3, [pc, #464]	@ (8004938 <HAL_RCC_OscConfig+0x474>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a73      	ldr	r2, [pc, #460]	@ (8004938 <HAL_RCC_OscConfig+0x474>)
 800476c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004772:	f7ff fbaf 	bl	8003ed4 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477a:	f7ff fbab 	bl	8003ed4 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e10c      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478c:	4b6a      	ldr	r3, [pc, #424]	@ (8004938 <HAL_RCC_OscConfig+0x474>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d106      	bne.n	80047ae <HAL_RCC_OscConfig+0x2ea>
 80047a0:	4b64      	ldr	r3, [pc, #400]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a4:	4a63      	ldr	r2, [pc, #396]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 80047a6:	f043 0301 	orr.w	r3, r3, #1
 80047aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ac:	e01c      	b.n	80047e8 <HAL_RCC_OscConfig+0x324>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b05      	cmp	r3, #5
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCC_OscConfig+0x30c>
 80047b6:	4b5f      	ldr	r3, [pc, #380]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ba:	4a5e      	ldr	r2, [pc, #376]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 80047bc:	f043 0304 	orr.w	r3, r3, #4
 80047c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c6:	4a5b      	ldr	r2, [pc, #364]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ce:	e00b      	b.n	80047e8 <HAL_RCC_OscConfig+0x324>
 80047d0:	4b58      	ldr	r3, [pc, #352]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 80047d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d4:	4a57      	ldr	r2, [pc, #348]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 80047d6:	f023 0301 	bic.w	r3, r3, #1
 80047da:	6713      	str	r3, [r2, #112]	@ 0x70
 80047dc:	4b55      	ldr	r3, [pc, #340]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 80047de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e0:	4a54      	ldr	r2, [pc, #336]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 80047e2:	f023 0304 	bic.w	r3, r3, #4
 80047e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d015      	beq.n	800481c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f0:	f7ff fb70 	bl	8003ed4 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f6:	e00a      	b.n	800480e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f8:	f7ff fb6c 	bl	8003ed4 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e0cb      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480e:	4b49      	ldr	r3, [pc, #292]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0ee      	beq.n	80047f8 <HAL_RCC_OscConfig+0x334>
 800481a:	e014      	b.n	8004846 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481c:	f7ff fb5a 	bl	8003ed4 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004822:	e00a      	b.n	800483a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004824:	f7ff fb56 	bl	8003ed4 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e0b5      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800483a:	4b3e      	ldr	r3, [pc, #248]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 800483c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1ee      	bne.n	8004824 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004846:	7dfb      	ldrb	r3, [r7, #23]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d105      	bne.n	8004858 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484c:	4b39      	ldr	r3, [pc, #228]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 800484e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004850:	4a38      	ldr	r2, [pc, #224]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 8004852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004856:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 80a1 	beq.w	80049a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004862:	4b34      	ldr	r3, [pc, #208]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	2b08      	cmp	r3, #8
 800486c:	d05c      	beq.n	8004928 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d141      	bne.n	80048fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004876:	4b31      	ldr	r3, [pc, #196]	@ (800493c <HAL_RCC_OscConfig+0x478>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487c:	f7ff fb2a 	bl	8003ed4 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004884:	f7ff fb26 	bl	8003ed4 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e087      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004896:	4b27      	ldr	r3, [pc, #156]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69da      	ldr	r2, [r3, #28]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	019b      	lsls	r3, r3, #6
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	3b01      	subs	r3, #1
 80048bc:	041b      	lsls	r3, r3, #16
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	061b      	lsls	r3, r3, #24
 80048c6:	491b      	ldr	r1, [pc, #108]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048cc:	4b1b      	ldr	r3, [pc, #108]	@ (800493c <HAL_RCC_OscConfig+0x478>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d2:	f7ff faff 	bl	8003ed4 <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d8:	e008      	b.n	80048ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048da:	f7ff fafb 	bl	8003ed4 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e05c      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ec:	4b11      	ldr	r3, [pc, #68]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0f0      	beq.n	80048da <HAL_RCC_OscConfig+0x416>
 80048f8:	e054      	b.n	80049a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fa:	4b10      	ldr	r3, [pc, #64]	@ (800493c <HAL_RCC_OscConfig+0x478>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004900:	f7ff fae8 	bl	8003ed4 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004908:	f7ff fae4 	bl	8003ed4 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e045      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491a:	4b06      	ldr	r3, [pc, #24]	@ (8004934 <HAL_RCC_OscConfig+0x470>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f0      	bne.n	8004908 <HAL_RCC_OscConfig+0x444>
 8004926:	e03d      	b.n	80049a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d107      	bne.n	8004940 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e038      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
 8004934:	40023800 	.word	0x40023800
 8004938:	40007000 	.word	0x40007000
 800493c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004940:	4b1b      	ldr	r3, [pc, #108]	@ (80049b0 <HAL_RCC_OscConfig+0x4ec>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d028      	beq.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004958:	429a      	cmp	r2, r3
 800495a:	d121      	bne.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004966:	429a      	cmp	r2, r3
 8004968:	d11a      	bne.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004970:	4013      	ands	r3, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004976:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004978:	4293      	cmp	r3, r2
 800497a:	d111      	bne.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004986:	085b      	lsrs	r3, r3, #1
 8004988:	3b01      	subs	r3, #1
 800498a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800498c:	429a      	cmp	r2, r3
 800498e:	d107      	bne.n	80049a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800499c:	429a      	cmp	r2, r3
 800499e:	d001      	beq.n	80049a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40023800 	.word	0x40023800

080049b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0cc      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c8:	4b68      	ldr	r3, [pc, #416]	@ (8004b6c <HAL_RCC_ClockConfig+0x1b8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d90c      	bls.n	80049f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d6:	4b65      	ldr	r3, [pc, #404]	@ (8004b6c <HAL_RCC_ClockConfig+0x1b8>)
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049de:	4b63      	ldr	r3, [pc, #396]	@ (8004b6c <HAL_RCC_ClockConfig+0x1b8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0b8      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d020      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a08:	4b59      	ldr	r3, [pc, #356]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4a58      	ldr	r2, [pc, #352]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a20:	4b53      	ldr	r3, [pc, #332]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	4a52      	ldr	r2, [pc, #328]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a2c:	4b50      	ldr	r3, [pc, #320]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	494d      	ldr	r1, [pc, #308]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d044      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d107      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a52:	4b47      	ldr	r3, [pc, #284]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d119      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e07f      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d003      	beq.n	8004a72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d107      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a72:	4b3f      	ldr	r3, [pc, #252]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e06f      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a82:	4b3b      	ldr	r3, [pc, #236]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e067      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a92:	4b37      	ldr	r3, [pc, #220]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f023 0203 	bic.w	r2, r3, #3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	4934      	ldr	r1, [pc, #208]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa4:	f7ff fa16 	bl	8003ed4 <HAL_GetTick>
 8004aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aaa:	e00a      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aac:	f7ff fa12 	bl	8003ed4 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e04f      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 020c 	and.w	r2, r3, #12
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d1eb      	bne.n	8004aac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad4:	4b25      	ldr	r3, [pc, #148]	@ (8004b6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d20c      	bcs.n	8004afc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae2:	4b22      	ldr	r3, [pc, #136]	@ (8004b6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b20      	ldr	r3, [pc, #128]	@ (8004b6c <HAL_RCC_ClockConfig+0x1b8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e032      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b08:	4b19      	ldr	r3, [pc, #100]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	4916      	ldr	r1, [pc, #88]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d009      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b26:	4b12      	ldr	r3, [pc, #72]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	490e      	ldr	r1, [pc, #56]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b3a:	f000 f821 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	4b0b      	ldr	r3, [pc, #44]	@ (8004b70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	091b      	lsrs	r3, r3, #4
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	490a      	ldr	r1, [pc, #40]	@ (8004b74 <HAL_RCC_ClockConfig+0x1c0>)
 8004b4c:	5ccb      	ldrb	r3, [r1, r3]
 8004b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b52:	4a09      	ldr	r2, [pc, #36]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c4>)
 8004b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b56:	4b09      	ldr	r3, [pc, #36]	@ (8004b7c <HAL_RCC_ClockConfig+0x1c8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff f976 	bl	8003e4c <HAL_InitTick>

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40023c00 	.word	0x40023c00
 8004b70:	40023800 	.word	0x40023800
 8004b74:	0801c1e0 	.word	0x0801c1e0
 8004b78:	200000c0 	.word	0x200000c0
 8004b7c:	200000c4 	.word	0x200000c4

08004b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b84:	b090      	sub	sp, #64	@ 0x40
 8004b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b98:	4b59      	ldr	r3, [pc, #356]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 030c 	and.w	r3, r3, #12
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d00d      	beq.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	f200 80a1 	bhi.w	8004cec <HAL_RCC_GetSysClockFreq+0x16c>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d003      	beq.n	8004bba <HAL_RCC_GetSysClockFreq+0x3a>
 8004bb2:	e09b      	b.n	8004cec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bb4:	4b53      	ldr	r3, [pc, #332]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bb8:	e09b      	b.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bba:	4b53      	ldr	r3, [pc, #332]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bbe:	e098      	b.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bc0:	4b4f      	ldr	r3, [pc, #316]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bca:	4b4d      	ldr	r3, [pc, #308]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d028      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	099b      	lsrs	r3, r3, #6
 8004bdc:	2200      	movs	r2, #0
 8004bde:	623b      	str	r3, [r7, #32]
 8004be0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004be8:	2100      	movs	r1, #0
 8004bea:	4b47      	ldr	r3, [pc, #284]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bec:	fb03 f201 	mul.w	r2, r3, r1
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	fb00 f303 	mul.w	r3, r0, r3
 8004bf6:	4413      	add	r3, r2
 8004bf8:	4a43      	ldr	r2, [pc, #268]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bfa:	fba0 1202 	umull	r1, r2, r0, r2
 8004bfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c00:	460a      	mov	r2, r1
 8004c02:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004c04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c06:	4413      	add	r3, r2
 8004c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	61fa      	str	r2, [r7, #28]
 8004c12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004c1a:	f7fb fe67 	bl	80008ec <__aeabi_uldivmod>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4613      	mov	r3, r2
 8004c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c26:	e053      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c28:	4b35      	ldr	r3, [pc, #212]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	099b      	lsrs	r3, r3, #6
 8004c2e:	2200      	movs	r2, #0
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	617a      	str	r2, [r7, #20]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c3a:	f04f 0b00 	mov.w	fp, #0
 8004c3e:	4652      	mov	r2, sl
 8004c40:	465b      	mov	r3, fp
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f04f 0100 	mov.w	r1, #0
 8004c4a:	0159      	lsls	r1, r3, #5
 8004c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c50:	0150      	lsls	r0, r2, #5
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	ebb2 080a 	subs.w	r8, r2, sl
 8004c5a:	eb63 090b 	sbc.w	r9, r3, fp
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c72:	ebb2 0408 	subs.w	r4, r2, r8
 8004c76:	eb63 0509 	sbc.w	r5, r3, r9
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	00eb      	lsls	r3, r5, #3
 8004c84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c88:	00e2      	lsls	r2, r4, #3
 8004c8a:	4614      	mov	r4, r2
 8004c8c:	461d      	mov	r5, r3
 8004c8e:	eb14 030a 	adds.w	r3, r4, sl
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	eb45 030b 	adc.w	r3, r5, fp
 8004c98:	607b      	str	r3, [r7, #4]
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	028b      	lsls	r3, r1, #10
 8004caa:	4621      	mov	r1, r4
 8004cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	028a      	lsls	r2, r1, #10
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cba:	2200      	movs	r2, #0
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	60fa      	str	r2, [r7, #12]
 8004cc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cc4:	f7fb fe12 	bl	80008ec <__aeabi_uldivmod>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4613      	mov	r3, r2
 8004cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	3301      	adds	r3, #1
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004ce0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cea:	e002      	b.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cec:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3740      	adds	r7, #64	@ 0x40
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cfe:	bf00      	nop
 8004d00:	40023800 	.word	0x40023800
 8004d04:	00f42400 	.word	0x00f42400
 8004d08:	017d7840 	.word	0x017d7840

08004d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d10:	4b03      	ldr	r3, [pc, #12]	@ (8004d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d12:	681b      	ldr	r3, [r3, #0]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	200000c0 	.word	0x200000c0

08004d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d28:	f7ff fff0 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	0a9b      	lsrs	r3, r3, #10
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	4903      	ldr	r1, [pc, #12]	@ (8004d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d3a:	5ccb      	ldrb	r3, [r1, r3]
 8004d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40023800 	.word	0x40023800
 8004d48:	0801c1f0 	.word	0x0801c1f0

08004d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d50:	f7ff ffdc 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8004d54:	4602      	mov	r2, r0
 8004d56:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	0b5b      	lsrs	r3, r3, #13
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	4903      	ldr	r1, [pc, #12]	@ (8004d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d62:	5ccb      	ldrb	r3, [r1, r3]
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	0801c1f0 	.word	0x0801c1f0

08004d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e07b      	b.n	8004e7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d108      	bne.n	8004da0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d96:	d009      	beq.n	8004dac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	61da      	str	r2, [r3, #28]
 8004d9e:	e005      	b.n	8004dac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fe fe28 	bl	8003a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004de2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e30:	ea42 0103 	orr.w	r1, r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e38:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	0c1b      	lsrs	r3, r3, #16
 8004e4a:	f003 0104 	and.w	r1, r3, #4
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e52:	f003 0210 	and.w	r2, r3, #16
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b088      	sub	sp, #32
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	4613      	mov	r3, r2
 8004e94:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e96:	f7ff f81d 	bl	8003ed4 <HAL_GetTick>
 8004e9a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d001      	beq.n	8004eb0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004eac:	2302      	movs	r3, #2
 8004eae:	e12a      	b.n	8005106 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_SPI_Transmit+0x36>
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e122      	b.n	8005106 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_SPI_Transmit+0x48>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e11b      	b.n	8005106 <HAL_SPI_Transmit+0x280>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2203      	movs	r2, #3
 8004eda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	88fa      	ldrh	r2, [r7, #6]
 8004eee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f1c:	d10f      	bne.n	8004f3e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f48:	2b40      	cmp	r3, #64	@ 0x40
 8004f4a:	d007      	beq.n	8004f5c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f64:	d152      	bne.n	800500c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <HAL_SPI_Transmit+0xee>
 8004f6e:	8b7b      	ldrh	r3, [r7, #26]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d145      	bne.n	8005000 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f78:	881a      	ldrh	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f84:	1c9a      	adds	r2, r3, #2
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f98:	e032      	b.n	8005000 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d112      	bne.n	8004fce <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fac:	881a      	ldrh	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb8:	1c9a      	adds	r2, r3, #2
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004fcc:	e018      	b.n	8005000 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fce:	f7fe ff81 	bl	8003ed4 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d803      	bhi.n	8004fe6 <HAL_SPI_Transmit+0x160>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe4:	d102      	bne.n	8004fec <HAL_SPI_Transmit+0x166>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d109      	bne.n	8005000 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e082      	b.n	8005106 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1c7      	bne.n	8004f9a <HAL_SPI_Transmit+0x114>
 800500a:	e053      	b.n	80050b4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_SPI_Transmit+0x194>
 8005014:	8b7b      	ldrh	r3, [r7, #26]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d147      	bne.n	80050aa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	7812      	ldrb	r2, [r2, #0]
 8005026:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005040:	e033      	b.n	80050aa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b02      	cmp	r3, #2
 800504e:	d113      	bne.n	8005078 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	330c      	adds	r3, #12
 800505a:	7812      	ldrb	r2, [r2, #0]
 800505c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005076:	e018      	b.n	80050aa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005078:	f7fe ff2c 	bl	8003ed4 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d803      	bhi.n	8005090 <HAL_SPI_Transmit+0x20a>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d102      	bne.n	8005096 <HAL_SPI_Transmit+0x210>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e02d      	b.n	8005106 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1c6      	bne.n	8005042 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	6839      	ldr	r1, [r7, #0]
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 fa59 	bl	8005570 <SPI_EndRxTxTransaction>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005104:	2300      	movs	r3, #0
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b08a      	sub	sp, #40	@ 0x28
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800511c:	2301      	movs	r3, #1
 800511e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005120:	f7fe fed8 	bl	8003ed4 <HAL_GetTick>
 8005124:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800512c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005134:	887b      	ldrh	r3, [r7, #2]
 8005136:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005138:	7ffb      	ldrb	r3, [r7, #31]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d00c      	beq.n	8005158 <HAL_SPI_TransmitReceive+0x4a>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005144:	d106      	bne.n	8005154 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d102      	bne.n	8005154 <HAL_SPI_TransmitReceive+0x46>
 800514e:	7ffb      	ldrb	r3, [r7, #31]
 8005150:	2b04      	cmp	r3, #4
 8005152:	d001      	beq.n	8005158 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005154:	2302      	movs	r3, #2
 8005156:	e17f      	b.n	8005458 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_SPI_TransmitReceive+0x5c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <HAL_SPI_TransmitReceive+0x5c>
 8005164:	887b      	ldrh	r3, [r7, #2]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e174      	b.n	8005458 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_SPI_TransmitReceive+0x6e>
 8005178:	2302      	movs	r3, #2
 800517a:	e16d      	b.n	8005458 <HAL_SPI_TransmitReceive+0x34a>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b04      	cmp	r3, #4
 800518e:	d003      	beq.n	8005198 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2205      	movs	r2, #5
 8005194:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	887a      	ldrh	r2, [r7, #2]
 80051a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	887a      	ldrh	r2, [r7, #2]
 80051ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	887a      	ldrh	r2, [r7, #2]
 80051ba:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	887a      	ldrh	r2, [r7, #2]
 80051c0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d8:	2b40      	cmp	r3, #64	@ 0x40
 80051da:	d007      	beq.n	80051ec <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051f4:	d17e      	bne.n	80052f4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <HAL_SPI_TransmitReceive+0xf6>
 80051fe:	8afb      	ldrh	r3, [r7, #22]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d16c      	bne.n	80052de <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005208:	881a      	ldrh	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005214:	1c9a      	adds	r2, r3, #2
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005228:	e059      	b.n	80052de <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b02      	cmp	r3, #2
 8005236:	d11b      	bne.n	8005270 <HAL_SPI_TransmitReceive+0x162>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <HAL_SPI_TransmitReceive+0x162>
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	2b01      	cmp	r3, #1
 8005246:	d113      	bne.n	8005270 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524c:	881a      	ldrh	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005258:	1c9a      	adds	r2, r3, #2
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b01      	cmp	r3, #1
 800527c:	d119      	bne.n	80052b2 <HAL_SPI_TransmitReceive+0x1a4>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d014      	beq.n	80052b2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005292:	b292      	uxth	r2, r2
 8005294:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529a:	1c9a      	adds	r2, r3, #2
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052ae:	2301      	movs	r3, #1
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052b2:	f7fe fe0f 	bl	8003ed4 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052be:	429a      	cmp	r2, r3
 80052c0:	d80d      	bhi.n	80052de <HAL_SPI_TransmitReceive+0x1d0>
 80052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c8:	d009      	beq.n	80052de <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e0bc      	b.n	8005458 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1a0      	bne.n	800522a <HAL_SPI_TransmitReceive+0x11c>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d19b      	bne.n	800522a <HAL_SPI_TransmitReceive+0x11c>
 80052f2:	e082      	b.n	80053fa <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_SPI_TransmitReceive+0x1f4>
 80052fc:	8afb      	ldrh	r3, [r7, #22]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d171      	bne.n	80053e6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	7812      	ldrb	r2, [r2, #0]
 800530e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005328:	e05d      	b.n	80053e6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b02      	cmp	r3, #2
 8005336:	d11c      	bne.n	8005372 <HAL_SPI_TransmitReceive+0x264>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d017      	beq.n	8005372 <HAL_SPI_TransmitReceive+0x264>
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	2b01      	cmp	r3, #1
 8005346:	d114      	bne.n	8005372 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	330c      	adds	r3, #12
 8005352:	7812      	ldrb	r2, [r2, #0]
 8005354:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b01      	cmp	r3, #1
 800537e:	d119      	bne.n	80053b4 <HAL_SPI_TransmitReceive+0x2a6>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d014      	beq.n	80053b4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053b0:	2301      	movs	r3, #1
 80053b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053b4:	f7fe fd8e 	bl	8003ed4 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d803      	bhi.n	80053cc <HAL_SPI_TransmitReceive+0x2be>
 80053c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ca:	d102      	bne.n	80053d2 <HAL_SPI_TransmitReceive+0x2c4>
 80053cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e038      	b.n	8005458 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d19c      	bne.n	800532a <HAL_SPI_TransmitReceive+0x21c>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d197      	bne.n	800532a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053fa:	6a3a      	ldr	r2, [r7, #32]
 80053fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f8b6 	bl	8005570 <SPI_EndRxTxTransaction>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d008      	beq.n	800541c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e01d      	b.n	8005458 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005424:	2300      	movs	r3, #0
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005456:	2300      	movs	r3, #0
  }
}
 8005458:	4618      	mov	r0, r3
 800545a:	3728      	adds	r7, #40	@ 0x28
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005470:	f7fe fd30 	bl	8003ed4 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	4413      	add	r3, r2
 800547e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005480:	f7fe fd28 	bl	8003ed4 <HAL_GetTick>
 8005484:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005486:	4b39      	ldr	r3, [pc, #228]	@ (800556c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	015b      	lsls	r3, r3, #5
 800548c:	0d1b      	lsrs	r3, r3, #20
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	fb02 f303 	mul.w	r3, r2, r3
 8005494:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005496:	e055      	b.n	8005544 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d051      	beq.n	8005544 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054a0:	f7fe fd18 	bl	8003ed4 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d902      	bls.n	80054b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d13d      	bne.n	8005532 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80054c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054ce:	d111      	bne.n	80054f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054d8:	d004      	beq.n	80054e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054e2:	d107      	bne.n	80054f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054fc:	d10f      	bne.n	800551e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800551c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e018      	b.n	8005564 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
 800553c:	e002      	b.n	8005544 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	3b01      	subs	r3, #1
 8005542:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	4013      	ands	r3, r2
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	429a      	cmp	r2, r3
 8005552:	bf0c      	ite	eq
 8005554:	2301      	moveq	r3, #1
 8005556:	2300      	movne	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	461a      	mov	r2, r3
 800555c:	79fb      	ldrb	r3, [r7, #7]
 800555e:	429a      	cmp	r2, r3
 8005560:	d19a      	bne.n	8005498 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3720      	adds	r7, #32
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	200000c0 	.word	0x200000c0

08005570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2201      	movs	r2, #1
 8005584:	2102      	movs	r1, #2
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f7ff ff6a 	bl	8005460 <SPI_WaitFlagStateUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005596:	f043 0220 	orr.w	r2, r3, #32
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e032      	b.n	8005608 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80055a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005610 <SPI_EndRxTxTransaction+0xa0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005614 <SPI_EndRxTxTransaction+0xa4>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	0d5b      	lsrs	r3, r3, #21
 80055ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80055b2:	fb02 f303 	mul.w	r3, r2, r3
 80055b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055c0:	d112      	bne.n	80055e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2200      	movs	r2, #0
 80055ca:	2180      	movs	r1, #128	@ 0x80
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7ff ff47 	bl	8005460 <SPI_WaitFlagStateUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d016      	beq.n	8005606 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055dc:	f043 0220 	orr.w	r2, r3, #32
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e00f      	b.n	8005608 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fe:	2b80      	cmp	r3, #128	@ 0x80
 8005600:	d0f2      	beq.n	80055e8 <SPI_EndRxTxTransaction+0x78>
 8005602:	e000      	b.n	8005606 <SPI_EndRxTxTransaction+0x96>
        break;
 8005604:	bf00      	nop
  }

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	200000c0 	.word	0x200000c0
 8005614:	165e9f81 	.word	0x165e9f81

08005618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	d001      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e044      	b.n	80056ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1e      	ldr	r2, [pc, #120]	@ (80056c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d018      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x6c>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800565a:	d013      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x6c>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a1a      	ldr	r2, [pc, #104]	@ (80056cc <HAL_TIM_Base_Start_IT+0xb4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00e      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x6c>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a19      	ldr	r2, [pc, #100]	@ (80056d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d009      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x6c>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a17      	ldr	r2, [pc, #92]	@ (80056d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x6c>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a16      	ldr	r2, [pc, #88]	@ (80056d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d111      	bne.n	80056a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b06      	cmp	r3, #6
 8005694:	d010      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0201 	orr.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a6:	e007      	b.n	80056b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40010000 	.word	0x40010000
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800
 80056d4:	40000c00 	.word	0x40000c00
 80056d8:	40014000 	.word	0x40014000

080056dc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e041      	b.n	8005772 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7fe fa08 	bl	8003b18 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3304      	adds	r3, #4
 8005718:	4619      	mov	r1, r3
 800571a:	4610      	mov	r0, r2
 800571c:	f000 fb62 	bl	8005de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e041      	b.n	8005810 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d106      	bne.n	80057a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7fe f9e1 	bl	8003b68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3304      	adds	r3, #4
 80057b6:	4619      	mov	r1, r3
 80057b8:	4610      	mov	r0, r2
 80057ba:	f000 fb13 	bl	8005de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <HAL_TIM_PWM_Start+0x24>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b01      	cmp	r3, #1
 8005832:	bf14      	ite	ne
 8005834:	2301      	movne	r3, #1
 8005836:	2300      	moveq	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	e022      	b.n	8005882 <HAL_TIM_PWM_Start+0x6a>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b04      	cmp	r3, #4
 8005840:	d109      	bne.n	8005856 <HAL_TIM_PWM_Start+0x3e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b01      	cmp	r3, #1
 800584c:	bf14      	ite	ne
 800584e:	2301      	movne	r3, #1
 8005850:	2300      	moveq	r3, #0
 8005852:	b2db      	uxtb	r3, r3
 8005854:	e015      	b.n	8005882 <HAL_TIM_PWM_Start+0x6a>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b08      	cmp	r3, #8
 800585a:	d109      	bne.n	8005870 <HAL_TIM_PWM_Start+0x58>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	e008      	b.n	8005882 <HAL_TIM_PWM_Start+0x6a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b01      	cmp	r3, #1
 800587a:	bf14      	ite	ne
 800587c:	2301      	movne	r3, #1
 800587e:	2300      	moveq	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e068      	b.n	800595c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d104      	bne.n	800589a <HAL_TIM_PWM_Start+0x82>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005898:	e013      	b.n	80058c2 <HAL_TIM_PWM_Start+0xaa>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b04      	cmp	r3, #4
 800589e:	d104      	bne.n	80058aa <HAL_TIM_PWM_Start+0x92>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058a8:	e00b      	b.n	80058c2 <HAL_TIM_PWM_Start+0xaa>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d104      	bne.n	80058ba <HAL_TIM_PWM_Start+0xa2>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058b8:	e003      	b.n	80058c2 <HAL_TIM_PWM_Start+0xaa>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2201      	movs	r2, #1
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fc9c 	bl	8006208 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a23      	ldr	r2, [pc, #140]	@ (8005964 <HAL_TIM_PWM_Start+0x14c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d107      	bne.n	80058ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005964 <HAL_TIM_PWM_Start+0x14c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d018      	beq.n	8005926 <HAL_TIM_PWM_Start+0x10e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058fc:	d013      	beq.n	8005926 <HAL_TIM_PWM_Start+0x10e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a19      	ldr	r2, [pc, #100]	@ (8005968 <HAL_TIM_PWM_Start+0x150>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_TIM_PWM_Start+0x10e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a17      	ldr	r2, [pc, #92]	@ (800596c <HAL_TIM_PWM_Start+0x154>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_TIM_PWM_Start+0x10e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a16      	ldr	r2, [pc, #88]	@ (8005970 <HAL_TIM_PWM_Start+0x158>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_TIM_PWM_Start+0x10e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a14      	ldr	r2, [pc, #80]	@ (8005974 <HAL_TIM_PWM_Start+0x15c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d111      	bne.n	800594a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b06      	cmp	r3, #6
 8005936:	d010      	beq.n	800595a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005948:	e007      	b.n	800595a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0201 	orr.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40010000 	.word	0x40010000
 8005968:	40000400 	.word	0x40000400
 800596c:	40000800 	.word	0x40000800
 8005970:	40000c00 	.word	0x40000c00
 8005974:	40014000 	.word	0x40014000

08005978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d020      	beq.n	80059dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01b      	beq.n	80059dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0202 	mvn.w	r2, #2
 80059ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f9f0 	bl	8005da8 <HAL_TIM_IC_CaptureCallback>
 80059c8:	e005      	b.n	80059d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f9e2 	bl	8005d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f9f3 	bl	8005dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d020      	beq.n	8005a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01b      	beq.n	8005a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0204 	mvn.w	r2, #4
 80059f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2202      	movs	r2, #2
 80059fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f9ca 	bl	8005da8 <HAL_TIM_IC_CaptureCallback>
 8005a14:	e005      	b.n	8005a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f9bc 	bl	8005d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f9cd 	bl	8005dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d020      	beq.n	8005a74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01b      	beq.n	8005a74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0208 	mvn.w	r2, #8
 8005a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2204      	movs	r2, #4
 8005a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f9a4 	bl	8005da8 <HAL_TIM_IC_CaptureCallback>
 8005a60:	e005      	b.n	8005a6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f996 	bl	8005d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f9a7 	bl	8005dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f003 0310 	and.w	r3, r3, #16
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d020      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01b      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0210 	mvn.w	r2, #16
 8005a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2208      	movs	r2, #8
 8005a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f97e 	bl	8005da8 <HAL_TIM_IC_CaptureCallback>
 8005aac:	e005      	b.n	8005aba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f970 	bl	8005d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f981 	bl	8005dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00c      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d007      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0201 	mvn.w	r2, #1
 8005adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fb fc74 	bl	80013cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00c      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d007      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fc1e 	bl	8006344 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00c      	beq.n	8005b2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d007      	beq.n	8005b2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f952 	bl	8005dd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00c      	beq.n	8005b50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0220 	mvn.w	r2, #32
 8005b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fbf0 	bl	8006330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e048      	b.n	8005c08 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b0c      	cmp	r3, #12
 8005b82:	d839      	bhi.n	8005bf8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005b84:	a201      	add	r2, pc, #4	@ (adr r2, 8005b8c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8a:	bf00      	nop
 8005b8c:	08005bc1 	.word	0x08005bc1
 8005b90:	08005bf9 	.word	0x08005bf9
 8005b94:	08005bf9 	.word	0x08005bf9
 8005b98:	08005bf9 	.word	0x08005bf9
 8005b9c:	08005bcf 	.word	0x08005bcf
 8005ba0:	08005bf9 	.word	0x08005bf9
 8005ba4:	08005bf9 	.word	0x08005bf9
 8005ba8:	08005bf9 	.word	0x08005bf9
 8005bac:	08005bdd 	.word	0x08005bdd
 8005bb0:	08005bf9 	.word	0x08005bf9
 8005bb4:	08005bf9 	.word	0x08005bf9
 8005bb8:	08005bf9 	.word	0x08005bf9
 8005bbc:	08005beb 	.word	0x08005beb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 f992 	bl	8005ef0 <TIM_OC1_SetConfig>
      break;
 8005bcc:	e017      	b.n	8005bfe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 f9f1 	bl	8005fbc <TIM_OC2_SetConfig>
      break;
 8005bda:	e010      	b.n	8005bfe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fa56 	bl	8006094 <TIM_OC3_SetConfig>
      break;
 8005be8:	e009      	b.n	8005bfe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fab9 	bl	8006168 <TIM_OC4_SetConfig>
      break;
 8005bf6:	e002      	b.n	8005bfe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8005bfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e0ae      	b.n	8005d8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b0c      	cmp	r3, #12
 8005c3a:	f200 809f 	bhi.w	8005d7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005c79 	.word	0x08005c79
 8005c48:	08005d7d 	.word	0x08005d7d
 8005c4c:	08005d7d 	.word	0x08005d7d
 8005c50:	08005d7d 	.word	0x08005d7d
 8005c54:	08005cb9 	.word	0x08005cb9
 8005c58:	08005d7d 	.word	0x08005d7d
 8005c5c:	08005d7d 	.word	0x08005d7d
 8005c60:	08005d7d 	.word	0x08005d7d
 8005c64:	08005cfb 	.word	0x08005cfb
 8005c68:	08005d7d 	.word	0x08005d7d
 8005c6c:	08005d7d 	.word	0x08005d7d
 8005c70:	08005d7d 	.word	0x08005d7d
 8005c74:	08005d3b 	.word	0x08005d3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68b9      	ldr	r1, [r7, #8]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 f936 	bl	8005ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	699a      	ldr	r2, [r3, #24]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0208 	orr.w	r2, r2, #8
 8005c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0204 	bic.w	r2, r2, #4
 8005ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6999      	ldr	r1, [r3, #24]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	619a      	str	r2, [r3, #24]
      break;
 8005cb6:	e064      	b.n	8005d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 f97c 	bl	8005fbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699a      	ldr	r2, [r3, #24]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6999      	ldr	r1, [r3, #24]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	021a      	lsls	r2, r3, #8
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	619a      	str	r2, [r3, #24]
      break;
 8005cf8:	e043      	b.n	8005d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 f9c7 	bl	8006094 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0208 	orr.w	r2, r2, #8
 8005d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69da      	ldr	r2, [r3, #28]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0204 	bic.w	r2, r2, #4
 8005d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69d9      	ldr	r1, [r3, #28]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	61da      	str	r2, [r3, #28]
      break;
 8005d38:	e023      	b.n	8005d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68b9      	ldr	r1, [r7, #8]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fa11 	bl	8006168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69da      	ldr	r2, [r3, #28]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69d9      	ldr	r1, [r3, #28]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	021a      	lsls	r2, r3, #8
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	61da      	str	r2, [r3, #28]
      break;
 8005d7a:	e002      	b.n	8005d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a37      	ldr	r2, [pc, #220]	@ (8005ed4 <TIM_Base_SetConfig+0xf0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00f      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e02:	d00b      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a34      	ldr	r2, [pc, #208]	@ (8005ed8 <TIM_Base_SetConfig+0xf4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a33      	ldr	r2, [pc, #204]	@ (8005edc <TIM_Base_SetConfig+0xf8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_Base_SetConfig+0x38>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a32      	ldr	r2, [pc, #200]	@ (8005ee0 <TIM_Base_SetConfig+0xfc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d108      	bne.n	8005e2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a28      	ldr	r2, [pc, #160]	@ (8005ed4 <TIM_Base_SetConfig+0xf0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01b      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e3c:	d017      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a25      	ldr	r2, [pc, #148]	@ (8005ed8 <TIM_Base_SetConfig+0xf4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a24      	ldr	r2, [pc, #144]	@ (8005edc <TIM_Base_SetConfig+0xf8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00f      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a23      	ldr	r2, [pc, #140]	@ (8005ee0 <TIM_Base_SetConfig+0xfc>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a22      	ldr	r2, [pc, #136]	@ (8005ee4 <TIM_Base_SetConfig+0x100>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a21      	ldr	r2, [pc, #132]	@ (8005ee8 <TIM_Base_SetConfig+0x104>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_Base_SetConfig+0x8a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a20      	ldr	r2, [pc, #128]	@ (8005eec <TIM_Base_SetConfig+0x108>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d108      	bne.n	8005e80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8005ed4 <TIM_Base_SetConfig+0xf0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d103      	bne.n	8005eae <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f043 0204 	orr.w	r2, r3, #4
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	601a      	str	r2, [r3, #0]
}
 8005ec6:	bf00      	nop
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40000800 	.word	0x40000800
 8005ee0:	40000c00 	.word	0x40000c00
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40014400 	.word	0x40014400
 8005eec:	40014800 	.word	0x40014800

08005ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	f023 0201 	bic.w	r2, r3, #1
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0303 	bic.w	r3, r3, #3
 8005f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f023 0302 	bic.w	r3, r3, #2
 8005f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb8 <TIM_OC1_SetConfig+0xc8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d10c      	bne.n	8005f66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0308 	bic.w	r3, r3, #8
 8005f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f023 0304 	bic.w	r3, r3, #4
 8005f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a13      	ldr	r2, [pc, #76]	@ (8005fb8 <TIM_OC1_SetConfig+0xc8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d111      	bne.n	8005f92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	621a      	str	r2, [r3, #32]
}
 8005fac:	bf00      	nop
 8005fae:	371c      	adds	r7, #28
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	40010000 	.word	0x40010000

08005fbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f023 0210 	bic.w	r2, r3, #16
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f023 0320 	bic.w	r3, r3, #32
 8006006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a1e      	ldr	r2, [pc, #120]	@ (8006090 <TIM_OC2_SetConfig+0xd4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d10d      	bne.n	8006038 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006036:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a15      	ldr	r2, [pc, #84]	@ (8006090 <TIM_OC2_SetConfig+0xd4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d113      	bne.n	8006068 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006046:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800604e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	621a      	str	r2, [r3, #32]
}
 8006082:	bf00      	nop
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	40010000 	.word	0x40010000

08006094 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0303 	bic.w	r3, r3, #3
 80060ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	021b      	lsls	r3, r3, #8
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006164 <TIM_OC3_SetConfig+0xd0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d10d      	bne.n	800610e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	021b      	lsls	r3, r3, #8
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800610c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a14      	ldr	r2, [pc, #80]	@ (8006164 <TIM_OC3_SetConfig+0xd0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d113      	bne.n	800613e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800611c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	621a      	str	r2, [r3, #32]
}
 8006158:	bf00      	nop
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	40010000 	.word	0x40010000

08006168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800619e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	031b      	lsls	r3, r3, #12
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a10      	ldr	r2, [pc, #64]	@ (8006204 <TIM_OC4_SetConfig+0x9c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d109      	bne.n	80061dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	019b      	lsls	r3, r3, #6
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	621a      	str	r2, [r3, #32]
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40010000 	.word	0x40010000

08006208 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f003 031f 	and.w	r3, r3, #31
 800621a:	2201      	movs	r2, #1
 800621c:	fa02 f303 	lsl.w	r3, r2, r3
 8006220:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a1a      	ldr	r2, [r3, #32]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	43db      	mvns	r3, r3
 800622a:	401a      	ands	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a1a      	ldr	r2, [r3, #32]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f003 031f 	and.w	r3, r3, #31
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	fa01 f303 	lsl.w	r3, r1, r3
 8006240:	431a      	orrs	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	621a      	str	r2, [r3, #32]
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
	...

08006254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006268:	2302      	movs	r3, #2
 800626a:	e050      	b.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1c      	ldr	r2, [pc, #112]	@ (800631c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d018      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b8:	d013      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a18      	ldr	r2, [pc, #96]	@ (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a16      	ldr	r2, [pc, #88]	@ (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a15      	ldr	r2, [pc, #84]	@ (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a13      	ldr	r2, [pc, #76]	@ (800632c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d10c      	bne.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40010000 	.word	0x40010000
 8006320:	40000400 	.word	0x40000400
 8006324:	40000800 	.word	0x40000800
 8006328:	40000c00 	.word	0x40000c00
 800632c:	40014000 	.word	0x40014000

08006330 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e042      	b.n	80063f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fd fc4e 	bl	8003c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2224      	movs	r2, #36	@ 0x24
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800639a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f82b 	bl	80063f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	695a      	ldr	r2, [r3, #20]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063fc:	b0c0      	sub	sp, #256	@ 0x100
 80063fe:	af00      	add	r7, sp, #0
 8006400:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006414:	68d9      	ldr	r1, [r3, #12]
 8006416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	ea40 0301 	orr.w	r3, r0, r1
 8006420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	431a      	orrs	r2, r3
 8006430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	431a      	orrs	r2, r3
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006450:	f021 010c 	bic.w	r1, r1, #12
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800645e:	430b      	orrs	r3, r1
 8006460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800646e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006472:	6999      	ldr	r1, [r3, #24]
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	ea40 0301 	orr.w	r3, r0, r1
 800647e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	4b8f      	ldr	r3, [pc, #572]	@ (80066c4 <UART_SetConfig+0x2cc>)
 8006488:	429a      	cmp	r2, r3
 800648a:	d005      	beq.n	8006498 <UART_SetConfig+0xa0>
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4b8d      	ldr	r3, [pc, #564]	@ (80066c8 <UART_SetConfig+0x2d0>)
 8006494:	429a      	cmp	r2, r3
 8006496:	d104      	bne.n	80064a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006498:	f7fe fc58 	bl	8004d4c <HAL_RCC_GetPCLK2Freq>
 800649c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80064a0:	e003      	b.n	80064aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064a2:	f7fe fc3f 	bl	8004d24 <HAL_RCC_GetPCLK1Freq>
 80064a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064b4:	f040 810c 	bne.w	80066d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064bc:	2200      	movs	r2, #0
 80064be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80064c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80064ca:	4622      	mov	r2, r4
 80064cc:	462b      	mov	r3, r5
 80064ce:	1891      	adds	r1, r2, r2
 80064d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80064d2:	415b      	adcs	r3, r3
 80064d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80064da:	4621      	mov	r1, r4
 80064dc:	eb12 0801 	adds.w	r8, r2, r1
 80064e0:	4629      	mov	r1, r5
 80064e2:	eb43 0901 	adc.w	r9, r3, r1
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064fa:	4690      	mov	r8, r2
 80064fc:	4699      	mov	r9, r3
 80064fe:	4623      	mov	r3, r4
 8006500:	eb18 0303 	adds.w	r3, r8, r3
 8006504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006508:	462b      	mov	r3, r5
 800650a:	eb49 0303 	adc.w	r3, r9, r3
 800650e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800651e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006522:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006526:	460b      	mov	r3, r1
 8006528:	18db      	adds	r3, r3, r3
 800652a:	653b      	str	r3, [r7, #80]	@ 0x50
 800652c:	4613      	mov	r3, r2
 800652e:	eb42 0303 	adc.w	r3, r2, r3
 8006532:	657b      	str	r3, [r7, #84]	@ 0x54
 8006534:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006538:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800653c:	f7fa f9d6 	bl	80008ec <__aeabi_uldivmod>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4b61      	ldr	r3, [pc, #388]	@ (80066cc <UART_SetConfig+0x2d4>)
 8006546:	fba3 2302 	umull	r2, r3, r3, r2
 800654a:	095b      	lsrs	r3, r3, #5
 800654c:	011c      	lsls	r4, r3, #4
 800654e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006552:	2200      	movs	r2, #0
 8006554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006558:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800655c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006560:	4642      	mov	r2, r8
 8006562:	464b      	mov	r3, r9
 8006564:	1891      	adds	r1, r2, r2
 8006566:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006568:	415b      	adcs	r3, r3
 800656a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800656c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006570:	4641      	mov	r1, r8
 8006572:	eb12 0a01 	adds.w	sl, r2, r1
 8006576:	4649      	mov	r1, r9
 8006578:	eb43 0b01 	adc.w	fp, r3, r1
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006588:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800658c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006590:	4692      	mov	sl, r2
 8006592:	469b      	mov	fp, r3
 8006594:	4643      	mov	r3, r8
 8006596:	eb1a 0303 	adds.w	r3, sl, r3
 800659a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800659e:	464b      	mov	r3, r9
 80065a0:	eb4b 0303 	adc.w	r3, fp, r3
 80065a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80065b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065bc:	460b      	mov	r3, r1
 80065be:	18db      	adds	r3, r3, r3
 80065c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80065c2:	4613      	mov	r3, r2
 80065c4:	eb42 0303 	adc.w	r3, r2, r3
 80065c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80065ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80065d2:	f7fa f98b 	bl	80008ec <__aeabi_uldivmod>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4611      	mov	r1, r2
 80065dc:	4b3b      	ldr	r3, [pc, #236]	@ (80066cc <UART_SetConfig+0x2d4>)
 80065de:	fba3 2301 	umull	r2, r3, r3, r1
 80065e2:	095b      	lsrs	r3, r3, #5
 80065e4:	2264      	movs	r2, #100	@ 0x64
 80065e6:	fb02 f303 	mul.w	r3, r2, r3
 80065ea:	1acb      	subs	r3, r1, r3
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80065f2:	4b36      	ldr	r3, [pc, #216]	@ (80066cc <UART_SetConfig+0x2d4>)
 80065f4:	fba3 2302 	umull	r2, r3, r3, r2
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006600:	441c      	add	r4, r3
 8006602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006606:	2200      	movs	r2, #0
 8006608:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800660c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006610:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006614:	4642      	mov	r2, r8
 8006616:	464b      	mov	r3, r9
 8006618:	1891      	adds	r1, r2, r2
 800661a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800661c:	415b      	adcs	r3, r3
 800661e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006624:	4641      	mov	r1, r8
 8006626:	1851      	adds	r1, r2, r1
 8006628:	6339      	str	r1, [r7, #48]	@ 0x30
 800662a:	4649      	mov	r1, r9
 800662c:	414b      	adcs	r3, r1
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	f04f 0300 	mov.w	r3, #0
 8006638:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800663c:	4659      	mov	r1, fp
 800663e:	00cb      	lsls	r3, r1, #3
 8006640:	4651      	mov	r1, sl
 8006642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006646:	4651      	mov	r1, sl
 8006648:	00ca      	lsls	r2, r1, #3
 800664a:	4610      	mov	r0, r2
 800664c:	4619      	mov	r1, r3
 800664e:	4603      	mov	r3, r0
 8006650:	4642      	mov	r2, r8
 8006652:	189b      	adds	r3, r3, r2
 8006654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006658:	464b      	mov	r3, r9
 800665a:	460a      	mov	r2, r1
 800665c:	eb42 0303 	adc.w	r3, r2, r3
 8006660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006670:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006678:	460b      	mov	r3, r1
 800667a:	18db      	adds	r3, r3, r3
 800667c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800667e:	4613      	mov	r3, r2
 8006680:	eb42 0303 	adc.w	r3, r2, r3
 8006684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800668a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800668e:	f7fa f92d 	bl	80008ec <__aeabi_uldivmod>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	4b0d      	ldr	r3, [pc, #52]	@ (80066cc <UART_SetConfig+0x2d4>)
 8006698:	fba3 1302 	umull	r1, r3, r3, r2
 800669c:	095b      	lsrs	r3, r3, #5
 800669e:	2164      	movs	r1, #100	@ 0x64
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	3332      	adds	r3, #50	@ 0x32
 80066aa:	4a08      	ldr	r2, [pc, #32]	@ (80066cc <UART_SetConfig+0x2d4>)
 80066ac:	fba2 2303 	umull	r2, r3, r2, r3
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	f003 0207 	and.w	r2, r3, #7
 80066b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4422      	add	r2, r4
 80066be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066c0:	e106      	b.n	80068d0 <UART_SetConfig+0x4d8>
 80066c2:	bf00      	nop
 80066c4:	40011000 	.word	0x40011000
 80066c8:	40011400 	.word	0x40011400
 80066cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066d4:	2200      	movs	r2, #0
 80066d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80066de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80066e2:	4642      	mov	r2, r8
 80066e4:	464b      	mov	r3, r9
 80066e6:	1891      	adds	r1, r2, r2
 80066e8:	6239      	str	r1, [r7, #32]
 80066ea:	415b      	adcs	r3, r3
 80066ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80066ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066f2:	4641      	mov	r1, r8
 80066f4:	1854      	adds	r4, r2, r1
 80066f6:	4649      	mov	r1, r9
 80066f8:	eb43 0501 	adc.w	r5, r3, r1
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	00eb      	lsls	r3, r5, #3
 8006706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800670a:	00e2      	lsls	r2, r4, #3
 800670c:	4614      	mov	r4, r2
 800670e:	461d      	mov	r5, r3
 8006710:	4643      	mov	r3, r8
 8006712:	18e3      	adds	r3, r4, r3
 8006714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006718:	464b      	mov	r3, r9
 800671a:	eb45 0303 	adc.w	r3, r5, r3
 800671e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800672e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006732:	f04f 0200 	mov.w	r2, #0
 8006736:	f04f 0300 	mov.w	r3, #0
 800673a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800673e:	4629      	mov	r1, r5
 8006740:	008b      	lsls	r3, r1, #2
 8006742:	4621      	mov	r1, r4
 8006744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006748:	4621      	mov	r1, r4
 800674a:	008a      	lsls	r2, r1, #2
 800674c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006750:	f7fa f8cc 	bl	80008ec <__aeabi_uldivmod>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4b60      	ldr	r3, [pc, #384]	@ (80068dc <UART_SetConfig+0x4e4>)
 800675a:	fba3 2302 	umull	r2, r3, r3, r2
 800675e:	095b      	lsrs	r3, r3, #5
 8006760:	011c      	lsls	r4, r3, #4
 8006762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006766:	2200      	movs	r2, #0
 8006768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800676c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006770:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006774:	4642      	mov	r2, r8
 8006776:	464b      	mov	r3, r9
 8006778:	1891      	adds	r1, r2, r2
 800677a:	61b9      	str	r1, [r7, #24]
 800677c:	415b      	adcs	r3, r3
 800677e:	61fb      	str	r3, [r7, #28]
 8006780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006784:	4641      	mov	r1, r8
 8006786:	1851      	adds	r1, r2, r1
 8006788:	6139      	str	r1, [r7, #16]
 800678a:	4649      	mov	r1, r9
 800678c:	414b      	adcs	r3, r1
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800679c:	4659      	mov	r1, fp
 800679e:	00cb      	lsls	r3, r1, #3
 80067a0:	4651      	mov	r1, sl
 80067a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067a6:	4651      	mov	r1, sl
 80067a8:	00ca      	lsls	r2, r1, #3
 80067aa:	4610      	mov	r0, r2
 80067ac:	4619      	mov	r1, r3
 80067ae:	4603      	mov	r3, r0
 80067b0:	4642      	mov	r2, r8
 80067b2:	189b      	adds	r3, r3, r2
 80067b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067b8:	464b      	mov	r3, r9
 80067ba:	460a      	mov	r2, r1
 80067bc:	eb42 0303 	adc.w	r3, r2, r3
 80067c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	f04f 0300 	mov.w	r3, #0
 80067d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80067dc:	4649      	mov	r1, r9
 80067de:	008b      	lsls	r3, r1, #2
 80067e0:	4641      	mov	r1, r8
 80067e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067e6:	4641      	mov	r1, r8
 80067e8:	008a      	lsls	r2, r1, #2
 80067ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80067ee:	f7fa f87d 	bl	80008ec <__aeabi_uldivmod>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4611      	mov	r1, r2
 80067f8:	4b38      	ldr	r3, [pc, #224]	@ (80068dc <UART_SetConfig+0x4e4>)
 80067fa:	fba3 2301 	umull	r2, r3, r3, r1
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	2264      	movs	r2, #100	@ 0x64
 8006802:	fb02 f303 	mul.w	r3, r2, r3
 8006806:	1acb      	subs	r3, r1, r3
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	3332      	adds	r3, #50	@ 0x32
 800680c:	4a33      	ldr	r2, [pc, #204]	@ (80068dc <UART_SetConfig+0x4e4>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006818:	441c      	add	r4, r3
 800681a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800681e:	2200      	movs	r2, #0
 8006820:	673b      	str	r3, [r7, #112]	@ 0x70
 8006822:	677a      	str	r2, [r7, #116]	@ 0x74
 8006824:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006828:	4642      	mov	r2, r8
 800682a:	464b      	mov	r3, r9
 800682c:	1891      	adds	r1, r2, r2
 800682e:	60b9      	str	r1, [r7, #8]
 8006830:	415b      	adcs	r3, r3
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006838:	4641      	mov	r1, r8
 800683a:	1851      	adds	r1, r2, r1
 800683c:	6039      	str	r1, [r7, #0]
 800683e:	4649      	mov	r1, r9
 8006840:	414b      	adcs	r3, r1
 8006842:	607b      	str	r3, [r7, #4]
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	f04f 0300 	mov.w	r3, #0
 800684c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006850:	4659      	mov	r1, fp
 8006852:	00cb      	lsls	r3, r1, #3
 8006854:	4651      	mov	r1, sl
 8006856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800685a:	4651      	mov	r1, sl
 800685c:	00ca      	lsls	r2, r1, #3
 800685e:	4610      	mov	r0, r2
 8006860:	4619      	mov	r1, r3
 8006862:	4603      	mov	r3, r0
 8006864:	4642      	mov	r2, r8
 8006866:	189b      	adds	r3, r3, r2
 8006868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800686a:	464b      	mov	r3, r9
 800686c:	460a      	mov	r2, r1
 800686e:	eb42 0303 	adc.w	r3, r2, r3
 8006872:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	663b      	str	r3, [r7, #96]	@ 0x60
 800687e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	f04f 0300 	mov.w	r3, #0
 8006888:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800688c:	4649      	mov	r1, r9
 800688e:	008b      	lsls	r3, r1, #2
 8006890:	4641      	mov	r1, r8
 8006892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006896:	4641      	mov	r1, r8
 8006898:	008a      	lsls	r2, r1, #2
 800689a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800689e:	f7fa f825 	bl	80008ec <__aeabi_uldivmod>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4b0d      	ldr	r3, [pc, #52]	@ (80068dc <UART_SetConfig+0x4e4>)
 80068a8:	fba3 1302 	umull	r1, r3, r3, r2
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	2164      	movs	r1, #100	@ 0x64
 80068b0:	fb01 f303 	mul.w	r3, r1, r3
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	3332      	adds	r3, #50	@ 0x32
 80068ba:	4a08      	ldr	r2, [pc, #32]	@ (80068dc <UART_SetConfig+0x4e4>)
 80068bc:	fba2 2303 	umull	r2, r3, r2, r3
 80068c0:	095b      	lsrs	r3, r3, #5
 80068c2:	f003 020f 	and.w	r2, r3, #15
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4422      	add	r2, r4
 80068ce:	609a      	str	r2, [r3, #8]
}
 80068d0:	bf00      	nop
 80068d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80068d6:	46bd      	mov	sp, r7
 80068d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068dc:	51eb851f 	.word	0x51eb851f

080068e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80068e4:	4904      	ldr	r1, [pc, #16]	@ (80068f8 <MX_FATFS_Init+0x18>)
 80068e6:	4805      	ldr	r0, [pc, #20]	@ (80068fc <MX_FATFS_Init+0x1c>)
 80068e8:	f003 fbe6 	bl	800a0b8 <FATFS_LinkDriver>
 80068ec:	4603      	mov	r3, r0
 80068ee:	461a      	mov	r2, r3
 80068f0:	4b03      	ldr	r3, [pc, #12]	@ (8006900 <MX_FATFS_Init+0x20>)
 80068f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80068f4:	bf00      	nop
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20007084 	.word	0x20007084
 80068fc:	200000cc 	.word	0x200000cc
 8006900:	20007080 	.word	0x20007080

08006904 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006908:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800690a:	4618      	mov	r0, r3
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	4618      	mov	r0, r3
 8006922:	f000 f9d7 	bl	8006cd4 <USER_SPI_initialize>
 8006926:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fab5 	bl	8006eac <USER_SPI_status>
 8006942:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	60b9      	str	r1, [r7, #8]
 8006954:	607a      	str	r2, [r7, #4]
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800695c:	7bf8      	ldrb	r0, [r7, #15]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	68b9      	ldr	r1, [r7, #8]
 8006964:	f000 fab8 	bl	8006ed8 <USER_SPI_read>
 8006968:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
 800697e:	4603      	mov	r3, r0
 8006980:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006982:	7bf8      	ldrb	r0, [r7, #15]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	68b9      	ldr	r1, [r7, #8]
 800698a:	f000 fb0b 	bl	8006fa4 <USER_SPI_write>
 800698e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	603a      	str	r2, [r7, #0]
 80069a2:	71fb      	strb	r3, [r7, #7]
 80069a4:	460b      	mov	r3, r1
 80069a6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80069a8:	79b9      	ldrb	r1, [r7, #6]
 80069aa:	79fb      	ldrb	r3, [r7, #7]
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fb74 	bl	800709c <USER_SPI_ioctl>
 80069b4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
	...

080069c0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80069c8:	f7fd fa84 	bl	8003ed4 <HAL_GetTick>
 80069cc:	4603      	mov	r3, r0
 80069ce:	4a04      	ldr	r2, [pc, #16]	@ (80069e0 <SPI_Timer_On+0x20>)
 80069d0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80069d2:	4a04      	ldr	r2, [pc, #16]	@ (80069e4 <SPI_Timer_On+0x24>)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6013      	str	r3, [r2, #0]
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	2000708c 	.word	0x2000708c
 80069e4:	20007090 	.word	0x20007090

080069e8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80069ec:	f7fd fa72 	bl	8003ed4 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	4b06      	ldr	r3, [pc, #24]	@ (8006a0c <SPI_Timer_Status+0x24>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	1ad2      	subs	r2, r2, r3
 80069f8:	4b05      	ldr	r3, [pc, #20]	@ (8006a10 <SPI_Timer_Status+0x28>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	bf34      	ite	cc
 8006a00:	2301      	movcc	r3, #1
 8006a02:	2300      	movcs	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	2000708c 	.word	0x2000708c
 8006a10:	20007090 	.word	0x20007090

08006a14 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006a1e:	f107 020f 	add.w	r2, r7, #15
 8006a22:	1df9      	adds	r1, r7, #7
 8006a24:	2332      	movs	r3, #50	@ 0x32
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	2301      	movs	r3, #1
 8006a2a:	4804      	ldr	r0, [pc, #16]	@ (8006a3c <xchg_spi+0x28>)
 8006a2c:	f7fe fb6f 	bl	800510e <HAL_SPI_TransmitReceive>
    return rxDat;
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	200001a8 	.word	0x200001a8

08006a40 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006a40:	b590      	push	{r4, r7, lr}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	e00a      	b.n	8006a66 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	18d4      	adds	r4, r2, r3
 8006a56:	20ff      	movs	r0, #255	@ 0xff
 8006a58:	f7ff ffdc 	bl	8006a14 <xchg_spi>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3301      	adds	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d3f0      	bcc.n	8006a50 <rcvr_spi_multi+0x10>
	}
}
 8006a6e:	bf00      	nop
 8006a70:	bf00      	nop
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd90      	pop	{r4, r7, pc}

08006a78 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	4803      	ldr	r0, [pc, #12]	@ (8006a9c <xmit_spi_multi+0x24>)
 8006a8e:	f7fe f9fa 	bl	8004e86 <HAL_SPI_Transmit>
}
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	200001a8 	.word	0x200001a8

08006aa0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006aa8:	f7fd fa14 	bl	8003ed4 <HAL_GetTick>
 8006aac:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006ab2:	20ff      	movs	r0, #255	@ 0xff
 8006ab4:	f7ff ffae 	bl	8006a14 <xchg_spi>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	2bff      	cmp	r3, #255	@ 0xff
 8006ac0:	d007      	beq.n	8006ad2 <wait_ready+0x32>
 8006ac2:	f7fd fa07 	bl	8003ed4 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d8ef      	bhi.n	8006ab2 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	2bff      	cmp	r3, #255	@ 0xff
 8006ad6:	bf0c      	ite	eq
 8006ad8:	2301      	moveq	r3, #1
 8006ada:	2300      	movne	r3, #0
 8006adc:	b2db      	uxtb	r3, r3
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006aec:	2201      	movs	r2, #1
 8006aee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006af2:	4804      	ldr	r0, [pc, #16]	@ (8006b04 <despiselect+0x1c>)
 8006af4:	f7fd fccc 	bl	8004490 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006af8:	20ff      	movs	r0, #255	@ 0xff
 8006afa:	f7ff ff8b 	bl	8006a14 <xchg_spi>

}
 8006afe:	bf00      	nop
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	40020000 	.word	0x40020000

08006b08 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b12:	480a      	ldr	r0, [pc, #40]	@ (8006b3c <spiselect+0x34>)
 8006b14:	f7fd fcbc 	bl	8004490 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006b18:	20ff      	movs	r0, #255	@ 0xff
 8006b1a:	f7ff ff7b 	bl	8006a14 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006b1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006b22:	f7ff ffbd 	bl	8006aa0 <wait_ready>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <spiselect+0x28>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e002      	b.n	8006b36 <spiselect+0x2e>

	despiselect();
 8006b30:	f7ff ffda 	bl	8006ae8 <despiselect>
	return 0;	/* Timeout */
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	40020000 	.word	0x40020000

08006b40 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006b4a:	20c8      	movs	r0, #200	@ 0xc8
 8006b4c:	f7ff ff38 	bl	80069c0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006b50:	20ff      	movs	r0, #255	@ 0xff
 8006b52:	f7ff ff5f 	bl	8006a14 <xchg_spi>
 8006b56:	4603      	mov	r3, r0
 8006b58:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	2bff      	cmp	r3, #255	@ 0xff
 8006b5e:	d104      	bne.n	8006b6a <rcvr_datablock+0x2a>
 8006b60:	f7ff ff42 	bl	80069e8 <SPI_Timer_Status>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1f2      	bne.n	8006b50 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	2bfe      	cmp	r3, #254	@ 0xfe
 8006b6e:	d001      	beq.n	8006b74 <rcvr_datablock+0x34>
 8006b70:	2300      	movs	r3, #0
 8006b72:	e00a      	b.n	8006b8a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff ff62 	bl	8006a40 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006b7c:	20ff      	movs	r0, #255	@ 0xff
 8006b7e:	f7ff ff49 	bl	8006a14 <xchg_spi>
 8006b82:	20ff      	movs	r0, #255	@ 0xff
 8006b84:	f7ff ff46 	bl	8006a14 <xchg_spi>

	return 1;						/* Function succeeded */
 8006b88:	2301      	movs	r3, #1
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006b9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006ba2:	f7ff ff7d 	bl	8006aa0 <wait_ready>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <xmit_datablock+0x1e>
 8006bac:	2300      	movs	r3, #0
 8006bae:	e01e      	b.n	8006bee <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7ff ff2e 	bl	8006a14 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	2bfd      	cmp	r3, #253	@ 0xfd
 8006bbc:	d016      	beq.n	8006bec <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006bbe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff ff58 	bl	8006a78 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006bc8:	20ff      	movs	r0, #255	@ 0xff
 8006bca:	f7ff ff23 	bl	8006a14 <xchg_spi>
 8006bce:	20ff      	movs	r0, #255	@ 0xff
 8006bd0:	f7ff ff20 	bl	8006a14 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006bd4:	20ff      	movs	r0, #255	@ 0xff
 8006bd6:	f7ff ff1d 	bl	8006a14 <xchg_spi>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	f003 031f 	and.w	r3, r3, #31
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	d001      	beq.n	8006bec <xmit_datablock+0x5a>
 8006be8:	2300      	movs	r3, #0
 8006bea:	e000      	b.n	8006bee <xmit_datablock+0x5c>
	}
	return 1;
 8006bec:	2301      	movs	r3, #1
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	6039      	str	r1, [r7, #0]
 8006c00:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	da0e      	bge.n	8006c28 <send_cmd+0x32>
		cmd &= 0x7F;
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c10:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006c12:	2100      	movs	r1, #0
 8006c14:	2037      	movs	r0, #55	@ 0x37
 8006c16:	f7ff ffee 	bl	8006bf6 <send_cmd>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006c1e:	7bbb      	ldrb	r3, [r7, #14]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d901      	bls.n	8006c28 <send_cmd+0x32>
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	e051      	b.n	8006ccc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	2b0c      	cmp	r3, #12
 8006c2c:	d008      	beq.n	8006c40 <send_cmd+0x4a>
		despiselect();
 8006c2e:	f7ff ff5b 	bl	8006ae8 <despiselect>
		if (!spiselect()) return 0xFF;
 8006c32:	f7ff ff69 	bl	8006b08 <spiselect>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <send_cmd+0x4a>
 8006c3c:	23ff      	movs	r3, #255	@ 0xff
 8006c3e:	e045      	b.n	8006ccc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006c40:	79fb      	ldrb	r3, [r7, #7]
 8006c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff fee3 	bl	8006a14 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	0e1b      	lsrs	r3, r3, #24
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff fedd 	bl	8006a14 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	0c1b      	lsrs	r3, r3, #16
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff fed7 	bl	8006a14 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	0a1b      	lsrs	r3, r3, #8
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff fed1 	bl	8006a14 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff fecc 	bl	8006a14 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <send_cmd+0x94>
 8006c86:	2395      	movs	r3, #149	@ 0x95
 8006c88:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d101      	bne.n	8006c94 <send_cmd+0x9e>
 8006c90:	2387      	movs	r3, #135	@ 0x87
 8006c92:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff febc 	bl	8006a14 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	2b0c      	cmp	r3, #12
 8006ca0:	d102      	bne.n	8006ca8 <send_cmd+0xb2>
 8006ca2:	20ff      	movs	r0, #255	@ 0xff
 8006ca4:	f7ff feb6 	bl	8006a14 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006ca8:	230a      	movs	r3, #10
 8006caa:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006cac:	20ff      	movs	r0, #255	@ 0xff
 8006cae:	f7ff feb1 	bl	8006a14 <xchg_spi>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006cb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	da05      	bge.n	8006cca <send_cmd+0xd4>
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1f0      	bne.n	8006cac <send_cmd+0xb6>

	return res;							/* Return received response */
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006cd4:	b590      	push	{r4, r7, lr}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <USER_SPI_initialize+0x14>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0d6      	b.n	8006e96 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006ce8:	4b6d      	ldr	r3, [pc, #436]	@ (8006ea0 <USER_SPI_initialize+0x1cc>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <USER_SPI_initialize+0x2a>
 8006cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8006ea0 <USER_SPI_initialize+0x1cc>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	e0cb      	b.n	8006e96 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006cfe:	4b69      	ldr	r3, [pc, #420]	@ (8006ea4 <USER_SPI_initialize+0x1d0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006d08:	4b66      	ldr	r3, [pc, #408]	@ (8006ea4 <USER_SPI_initialize+0x1d0>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8006d10:	601a      	str	r2, [r3, #0]
	for (n = 30; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006d12:	231e      	movs	r3, #30
 8006d14:	73fb      	strb	r3, [r7, #15]
 8006d16:	e005      	b.n	8006d24 <USER_SPI_initialize+0x50>
 8006d18:	20ff      	movs	r0, #255	@ 0xff
 8006d1a:	f7ff fe7b 	bl	8006a14 <xchg_spi>
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	3b01      	subs	r3, #1
 8006d22:	73fb      	strb	r3, [r7, #15]
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1f6      	bne.n	8006d18 <USER_SPI_initialize+0x44>

	ty = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006d2e:	2100      	movs	r1, #0
 8006d30:	2000      	movs	r0, #0
 8006d32:	f7ff ff60 	bl	8006bf6 <send_cmd>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	f040 808b 	bne.w	8006e54 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006d3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006d42:	f7ff fe3d 	bl	80069c0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006d46:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8006d4a:	2008      	movs	r0, #8
 8006d4c:	f7ff ff53 	bl	8006bf6 <send_cmd>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d151      	bne.n	8006dfa <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
 8006d5a:	e00d      	b.n	8006d78 <USER_SPI_initialize+0xa4>
 8006d5c:	7bfc      	ldrb	r4, [r7, #15]
 8006d5e:	20ff      	movs	r0, #255	@ 0xff
 8006d60:	f7ff fe58 	bl	8006a14 <xchg_spi>
 8006d64:	4603      	mov	r3, r0
 8006d66:	461a      	mov	r2, r3
 8006d68:	f104 0310 	add.w	r3, r4, #16
 8006d6c:	443b      	add	r3, r7
 8006d6e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	3301      	adds	r3, #1
 8006d76:	73fb      	strb	r3, [r7, #15]
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d9ee      	bls.n	8006d5c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006d7e:	7abb      	ldrb	r3, [r7, #10]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d167      	bne.n	8006e54 <USER_SPI_initialize+0x180>
 8006d84:	7afb      	ldrb	r3, [r7, #11]
 8006d86:	2baa      	cmp	r3, #170	@ 0xaa
 8006d88:	d164      	bne.n	8006e54 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006d8a:	bf00      	nop
 8006d8c:	f7ff fe2c 	bl	80069e8 <SPI_Timer_Status>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d007      	beq.n	8006da6 <USER_SPI_initialize+0xd2>
 8006d96:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006d9a:	20a9      	movs	r0, #169	@ 0xa9
 8006d9c:	f7ff ff2b 	bl	8006bf6 <send_cmd>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1f2      	bne.n	8006d8c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006da6:	f7ff fe1f 	bl	80069e8 <SPI_Timer_Status>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d051      	beq.n	8006e54 <USER_SPI_initialize+0x180>
 8006db0:	2100      	movs	r1, #0
 8006db2:	203a      	movs	r0, #58	@ 0x3a
 8006db4:	f7ff ff1f 	bl	8006bf6 <send_cmd>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d14a      	bne.n	8006e54 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	73fb      	strb	r3, [r7, #15]
 8006dc2:	e00d      	b.n	8006de0 <USER_SPI_initialize+0x10c>
 8006dc4:	7bfc      	ldrb	r4, [r7, #15]
 8006dc6:	20ff      	movs	r0, #255	@ 0xff
 8006dc8:	f7ff fe24 	bl	8006a14 <xchg_spi>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f104 0310 	add.w	r3, r4, #16
 8006dd4:	443b      	add	r3, r7
 8006dd6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	73fb      	strb	r3, [r7, #15]
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d9ee      	bls.n	8006dc4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006de6:	7a3b      	ldrb	r3, [r7, #8]
 8006de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <USER_SPI_initialize+0x120>
 8006df0:	230c      	movs	r3, #12
 8006df2:	e000      	b.n	8006df6 <USER_SPI_initialize+0x122>
 8006df4:	2304      	movs	r3, #4
 8006df6:	737b      	strb	r3, [r7, #13]
 8006df8:	e02c      	b.n	8006e54 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	20a9      	movs	r0, #169	@ 0xa9
 8006dfe:	f7ff fefa 	bl	8006bf6 <send_cmd>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d804      	bhi.n	8006e12 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006e08:	2302      	movs	r3, #2
 8006e0a:	737b      	strb	r3, [r7, #13]
 8006e0c:	23a9      	movs	r3, #169	@ 0xa9
 8006e0e:	73bb      	strb	r3, [r7, #14]
 8006e10:	e003      	b.n	8006e1a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006e12:	2301      	movs	r3, #1
 8006e14:	737b      	strb	r3, [r7, #13]
 8006e16:	2301      	movs	r3, #1
 8006e18:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006e1a:	bf00      	nop
 8006e1c:	f7ff fde4 	bl	80069e8 <SPI_Timer_Status>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d007      	beq.n	8006e36 <USER_SPI_initialize+0x162>
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	2100      	movs	r1, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff fee3 	bl	8006bf6 <send_cmd>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1f2      	bne.n	8006e1c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006e36:	f7ff fdd7 	bl	80069e8 <SPI_Timer_Status>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d007      	beq.n	8006e50 <USER_SPI_initialize+0x17c>
 8006e40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006e44:	2010      	movs	r0, #16
 8006e46:	f7ff fed6 	bl	8006bf6 <send_cmd>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <USER_SPI_initialize+0x180>
				ty = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006e54:	4a14      	ldr	r2, [pc, #80]	@ (8006ea8 <USER_SPI_initialize+0x1d4>)
 8006e56:	7b7b      	ldrb	r3, [r7, #13]
 8006e58:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006e5a:	f7ff fe45 	bl	8006ae8 <despiselect>

	if (ty) {			/* OK */
 8006e5e:	7b7b      	ldrb	r3, [r7, #13]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d012      	beq.n	8006e8a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006e64:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea4 <USER_SPI_initialize+0x1d0>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <USER_SPI_initialize+0x1d0>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0208 	orr.w	r2, r2, #8
 8006e76:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006e78:	4b09      	ldr	r3, [pc, #36]	@ (8006ea0 <USER_SPI_initialize+0x1cc>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	f023 0301 	bic.w	r3, r3, #1
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	4b06      	ldr	r3, [pc, #24]	@ (8006ea0 <USER_SPI_initialize+0x1cc>)
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	e002      	b.n	8006e90 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006e8a:	4b05      	ldr	r3, [pc, #20]	@ (8006ea0 <USER_SPI_initialize+0x1cc>)
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006e90:	4b03      	ldr	r3, [pc, #12]	@ (8006ea0 <USER_SPI_initialize+0x1cc>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	b2db      	uxtb	r3, r3
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd90      	pop	{r4, r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	200000e0 	.word	0x200000e0
 8006ea4:	200001a8 	.word	0x200001a8
 8006ea8:	20007088 	.word	0x20007088

08006eac <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <USER_SPI_status+0x14>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e002      	b.n	8006ec6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006ec0:	4b04      	ldr	r3, [pc, #16]	@ (8006ed4 <USER_SPI_status+0x28>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	b2db      	uxtb	r3, r3
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	200000e0 	.word	0x200000e0

08006ed8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	607a      	str	r2, [r7, #4]
 8006ee2:	603b      	str	r3, [r7, #0]
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d102      	bne.n	8006ef4 <USER_SPI_read+0x1c>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <USER_SPI_read+0x20>
 8006ef4:	2304      	movs	r3, #4
 8006ef6:	e04d      	b.n	8006f94 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006ef8:	4b28      	ldr	r3, [pc, #160]	@ (8006f9c <USER_SPI_read+0xc4>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <USER_SPI_read+0x32>
 8006f06:	2303      	movs	r3, #3
 8006f08:	e044      	b.n	8006f94 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006f0a:	4b25      	ldr	r3, [pc, #148]	@ (8006fa0 <USER_SPI_read+0xc8>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d102      	bne.n	8006f1c <USER_SPI_read+0x44>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	025b      	lsls	r3, r3, #9
 8006f1a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d111      	bne.n	8006f46 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	2011      	movs	r0, #17
 8006f26:	f7ff fe66 	bl	8006bf6 <send_cmd>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d129      	bne.n	8006f84 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006f30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f34:	68b8      	ldr	r0, [r7, #8]
 8006f36:	f7ff fe03 	bl	8006b40 <rcvr_datablock>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d021      	beq.n	8006f84 <USER_SPI_read+0xac>
			count = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	e01e      	b.n	8006f84 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	2012      	movs	r0, #18
 8006f4a:	f7ff fe54 	bl	8006bf6 <send_cmd>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d117      	bne.n	8006f84 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006f54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f58:	68b8      	ldr	r0, [r7, #8]
 8006f5a:	f7ff fdf1 	bl	8006b40 <rcvr_datablock>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00a      	beq.n	8006f7a <USER_SPI_read+0xa2>
				buff += 512;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006f6a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	603b      	str	r3, [r7, #0]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1ed      	bne.n	8006f54 <USER_SPI_read+0x7c>
 8006f78:	e000      	b.n	8006f7c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006f7a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	200c      	movs	r0, #12
 8006f80:	f7ff fe39 	bl	8006bf6 <send_cmd>
		}
	}
	despiselect();
 8006f84:	f7ff fdb0 	bl	8006ae8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bf14      	ite	ne
 8006f8e:	2301      	movne	r3, #1
 8006f90:	2300      	moveq	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	200000e0 	.word	0x200000e0
 8006fa0:	20007088 	.word	0x20007088

08006fa4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	607a      	str	r2, [r7, #4]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d102      	bne.n	8006fc0 <USER_SPI_write+0x1c>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <USER_SPI_write+0x20>
 8006fc0:	2304      	movs	r3, #4
 8006fc2:	e063      	b.n	800708c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006fc4:	4b33      	ldr	r3, [pc, #204]	@ (8007094 <USER_SPI_write+0xf0>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <USER_SPI_write+0x32>
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e05a      	b.n	800708c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8007094 <USER_SPI_write+0xf0>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <USER_SPI_write+0x44>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e051      	b.n	800708c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8007098 <USER_SPI_write+0xf4>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	f003 0308 	and.w	r3, r3, #8
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d102      	bne.n	8006ffa <USER_SPI_write+0x56>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	025b      	lsls	r3, r3, #9
 8006ff8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d110      	bne.n	8007022 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	2018      	movs	r0, #24
 8007004:	f7ff fdf7 	bl	8006bf6 <send_cmd>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d136      	bne.n	800707c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800700e:	21fe      	movs	r1, #254	@ 0xfe
 8007010:	68b8      	ldr	r0, [r7, #8]
 8007012:	f7ff fdbe 	bl	8006b92 <xmit_datablock>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d02f      	beq.n	800707c <USER_SPI_write+0xd8>
			count = 0;
 800701c:	2300      	movs	r3, #0
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	e02c      	b.n	800707c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007022:	4b1d      	ldr	r3, [pc, #116]	@ (8007098 <USER_SPI_write+0xf4>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	f003 0306 	and.w	r3, r3, #6
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <USER_SPI_write+0x92>
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	2097      	movs	r0, #151	@ 0x97
 8007032:	f7ff fde0 	bl	8006bf6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007036:	6879      	ldr	r1, [r7, #4]
 8007038:	2019      	movs	r0, #25
 800703a:	f7ff fddc 	bl	8006bf6 <send_cmd>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d11b      	bne.n	800707c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007044:	21fc      	movs	r1, #252	@ 0xfc
 8007046:	68b8      	ldr	r0, [r7, #8]
 8007048:	f7ff fda3 	bl	8006b92 <xmit_datablock>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <USER_SPI_write+0xc4>
				buff += 512;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007058:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	3b01      	subs	r3, #1
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1ee      	bne.n	8007044 <USER_SPI_write+0xa0>
 8007066:	e000      	b.n	800706a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007068:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800706a:	21fd      	movs	r1, #253	@ 0xfd
 800706c:	2000      	movs	r0, #0
 800706e:	f7ff fd90 	bl	8006b92 <xmit_datablock>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <USER_SPI_write+0xd8>
 8007078:	2301      	movs	r3, #1
 800707a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800707c:	f7ff fd34 	bl	8006ae8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	bf14      	ite	ne
 8007086:	2301      	movne	r3, #1
 8007088:	2300      	moveq	r3, #0
 800708a:	b2db      	uxtb	r3, r3
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	200000e0 	.word	0x200000e0
 8007098:	20007088 	.word	0x20007088

0800709c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08c      	sub	sp, #48	@ 0x30
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4603      	mov	r3, r0
 80070a4:	603a      	str	r2, [r7, #0]
 80070a6:	71fb      	strb	r3, [r7, #7]
 80070a8:	460b      	mov	r3, r1
 80070aa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80070ac:	79fb      	ldrb	r3, [r7, #7]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <USER_SPI_ioctl+0x1a>
 80070b2:	2304      	movs	r3, #4
 80070b4:	e15a      	b.n	800736c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80070b6:	4baf      	ldr	r3, [pc, #700]	@ (8007374 <USER_SPI_ioctl+0x2d8>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <USER_SPI_ioctl+0x2c>
 80070c4:	2303      	movs	r3, #3
 80070c6:	e151      	b.n	800736c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80070ce:	79bb      	ldrb	r3, [r7, #6]
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	f200 8136 	bhi.w	8007342 <USER_SPI_ioctl+0x2a6>
 80070d6:	a201      	add	r2, pc, #4	@ (adr r2, 80070dc <USER_SPI_ioctl+0x40>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	080070f1 	.word	0x080070f1
 80070e0:	08007105 	.word	0x08007105
 80070e4:	08007343 	.word	0x08007343
 80070e8:	080071b1 	.word	0x080071b1
 80070ec:	080072a7 	.word	0x080072a7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80070f0:	f7ff fd0a 	bl	8006b08 <spiselect>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 8127 	beq.w	800734a <USER_SPI_ioctl+0x2ae>
 80070fc:	2300      	movs	r3, #0
 80070fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007102:	e122      	b.n	800734a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007104:	2100      	movs	r1, #0
 8007106:	2009      	movs	r0, #9
 8007108:	f7ff fd75 	bl	8006bf6 <send_cmd>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	f040 811d 	bne.w	800734e <USER_SPI_ioctl+0x2b2>
 8007114:	f107 030c 	add.w	r3, r7, #12
 8007118:	2110      	movs	r1, #16
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff fd10 	bl	8006b40 <rcvr_datablock>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 8113 	beq.w	800734e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007128:	7b3b      	ldrb	r3, [r7, #12]
 800712a:	099b      	lsrs	r3, r3, #6
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b01      	cmp	r3, #1
 8007130:	d111      	bne.n	8007156 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007132:	7d7b      	ldrb	r3, [r7, #21]
 8007134:	461a      	mov	r2, r3
 8007136:	7d3b      	ldrb	r3, [r7, #20]
 8007138:	021b      	lsls	r3, r3, #8
 800713a:	4413      	add	r3, r2
 800713c:	461a      	mov	r2, r3
 800713e:	7cfb      	ldrb	r3, [r7, #19]
 8007140:	041b      	lsls	r3, r3, #16
 8007142:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8007146:	4413      	add	r3, r2
 8007148:	3301      	adds	r3, #1
 800714a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	029a      	lsls	r2, r3, #10
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	e028      	b.n	80071a8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007156:	7c7b      	ldrb	r3, [r7, #17]
 8007158:	f003 030f 	and.w	r3, r3, #15
 800715c:	b2da      	uxtb	r2, r3
 800715e:	7dbb      	ldrb	r3, [r7, #22]
 8007160:	09db      	lsrs	r3, r3, #7
 8007162:	b2db      	uxtb	r3, r3
 8007164:	4413      	add	r3, r2
 8007166:	b2da      	uxtb	r2, r3
 8007168:	7d7b      	ldrb	r3, [r7, #21]
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f003 0306 	and.w	r3, r3, #6
 8007172:	b2db      	uxtb	r3, r3
 8007174:	4413      	add	r3, r2
 8007176:	b2db      	uxtb	r3, r3
 8007178:	3302      	adds	r3, #2
 800717a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800717e:	7d3b      	ldrb	r3, [r7, #20]
 8007180:	099b      	lsrs	r3, r3, #6
 8007182:	b2db      	uxtb	r3, r3
 8007184:	461a      	mov	r2, r3
 8007186:	7cfb      	ldrb	r3, [r7, #19]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	441a      	add	r2, r3
 800718c:	7cbb      	ldrb	r3, [r7, #18]
 800718e:	029b      	lsls	r3, r3, #10
 8007190:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007194:	4413      	add	r3, r2
 8007196:	3301      	adds	r3, #1
 8007198:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800719a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800719e:	3b09      	subs	r3, #9
 80071a0:	69fa      	ldr	r2, [r7, #28]
 80071a2:	409a      	lsls	r2, r3
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80071ae:	e0ce      	b.n	800734e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80071b0:	4b71      	ldr	r3, [pc, #452]	@ (8007378 <USER_SPI_ioctl+0x2dc>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d031      	beq.n	8007220 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80071bc:	2100      	movs	r1, #0
 80071be:	208d      	movs	r0, #141	@ 0x8d
 80071c0:	f7ff fd19 	bl	8006bf6 <send_cmd>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f040 80c3 	bne.w	8007352 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80071cc:	20ff      	movs	r0, #255	@ 0xff
 80071ce:	f7ff fc21 	bl	8006a14 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80071d2:	f107 030c 	add.w	r3, r7, #12
 80071d6:	2110      	movs	r1, #16
 80071d8:	4618      	mov	r0, r3
 80071da:	f7ff fcb1 	bl	8006b40 <rcvr_datablock>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 80b6 	beq.w	8007352 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80071e6:	2330      	movs	r3, #48	@ 0x30
 80071e8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80071ec:	e007      	b.n	80071fe <USER_SPI_ioctl+0x162>
 80071ee:	20ff      	movs	r0, #255	@ 0xff
 80071f0:	f7ff fc10 	bl	8006a14 <xchg_spi>
 80071f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071f8:	3b01      	subs	r3, #1
 80071fa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80071fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f3      	bne.n	80071ee <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007206:	7dbb      	ldrb	r3, [r7, #22]
 8007208:	091b      	lsrs	r3, r3, #4
 800720a:	b2db      	uxtb	r3, r3
 800720c:	461a      	mov	r2, r3
 800720e:	2310      	movs	r3, #16
 8007210:	fa03 f202 	lsl.w	r2, r3, r2
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800721e:	e098      	b.n	8007352 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007220:	2100      	movs	r1, #0
 8007222:	2009      	movs	r0, #9
 8007224:	f7ff fce7 	bl	8006bf6 <send_cmd>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	f040 8091 	bne.w	8007352 <USER_SPI_ioctl+0x2b6>
 8007230:	f107 030c 	add.w	r3, r7, #12
 8007234:	2110      	movs	r1, #16
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff fc82 	bl	8006b40 <rcvr_datablock>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 8087 	beq.w	8007352 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007244:	4b4c      	ldr	r3, [pc, #304]	@ (8007378 <USER_SPI_ioctl+0x2dc>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d012      	beq.n	8007276 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007250:	7dbb      	ldrb	r3, [r7, #22]
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007258:	7dfa      	ldrb	r2, [r7, #23]
 800725a:	09d2      	lsrs	r2, r2, #7
 800725c:	b2d2      	uxtb	r2, r2
 800725e:	4413      	add	r3, r2
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	7e7b      	ldrb	r3, [r7, #25]
 8007264:	099b      	lsrs	r3, r3, #6
 8007266:	b2db      	uxtb	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	fa02 f303 	lsl.w	r3, r2, r3
 800726e:	461a      	mov	r2, r3
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	e013      	b.n	800729e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007276:	7dbb      	ldrb	r3, [r7, #22]
 8007278:	109b      	asrs	r3, r3, #2
 800727a:	b29b      	uxth	r3, r3
 800727c:	f003 031f 	and.w	r3, r3, #31
 8007280:	3301      	adds	r3, #1
 8007282:	7dfa      	ldrb	r2, [r7, #23]
 8007284:	00d2      	lsls	r2, r2, #3
 8007286:	f002 0218 	and.w	r2, r2, #24
 800728a:	7df9      	ldrb	r1, [r7, #23]
 800728c:	0949      	lsrs	r1, r1, #5
 800728e:	b2c9      	uxtb	r1, r1
 8007290:	440a      	add	r2, r1
 8007292:	3201      	adds	r2, #1
 8007294:	fb02 f303 	mul.w	r3, r2, r3
 8007298:	461a      	mov	r2, r3
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80072a4:	e055      	b.n	8007352 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80072a6:	4b34      	ldr	r3, [pc, #208]	@ (8007378 <USER_SPI_ioctl+0x2dc>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	f003 0306 	and.w	r3, r3, #6
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d051      	beq.n	8007356 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80072b2:	f107 020c 	add.w	r2, r7, #12
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	210b      	movs	r1, #11
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff feee 	bl	800709c <USER_SPI_ioctl>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d149      	bne.n	800735a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80072c6:	7b3b      	ldrb	r3, [r7, #12]
 80072c8:	099b      	lsrs	r3, r3, #6
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d104      	bne.n	80072da <USER_SPI_ioctl+0x23e>
 80072d0:	7dbb      	ldrb	r3, [r7, #22]
 80072d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d041      	beq.n	800735e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	623b      	str	r3, [r7, #32]
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80072ea:	4b23      	ldr	r3, [pc, #140]	@ (8007378 <USER_SPI_ioctl+0x2dc>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d105      	bne.n	8007302 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80072f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f8:	025b      	lsls	r3, r3, #9
 80072fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fe:	025b      	lsls	r3, r3, #9
 8007300:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007302:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007304:	2020      	movs	r0, #32
 8007306:	f7ff fc76 	bl	8006bf6 <send_cmd>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d128      	bne.n	8007362 <USER_SPI_ioctl+0x2c6>
 8007310:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007312:	2021      	movs	r0, #33	@ 0x21
 8007314:	f7ff fc6f 	bl	8006bf6 <send_cmd>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d121      	bne.n	8007362 <USER_SPI_ioctl+0x2c6>
 800731e:	2100      	movs	r1, #0
 8007320:	2026      	movs	r0, #38	@ 0x26
 8007322:	f7ff fc68 	bl	8006bf6 <send_cmd>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d11a      	bne.n	8007362 <USER_SPI_ioctl+0x2c6>
 800732c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007330:	f7ff fbb6 	bl	8006aa0 <wait_ready>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d013      	beq.n	8007362 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800733a:	2300      	movs	r3, #0
 800733c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007340:	e00f      	b.n	8007362 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007342:	2304      	movs	r3, #4
 8007344:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007348:	e00c      	b.n	8007364 <USER_SPI_ioctl+0x2c8>
		break;
 800734a:	bf00      	nop
 800734c:	e00a      	b.n	8007364 <USER_SPI_ioctl+0x2c8>
		break;
 800734e:	bf00      	nop
 8007350:	e008      	b.n	8007364 <USER_SPI_ioctl+0x2c8>
		break;
 8007352:	bf00      	nop
 8007354:	e006      	b.n	8007364 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007356:	bf00      	nop
 8007358:	e004      	b.n	8007364 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800735a:	bf00      	nop
 800735c:	e002      	b.n	8007364 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800735e:	bf00      	nop
 8007360:	e000      	b.n	8007364 <USER_SPI_ioctl+0x2c8>
		break;
 8007362:	bf00      	nop
	}

	despiselect();
 8007364:	f7ff fbc0 	bl	8006ae8 <despiselect>

	return res;
 8007368:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800736c:	4618      	mov	r0, r3
 800736e:	3730      	adds	r7, #48	@ 0x30
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	200000e0 	.word	0x200000e0
 8007378:	20007088 	.word	0x20007088

0800737c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	4603      	mov	r3, r0
 8007384:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007386:	79fb      	ldrb	r3, [r7, #7]
 8007388:	4a08      	ldr	r2, [pc, #32]	@ (80073ac <disk_status+0x30>)
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	79fa      	ldrb	r2, [r7, #7]
 8007394:	4905      	ldr	r1, [pc, #20]	@ (80073ac <disk_status+0x30>)
 8007396:	440a      	add	r2, r1
 8007398:	7a12      	ldrb	r2, [r2, #8]
 800739a:	4610      	mov	r0, r2
 800739c:	4798      	blx	r3
 800739e:	4603      	mov	r3, r0
 80073a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	200072bc 	.word	0x200072bc

080073b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	4603      	mov	r3, r0
 80073b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	4a0e      	ldr	r2, [pc, #56]	@ (80073fc <disk_initialize+0x4c>)
 80073c2:	5cd3      	ldrb	r3, [r2, r3]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d114      	bne.n	80073f2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	4a0c      	ldr	r2, [pc, #48]	@ (80073fc <disk_initialize+0x4c>)
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	79fa      	ldrb	r2, [r7, #7]
 80073d6:	4909      	ldr	r1, [pc, #36]	@ (80073fc <disk_initialize+0x4c>)
 80073d8:	440a      	add	r2, r1
 80073da:	7a12      	ldrb	r2, [r2, #8]
 80073dc:	4610      	mov	r0, r2
 80073de:	4798      	blx	r3
 80073e0:	4603      	mov	r3, r0
 80073e2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d103      	bne.n	80073f2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80073ea:	79fb      	ldrb	r3, [r7, #7]
 80073ec:	4a03      	ldr	r2, [pc, #12]	@ (80073fc <disk_initialize+0x4c>)
 80073ee:	2101      	movs	r1, #1
 80073f0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	200072bc 	.word	0x200072bc

08007400 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007400:	b590      	push	{r4, r7, lr}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	607a      	str	r2, [r7, #4]
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	4603      	mov	r3, r0
 800740e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	4a0a      	ldr	r2, [pc, #40]	@ (800743c <disk_read+0x3c>)
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	689c      	ldr	r4, [r3, #8]
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	4a07      	ldr	r2, [pc, #28]	@ (800743c <disk_read+0x3c>)
 8007420:	4413      	add	r3, r2
 8007422:	7a18      	ldrb	r0, [r3, #8]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	68b9      	ldr	r1, [r7, #8]
 800742a:	47a0      	blx	r4
 800742c:	4603      	mov	r3, r0
 800742e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
}
 8007432:	4618      	mov	r0, r3
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	bd90      	pop	{r4, r7, pc}
 800743a:	bf00      	nop
 800743c:	200072bc 	.word	0x200072bc

08007440 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	607a      	str	r2, [r7, #4]
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	4603      	mov	r3, r0
 800744e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	4a0a      	ldr	r2, [pc, #40]	@ (800747c <disk_write+0x3c>)
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	68dc      	ldr	r4, [r3, #12]
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	4a07      	ldr	r2, [pc, #28]	@ (800747c <disk_write+0x3c>)
 8007460:	4413      	add	r3, r2
 8007462:	7a18      	ldrb	r0, [r3, #8]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	47a0      	blx	r4
 800746c:	4603      	mov	r3, r0
 800746e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007470:	7dfb      	ldrb	r3, [r7, #23]
}
 8007472:	4618      	mov	r0, r3
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	bd90      	pop	{r4, r7, pc}
 800747a:	bf00      	nop
 800747c:	200072bc 	.word	0x200072bc

08007480 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3301      	adds	r3, #1
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007490:	89fb      	ldrh	r3, [r7, #14]
 8007492:	021b      	lsls	r3, r3, #8
 8007494:	b21a      	sxth	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	b21b      	sxth	r3, r3
 800749c:	4313      	orrs	r3, r2
 800749e:	b21b      	sxth	r3, r3
 80074a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80074a2:	89fb      	ldrh	r3, [r7, #14]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3303      	adds	r3, #3
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	3202      	adds	r2, #2
 80074c8:	7812      	ldrb	r2, [r2, #0]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	021b      	lsls	r3, r3, #8
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	3201      	adds	r2, #1
 80074d6:	7812      	ldrb	r2, [r2, #0]
 80074d8:	4313      	orrs	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	7812      	ldrb	r2, [r2, #0]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80074e8:	68fb      	ldr	r3, [r7, #12]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	460b      	mov	r3, r1
 8007500:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	887a      	ldrh	r2, [r7, #2]
 800750a:	b2d2      	uxtb	r2, r2
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	887b      	ldrh	r3, [r7, #2]
 8007510:	0a1b      	lsrs	r3, r3, #8
 8007512:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	607a      	str	r2, [r7, #4]
 800751a:	887a      	ldrh	r2, [r7, #2]
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	701a      	strb	r2, [r3, #0]
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	b2d2      	uxtb	r2, r2
 8007540:	701a      	strb	r2, [r3, #0]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	0a1b      	lsrs	r3, r3, #8
 8007546:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	607a      	str	r2, [r7, #4]
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	b2d2      	uxtb	r2, r2
 8007552:	701a      	strb	r2, [r3, #0]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	0a1b      	lsrs	r3, r3, #8
 8007558:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	0a1b      	lsrs	r3, r3, #8
 800756a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	607a      	str	r2, [r7, #4]
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	b2d2      	uxtb	r2, r2
 8007576:	701a      	strb	r2, [r3, #0]
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00d      	beq.n	80075ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	1c53      	adds	r3, r2, #1
 80075a2:	613b      	str	r3, [r7, #16]
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	1c59      	adds	r1, r3, #1
 80075a8:	6179      	str	r1, [r7, #20]
 80075aa:	7812      	ldrb	r2, [r2, #0]
 80075ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	607b      	str	r3, [r7, #4]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1f1      	bne.n	800759e <mem_cpy+0x1a>
	}
}
 80075ba:	bf00      	nop
 80075bc:	371c      	adds	r7, #28
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80075c6:	b480      	push	{r7}
 80075c8:	b087      	sub	sp, #28
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	617a      	str	r2, [r7, #20]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3b01      	subs	r3, #1
 80075e6:	607b      	str	r3, [r7, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1f3      	bne.n	80075d6 <mem_set+0x10>
}
 80075ee:	bf00      	nop
 80075f0:	bf00      	nop
 80075f2:	371c      	adds	r7, #28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80075fc:	b480      	push	{r7}
 80075fe:	b089      	sub	sp, #36	@ 0x24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	61fa      	str	r2, [r7, #28]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	4619      	mov	r1, r3
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	61ba      	str	r2, [r7, #24]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	1acb      	subs	r3, r1, r3
 8007628:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3b01      	subs	r3, #1
 800762e:	607b      	str	r3, [r7, #4]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <mem_cmp+0x40>
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d0eb      	beq.n	8007614 <mem_cmp+0x18>

	return r;
 800763c:	697b      	ldr	r3, [r7, #20]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3724      	adds	r7, #36	@ 0x24
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007654:	e002      	b.n	800765c <chk_chr+0x12>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3301      	adds	r3, #1
 800765a:	607b      	str	r3, [r7, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <chk_chr+0x26>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	461a      	mov	r2, r3
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	4293      	cmp	r3, r2
 800766e:	d1f2      	bne.n	8007656 <chk_chr+0xc>
	return *str;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	781b      	ldrb	r3, [r3, #0]
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800768a:	2300      	movs	r3, #0
 800768c:	60bb      	str	r3, [r7, #8]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	e029      	b.n	80076e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007694:	4a27      	ldr	r2, [pc, #156]	@ (8007734 <chk_lock+0xb4>)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	4413      	add	r3, r2
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d01d      	beq.n	80076de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076a2:	4a24      	ldr	r2, [pc, #144]	@ (8007734 <chk_lock+0xb4>)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	4413      	add	r3, r2
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d116      	bne.n	80076e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80076b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007734 <chk_lock+0xb4>)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	011b      	lsls	r3, r3, #4
 80076ba:	4413      	add	r3, r2
 80076bc:	3304      	adds	r3, #4
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d10c      	bne.n	80076e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80076c8:	4a1a      	ldr	r2, [pc, #104]	@ (8007734 <chk_lock+0xb4>)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	4413      	add	r3, r2
 80076d0:	3308      	adds	r3, #8
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80076d8:	429a      	cmp	r2, r3
 80076da:	d102      	bne.n	80076e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80076dc:	e007      	b.n	80076ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80076de:	2301      	movs	r3, #1
 80076e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3301      	adds	r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d9d2      	bls.n	8007694 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d109      	bne.n	8007708 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d102      	bne.n	8007700 <chk_lock+0x80>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d101      	bne.n	8007704 <chk_lock+0x84>
 8007700:	2300      	movs	r3, #0
 8007702:	e010      	b.n	8007726 <chk_lock+0xa6>
 8007704:	2312      	movs	r3, #18
 8007706:	e00e      	b.n	8007726 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d108      	bne.n	8007720 <chk_lock+0xa0>
 800770e:	4a09      	ldr	r2, [pc, #36]	@ (8007734 <chk_lock+0xb4>)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	4413      	add	r3, r2
 8007716:	330c      	adds	r3, #12
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800771e:	d101      	bne.n	8007724 <chk_lock+0xa4>
 8007720:	2310      	movs	r3, #16
 8007722:	e000      	b.n	8007726 <chk_lock+0xa6>
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	2000709c 	.word	0x2000709c

08007738 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800773e:	2300      	movs	r3, #0
 8007740:	607b      	str	r3, [r7, #4]
 8007742:	e002      	b.n	800774a <enq_lock+0x12>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3301      	adds	r3, #1
 8007748:	607b      	str	r3, [r7, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d806      	bhi.n	800775e <enq_lock+0x26>
 8007750:	4a09      	ldr	r2, [pc, #36]	@ (8007778 <enq_lock+0x40>)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	011b      	lsls	r3, r3, #4
 8007756:	4413      	add	r3, r2
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1f2      	bne.n	8007744 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b02      	cmp	r3, #2
 8007762:	bf14      	ite	ne
 8007764:	2301      	movne	r3, #1
 8007766:	2300      	moveq	r3, #0
 8007768:	b2db      	uxtb	r3, r3
}
 800776a:	4618      	mov	r0, r3
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	2000709c 	.word	0x2000709c

0800777c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	e01f      	b.n	80077cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800778c:	4a41      	ldr	r2, [pc, #260]	@ (8007894 <inc_lock+0x118>)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	4413      	add	r3, r2
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	429a      	cmp	r2, r3
 800779c:	d113      	bne.n	80077c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800779e:	4a3d      	ldr	r2, [pc, #244]	@ (8007894 <inc_lock+0x118>)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	4413      	add	r3, r2
 80077a6:	3304      	adds	r3, #4
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d109      	bne.n	80077c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80077b2:	4a38      	ldr	r2, [pc, #224]	@ (8007894 <inc_lock+0x118>)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	4413      	add	r3, r2
 80077ba:	3308      	adds	r3, #8
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d006      	beq.n	80077d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3301      	adds	r3, #1
 80077ca:	60fb      	str	r3, [r7, #12]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d9dc      	bls.n	800778c <inc_lock+0x10>
 80077d2:	e000      	b.n	80077d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80077d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d132      	bne.n	8007842 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80077dc:	2300      	movs	r3, #0
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	e002      	b.n	80077e8 <inc_lock+0x6c>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3301      	adds	r3, #1
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d806      	bhi.n	80077fc <inc_lock+0x80>
 80077ee:	4a29      	ldr	r2, [pc, #164]	@ (8007894 <inc_lock+0x118>)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	011b      	lsls	r3, r3, #4
 80077f4:	4413      	add	r3, r2
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1f2      	bne.n	80077e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d101      	bne.n	8007806 <inc_lock+0x8a>
 8007802:	2300      	movs	r3, #0
 8007804:	e040      	b.n	8007888 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	4922      	ldr	r1, [pc, #136]	@ (8007894 <inc_lock+0x118>)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	440b      	add	r3, r1
 8007812:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	491e      	ldr	r1, [pc, #120]	@ (8007894 <inc_lock+0x118>)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	011b      	lsls	r3, r3, #4
 800781e:	440b      	add	r3, r1
 8007820:	3304      	adds	r3, #4
 8007822:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	695a      	ldr	r2, [r3, #20]
 8007828:	491a      	ldr	r1, [pc, #104]	@ (8007894 <inc_lock+0x118>)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	011b      	lsls	r3, r3, #4
 800782e:	440b      	add	r3, r1
 8007830:	3308      	adds	r3, #8
 8007832:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007834:	4a17      	ldr	r2, [pc, #92]	@ (8007894 <inc_lock+0x118>)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	011b      	lsls	r3, r3, #4
 800783a:	4413      	add	r3, r2
 800783c:	330c      	adds	r3, #12
 800783e:	2200      	movs	r2, #0
 8007840:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d009      	beq.n	800785c <inc_lock+0xe0>
 8007848:	4a12      	ldr	r2, [pc, #72]	@ (8007894 <inc_lock+0x118>)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	4413      	add	r3, r2
 8007850:	330c      	adds	r3, #12
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <inc_lock+0xe0>
 8007858:	2300      	movs	r3, #0
 800785a:	e015      	b.n	8007888 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d108      	bne.n	8007874 <inc_lock+0xf8>
 8007862:	4a0c      	ldr	r2, [pc, #48]	@ (8007894 <inc_lock+0x118>)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	4413      	add	r3, r2
 800786a:	330c      	adds	r3, #12
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	3301      	adds	r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	e001      	b.n	8007878 <inc_lock+0xfc>
 8007874:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007878:	4906      	ldr	r1, [pc, #24]	@ (8007894 <inc_lock+0x118>)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	011b      	lsls	r3, r3, #4
 800787e:	440b      	add	r3, r1
 8007880:	330c      	adds	r3, #12
 8007882:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3301      	adds	r3, #1
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	2000709c 	.word	0x2000709c

08007898 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	e010      	b.n	80078c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80078a6:	4a0d      	ldr	r2, [pc, #52]	@ (80078dc <clear_lock+0x44>)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	011b      	lsls	r3, r3, #4
 80078ac:	4413      	add	r3, r2
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d105      	bne.n	80078c2 <clear_lock+0x2a>
 80078b6:	4a09      	ldr	r2, [pc, #36]	@ (80078dc <clear_lock+0x44>)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	4413      	add	r3, r2
 80078be:	2200      	movs	r2, #0
 80078c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3301      	adds	r3, #1
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d9eb      	bls.n	80078a6 <clear_lock+0xe>
	}
}
 80078ce:	bf00      	nop
 80078d0:	bf00      	nop
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	2000709c 	.word	0x2000709c

080078e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	78db      	ldrb	r3, [r3, #3]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d034      	beq.n	800795e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	7858      	ldrb	r0, [r3, #1]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007904:	2301      	movs	r3, #1
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	f7ff fd9a 	bl	8007440 <disk_write>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d002      	beq.n	8007918 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007912:	2301      	movs	r3, #1
 8007914:	73fb      	strb	r3, [r7, #15]
 8007916:	e022      	b.n	800795e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	1ad2      	subs	r2, r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	429a      	cmp	r2, r3
 800792c:	d217      	bcs.n	800795e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	789b      	ldrb	r3, [r3, #2]
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	e010      	b.n	8007958 <sync_window+0x78>
					wsect += fs->fsize;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	4413      	add	r3, r2
 800793e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	7858      	ldrb	r0, [r3, #1]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800794a:	2301      	movs	r3, #1
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	f7ff fd77 	bl	8007440 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	3b01      	subs	r3, #1
 8007956:	613b      	str	r3, [r7, #16]
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d8eb      	bhi.n	8007936 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800795e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d01b      	beq.n	80079b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff ffad 	bl	80078e0 <sync_window>
 8007986:	4603      	mov	r3, r0
 8007988:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d113      	bne.n	80079b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	7858      	ldrb	r0, [r3, #1]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800799a:	2301      	movs	r3, #1
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	f7ff fd2f 	bl	8007400 <disk_read>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d004      	beq.n	80079b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80079a8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	3b02      	subs	r3, #2
 80079d0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	3b02      	subs	r3, #2
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d301      	bcc.n	80079e2 <clust2sect+0x20>
 80079de:	2300      	movs	r3, #0
 80079e0:	e008      	b.n	80079f4 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	895b      	ldrh	r3, [r3, #10]
 80079e6:	461a      	mov	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	fb03 f202 	mul.w	r2, r3, r2
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f2:	4413      	add	r3, r2
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d904      	bls.n	8007a20 <get_fat+0x20>
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d302      	bcc.n	8007a26 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007a20:	2301      	movs	r3, #1
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	e08e      	b.n	8007b44 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007a26:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d061      	beq.n	8007af8 <get_fat+0xf8>
 8007a34:	2b03      	cmp	r3, #3
 8007a36:	dc7b      	bgt.n	8007b30 <get_fat+0x130>
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d002      	beq.n	8007a42 <get_fat+0x42>
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d041      	beq.n	8007ac4 <get_fat+0xc4>
 8007a40:	e076      	b.n	8007b30 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	0a5b      	lsrs	r3, r3, #9
 8007a58:	4413      	add	r3, r2
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6938      	ldr	r0, [r7, #16]
 8007a5e:	f7ff ff83 	bl	8007968 <move_window>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d166      	bne.n	8007b36 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	60fa      	str	r2, [r7, #12]
 8007a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4413      	add	r3, r2
 8007a76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007a7a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	0a5b      	lsrs	r3, r3, #9
 8007a84:	4413      	add	r3, r2
 8007a86:	4619      	mov	r1, r3
 8007a88:	6938      	ldr	r0, [r7, #16]
 8007a8a:	f7ff ff6d 	bl	8007968 <move_window>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d152      	bne.n	8007b3a <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007aa2:	021b      	lsls	r3, r3, #8
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <get_fat+0xba>
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	091b      	lsrs	r3, r3, #4
 8007ab8:	e002      	b.n	8007ac0 <get_fat+0xc0>
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ac0:	617b      	str	r3, [r7, #20]
			break;
 8007ac2:	e03f      	b.n	8007b44 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	0a1b      	lsrs	r3, r3, #8
 8007acc:	4413      	add	r3, r2
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6938      	ldr	r0, [r7, #16]
 8007ad2:	f7ff ff49 	bl	8007968 <move_window>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d130      	bne.n	8007b3e <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007aea:	4413      	add	r3, r2
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7ff fcc7 	bl	8007480 <ld_word>
 8007af2:	4603      	mov	r3, r0
 8007af4:	617b      	str	r3, [r7, #20]
			break;
 8007af6:	e025      	b.n	8007b44 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	09db      	lsrs	r3, r3, #7
 8007b00:	4413      	add	r3, r2
 8007b02:	4619      	mov	r1, r3
 8007b04:	6938      	ldr	r0, [r7, #16]
 8007b06:	f7ff ff2f 	bl	8007968 <move_window>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d118      	bne.n	8007b42 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007b1e:	4413      	add	r3, r2
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7ff fcc5 	bl	80074b0 <ld_dword>
 8007b26:	4603      	mov	r3, r0
 8007b28:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007b2c:	617b      	str	r3, [r7, #20]
			break;
 8007b2e:	e009      	b.n	8007b44 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007b30:	2301      	movs	r3, #1
 8007b32:	617b      	str	r3, [r7, #20]
 8007b34:	e006      	b.n	8007b44 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b36:	bf00      	nop
 8007b38:	e004      	b.n	8007b44 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b3a:	bf00      	nop
 8007b3c:	e002      	b.n	8007b44 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007b3e:	bf00      	nop
 8007b40:	e000      	b.n	8007b44 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b42:	bf00      	nop
		}
	}

	return val;
 8007b44:	697b      	ldr	r3, [r7, #20]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007b4e:	b590      	push	{r4, r7, lr}
 8007b50:	b089      	sub	sp, #36	@ 0x24
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	f240 80d9 	bls.w	8007d18 <put_fat+0x1ca>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	f080 80d3 	bcs.w	8007d18 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	f000 8096 	beq.w	8007ca8 <put_fat+0x15a>
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	f300 80cb 	bgt.w	8007d18 <put_fat+0x1ca>
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d002      	beq.n	8007b8c <put_fat+0x3e>
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d06e      	beq.n	8007c68 <put_fat+0x11a>
 8007b8a:	e0c5      	b.n	8007d18 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	61bb      	str	r3, [r7, #24]
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	085b      	lsrs	r3, r3, #1
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	4413      	add	r3, r2
 8007b98:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	0a5b      	lsrs	r3, r3, #9
 8007ba2:	4413      	add	r3, r2
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f7ff fede 	bl	8007968 <move_window>
 8007bac:	4603      	mov	r3, r0
 8007bae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007bb0:	7ffb      	ldrb	r3, [r7, #31]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f040 80a9 	bne.w	8007d0a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	1c59      	adds	r1, r3, #1
 8007bc2:	61b9      	str	r1, [r7, #24]
 8007bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc8:	4413      	add	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00d      	beq.n	8007bf2 <put_fat+0xa4>
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	b25b      	sxtb	r3, r3
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	b25a      	sxtb	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	b25b      	sxtb	r3, r3
 8007bea:	4313      	orrs	r3, r2
 8007bec:	b25b      	sxtb	r3, r3
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	e001      	b.n	8007bf6 <put_fat+0xa8>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	0a5b      	lsrs	r3, r3, #9
 8007c08:	4413      	add	r3, r2
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f7ff feab 	bl	8007968 <move_window>
 8007c12:	4603      	mov	r3, r0
 8007c14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c16:	7ffb      	ldrb	r3, [r7, #31]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d178      	bne.n	8007d0e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c28:	4413      	add	r3, r2
 8007c2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <put_fat+0xf0>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	091b      	lsrs	r3, r3, #4
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	e00e      	b.n	8007c5c <put_fat+0x10e>
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	b25b      	sxtb	r3, r3
 8007c44:	f023 030f 	bic.w	r3, r3, #15
 8007c48:	b25a      	sxtb	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	0a1b      	lsrs	r3, r3, #8
 8007c4e:	b25b      	sxtb	r3, r3
 8007c50:	f003 030f 	and.w	r3, r3, #15
 8007c54:	b25b      	sxtb	r3, r3
 8007c56:	4313      	orrs	r3, r2
 8007c58:	b25b      	sxtb	r3, r3
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2201      	movs	r2, #1
 8007c64:	70da      	strb	r2, [r3, #3]
			break;
 8007c66:	e057      	b.n	8007d18 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	0a1b      	lsrs	r3, r3, #8
 8007c70:	4413      	add	r3, r2
 8007c72:	4619      	mov	r1, r3
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f7ff fe77 	bl	8007968 <move_window>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c7e:	7ffb      	ldrb	r3, [r7, #31]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d146      	bne.n	8007d12 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	005b      	lsls	r3, r3, #1
 8007c8e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007c92:	4413      	add	r3, r2
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	b292      	uxth	r2, r2
 8007c98:	4611      	mov	r1, r2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7ff fc2b 	bl	80074f6 <st_word>
			fs->wflag = 1;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	70da      	strb	r2, [r3, #3]
			break;
 8007ca6:	e037      	b.n	8007d18 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	09db      	lsrs	r3, r3, #7
 8007cb0:	4413      	add	r3, r2
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f7ff fe57 	bl	8007968 <move_window>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007cbe:	7ffb      	ldrb	r3, [r7, #31]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d128      	bne.n	8007d16 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007cd8:	4413      	add	r3, r2
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7ff fbe8 	bl	80074b0 <ld_dword>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007ce6:	4323      	orrs	r3, r4
 8007ce8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007cf8:	4413      	add	r3, r2
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7ff fc15 	bl	800752c <st_dword>
			fs->wflag = 1;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	70da      	strb	r2, [r3, #3]
			break;
 8007d08:	e006      	b.n	8007d18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007d0a:	bf00      	nop
 8007d0c:	e004      	b.n	8007d18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007d0e:	bf00      	nop
 8007d10:	e002      	b.n	8007d18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007d12:	bf00      	nop
 8007d14:	e000      	b.n	8007d18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007d16:	bf00      	nop
		}
	}
	return res;
 8007d18:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3724      	adds	r7, #36	@ 0x24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd90      	pop	{r4, r7, pc}

08007d22 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b088      	sub	sp, #32
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d904      	bls.n	8007d48 <remove_chain+0x26>
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d301      	bcc.n	8007d4c <remove_chain+0x2a>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	e04b      	b.n	8007de4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00c      	beq.n	8007d6c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007d52:	f04f 32ff 	mov.w	r2, #4294967295
 8007d56:	6879      	ldr	r1, [r7, #4]
 8007d58:	69b8      	ldr	r0, [r7, #24]
 8007d5a:	f7ff fef8 	bl	8007b4e <put_fat>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007d62:	7ffb      	ldrb	r3, [r7, #31]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <remove_chain+0x4a>
 8007d68:	7ffb      	ldrb	r3, [r7, #31]
 8007d6a:	e03b      	b.n	8007de4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f7ff fe46 	bl	8007a00 <get_fat>
 8007d74:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d031      	beq.n	8007de0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <remove_chain+0x64>
 8007d82:	2302      	movs	r3, #2
 8007d84:	e02e      	b.n	8007de4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8c:	d101      	bne.n	8007d92 <remove_chain+0x70>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e028      	b.n	8007de4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007d92:	2200      	movs	r2, #0
 8007d94:	68b9      	ldr	r1, [r7, #8]
 8007d96:	69b8      	ldr	r0, [r7, #24]
 8007d98:	f7ff fed9 	bl	8007b4e <put_fat>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007da0:	7ffb      	ldrb	r3, [r7, #31]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <remove_chain+0x88>
 8007da6:	7ffb      	ldrb	r3, [r7, #31]
 8007da8:	e01c      	b.n	8007de4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	695a      	ldr	r2, [r3, #20]
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	3b02      	subs	r3, #2
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d20b      	bcs.n	8007dd0 <remove_chain+0xae>
			fs->free_clst++;
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	791b      	ldrb	r3, [r3, #4]
 8007dc6:	f043 0301 	orr.w	r3, r3, #1
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d3c6      	bcc.n	8007d6c <remove_chain+0x4a>
 8007dde:	e000      	b.n	8007de2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007de0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3720      	adds	r7, #32
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b088      	sub	sp, #32
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10d      	bne.n	8007e1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d004      	beq.n	8007e18 <create_chain+0x2c>
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d31b      	bcc.n	8007e50 <create_chain+0x64>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	61bb      	str	r3, [r7, #24]
 8007e1c:	e018      	b.n	8007e50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7ff fded 	bl	8007a00 <get_fat>
 8007e26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d801      	bhi.n	8007e32 <create_chain+0x46>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e070      	b.n	8007f14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e38:	d101      	bne.n	8007e3e <create_chain+0x52>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	e06a      	b.n	8007f14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d201      	bcs.n	8007e4c <create_chain+0x60>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	e063      	b.n	8007f14 <create_chain+0x128>
		scl = clst;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	3301      	adds	r3, #1
 8007e58:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d307      	bcc.n	8007e74 <create_chain+0x88>
				ncl = 2;
 8007e64:	2302      	movs	r3, #2
 8007e66:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007e68:	69fa      	ldr	r2, [r7, #28]
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d901      	bls.n	8007e74 <create_chain+0x88>
 8007e70:	2300      	movs	r3, #0
 8007e72:	e04f      	b.n	8007f14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007e74:	69f9      	ldr	r1, [r7, #28]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f7ff fdc2 	bl	8007a00 <get_fat>
 8007e7c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00e      	beq.n	8007ea2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d003      	beq.n	8007e92 <create_chain+0xa6>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e90:	d101      	bne.n	8007e96 <create_chain+0xaa>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	e03e      	b.n	8007f14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007e96:	69fa      	ldr	r2, [r7, #28]
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d1da      	bne.n	8007e54 <create_chain+0x68>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e038      	b.n	8007f14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007ea2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea8:	69f9      	ldr	r1, [r7, #28]
 8007eaa:	6938      	ldr	r0, [r7, #16]
 8007eac:	f7ff fe4f 	bl	8007b4e <put_fat>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <create_chain+0xe2>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d006      	beq.n	8007ece <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007ec0:	69fa      	ldr	r2, [r7, #28]
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6938      	ldr	r0, [r7, #16]
 8007ec6:	f7ff fe42 	bl	8007b4e <put_fat>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d116      	bne.n	8007f02 <create_chain+0x116>
		fs->last_clst = ncl;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	69fa      	ldr	r2, [r7, #28]
 8007ed8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	695a      	ldr	r2, [r3, #20]
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	3b02      	subs	r3, #2
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d804      	bhi.n	8007ef2 <create_chain+0x106>
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	1e5a      	subs	r2, r3, #1
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	791b      	ldrb	r3, [r3, #4]
 8007ef6:	f043 0301 	orr.w	r3, r3, #1
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	711a      	strb	r2, [r3, #4]
 8007f00:	e007      	b.n	8007f12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d102      	bne.n	8007f0e <create_chain+0x122>
 8007f08:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0c:	e000      	b.n	8007f10 <create_chain+0x124>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007f12:	69fb      	ldr	r3, [r7, #28]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3720      	adds	r7, #32
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f30:	3304      	adds	r3, #4
 8007f32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	0a5b      	lsrs	r3, r3, #9
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	8952      	ldrh	r2, [r2, #10]
 8007f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	1d1a      	adds	r2, r3, #4
 8007f46:	613a      	str	r2, [r7, #16]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <clmt_clust+0x3a>
 8007f52:	2300      	movs	r3, #0
 8007f54:	e010      	b.n	8007f78 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d307      	bcc.n	8007f6e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	3304      	adds	r3, #4
 8007f6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007f6c:	e7e9      	b.n	8007f42 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007f6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	4413      	add	r3, r2
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	371c      	adds	r7, #28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f9a:	d204      	bcs.n	8007fa6 <dir_sdi+0x22>
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	f003 031f 	and.w	r3, r3, #31
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <dir_sdi+0x26>
		return FR_INT_ERR;
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e063      	b.n	8008072 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d106      	bne.n	8007fca <dir_sdi+0x46>
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d902      	bls.n	8007fca <dir_sdi+0x46>
		clst = fs->dirbase;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10c      	bne.n	8007fea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	8912      	ldrh	r2, [r2, #8]
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d301      	bcc.n	8007fe0 <dir_sdi+0x5c>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	e048      	b.n	8008072 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	61da      	str	r2, [r3, #28]
 8007fe8:	e029      	b.n	800803e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	895b      	ldrh	r3, [r3, #10]
 8007fee:	025b      	lsls	r3, r3, #9
 8007ff0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007ff2:	e019      	b.n	8008028 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6979      	ldr	r1, [r7, #20]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7ff fd01 	bl	8007a00 <get_fat>
 8007ffe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008006:	d101      	bne.n	800800c <dir_sdi+0x88>
 8008008:	2301      	movs	r3, #1
 800800a:	e032      	b.n	8008072 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d904      	bls.n	800801c <dir_sdi+0x98>
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	429a      	cmp	r2, r3
 800801a:	d301      	bcc.n	8008020 <dir_sdi+0x9c>
 800801c:	2302      	movs	r3, #2
 800801e:	e028      	b.n	8008072 <dir_sdi+0xee>
			ofs -= csz;
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	429a      	cmp	r2, r3
 800802e:	d2e1      	bcs.n	8007ff4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008030:	6979      	ldr	r1, [r7, #20]
 8008032:	6938      	ldr	r0, [r7, #16]
 8008034:	f7ff fcc5 	bl	80079c2 <clust2sect>
 8008038:	4602      	mov	r2, r0
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <dir_sdi+0xcc>
 800804c:	2302      	movs	r3, #2
 800804e:	e010      	b.n	8008072 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	69da      	ldr	r2, [r3, #28]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	0a5b      	lsrs	r3, r3, #9
 8008058:	441a      	add	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806a:	441a      	add	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b086      	sub	sp, #24
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	3320      	adds	r3, #32
 8008090:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <dir_next+0x28>
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080a0:	d301      	bcc.n	80080a6 <dir_next+0x2c>
 80080a2:	2304      	movs	r3, #4
 80080a4:	e0aa      	b.n	80081fc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f040 8098 	bne.w	80081e2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	1c5a      	adds	r2, r3, #1
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10b      	bne.n	80080dc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	095b      	lsrs	r3, r3, #5
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	8912      	ldrh	r2, [r2, #8]
 80080cc:	4293      	cmp	r3, r2
 80080ce:	f0c0 8088 	bcc.w	80081e2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	61da      	str	r2, [r3, #28]
 80080d8:	2304      	movs	r3, #4
 80080da:	e08f      	b.n	80081fc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	0a5b      	lsrs	r3, r3, #9
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	8952      	ldrh	r2, [r2, #10]
 80080e4:	3a01      	subs	r2, #1
 80080e6:	4013      	ands	r3, r2
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d17a      	bne.n	80081e2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f7ff fc83 	bl	8007a00 <get_fat>
 80080fa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d801      	bhi.n	8008106 <dir_next+0x8c>
 8008102:	2302      	movs	r3, #2
 8008104:	e07a      	b.n	80081fc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810c:	d101      	bne.n	8008112 <dir_next+0x98>
 800810e:	2301      	movs	r3, #1
 8008110:	e074      	b.n	80081fc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	429a      	cmp	r2, r3
 800811a:	d358      	bcc.n	80081ce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d104      	bne.n	800812c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	61da      	str	r2, [r3, #28]
 8008128:	2304      	movs	r3, #4
 800812a:	e067      	b.n	80081fc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	4619      	mov	r1, r3
 8008134:	4610      	mov	r0, r2
 8008136:	f7ff fe59 	bl	8007dec <create_chain>
 800813a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <dir_next+0xcc>
 8008142:	2307      	movs	r3, #7
 8008144:	e05a      	b.n	80081fc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d101      	bne.n	8008150 <dir_next+0xd6>
 800814c:	2302      	movs	r3, #2
 800814e:	e055      	b.n	80081fc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008156:	d101      	bne.n	800815c <dir_next+0xe2>
 8008158:	2301      	movs	r3, #1
 800815a:	e04f      	b.n	80081fc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f7ff fbbf 	bl	80078e0 <sync_window>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <dir_next+0xf2>
 8008168:	2301      	movs	r3, #1
 800816a:	e047      	b.n	80081fc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	3334      	adds	r3, #52	@ 0x34
 8008170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008174:	2100      	movs	r1, #0
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff fa25 	bl	80075c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800817c:	2300      	movs	r3, #0
 800817e:	613b      	str	r3, [r7, #16]
 8008180:	6979      	ldr	r1, [r7, #20]
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f7ff fc1d 	bl	80079c2 <clust2sect>
 8008188:	4602      	mov	r2, r0
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	631a      	str	r2, [r3, #48]	@ 0x30
 800818e:	e012      	b.n	80081b6 <dir_next+0x13c>
						fs->wflag = 1;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f7ff fba2 	bl	80078e0 <sync_window>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <dir_next+0x12c>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e02a      	b.n	80081fc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	3301      	adds	r3, #1
 80081aa:	613b      	str	r3, [r7, #16]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	895b      	ldrh	r3, [r3, #10]
 80081ba:	461a      	mov	r2, r3
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4293      	cmp	r3, r2
 80081c0:	d3e6      	bcc.n	8008190 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	1ad2      	subs	r2, r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80081d4:	6979      	ldr	r1, [r7, #20]
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f7ff fbf3 	bl	80079c2 <clust2sect>
 80081dc:	4602      	mov	r2, r0
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f4:	441a      	add	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008214:	2100      	movs	r1, #0
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff feb4 	bl	8007f84 <dir_sdi>
 800821c:	4603      	mov	r3, r0
 800821e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d12b      	bne.n	800827e <dir_alloc+0x7a>
		n = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	4619      	mov	r1, r3
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff fb99 	bl	8007968 <move_window>
 8008236:	4603      	mov	r3, r0
 8008238:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800823a:	7dfb      	ldrb	r3, [r7, #23]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d11d      	bne.n	800827c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2be5      	cmp	r3, #229	@ 0xe5
 8008248:	d004      	beq.n	8008254 <dir_alloc+0x50>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d107      	bne.n	8008264 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	3301      	adds	r3, #1
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	429a      	cmp	r2, r3
 8008260:	d102      	bne.n	8008268 <dir_alloc+0x64>
 8008262:	e00c      	b.n	800827e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008264:	2300      	movs	r3, #0
 8008266:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008268:	2101      	movs	r1, #1
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7ff ff05 	bl	800807a <dir_next>
 8008270:	4603      	mov	r3, r0
 8008272:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008274:	7dfb      	ldrb	r3, [r7, #23]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0d7      	beq.n	800822a <dir_alloc+0x26>
 800827a:	e000      	b.n	800827e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800827c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800827e:	7dfb      	ldrb	r3, [r7, #23]
 8008280:	2b04      	cmp	r3, #4
 8008282:	d101      	bne.n	8008288 <dir_alloc+0x84>
 8008284:	2307      	movs	r3, #7
 8008286:	75fb      	strb	r3, [r7, #23]
	return res;
 8008288:	7dfb      	ldrb	r3, [r7, #23]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b084      	sub	sp, #16
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	331a      	adds	r3, #26
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7ff f8ed 	bl	8007480 <ld_word>
 80082a6:	4603      	mov	r3, r0
 80082a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d109      	bne.n	80082c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	3314      	adds	r3, #20
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff f8e2 	bl	8007480 <ld_word>
 80082bc:	4603      	mov	r3, r0
 80082be:	041b      	lsls	r3, r3, #16
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80082c6:	68fb      	ldr	r3, [r7, #12]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	331a      	adds	r3, #26
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	b292      	uxth	r2, r2
 80082e4:	4611      	mov	r1, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff f905 	bl	80074f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d109      	bne.n	8008308 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f103 0214 	add.w	r2, r3, #20
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	0c1b      	lsrs	r3, r3, #16
 80082fe:	b29b      	uxth	r3, r3
 8008300:	4619      	mov	r1, r3
 8008302:	4610      	mov	r0, r2
 8008304:	f7ff f8f7 	bl	80074f6 <st_word>
	}
}
 8008308:	bf00      	nop
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008310:	b590      	push	{r4, r7, lr}
 8008312:	b087      	sub	sp, #28
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	331a      	adds	r3, #26
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff f8ae 	bl	8007480 <ld_word>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <cmp_lfn+0x1e>
 800832a:	2300      	movs	r3, #0
 800832c:	e059      	b.n	80083e2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008336:	1e5a      	subs	r2, r3, #1
 8008338:	4613      	mov	r3, r2
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008344:	2301      	movs	r3, #1
 8008346:	81fb      	strh	r3, [r7, #14]
 8008348:	2300      	movs	r3, #0
 800834a:	613b      	str	r3, [r7, #16]
 800834c:	e033      	b.n	80083b6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800834e:	4a27      	ldr	r2, [pc, #156]	@ (80083ec <cmp_lfn+0xdc>)
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	4413      	add	r3, r2
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	4413      	add	r3, r2
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff f88f 	bl	8007480 <ld_word>
 8008362:	4603      	mov	r3, r0
 8008364:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008366:	89fb      	ldrh	r3, [r7, #14]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d01a      	beq.n	80083a2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2bfe      	cmp	r3, #254	@ 0xfe
 8008370:	d812      	bhi.n	8008398 <cmp_lfn+0x88>
 8008372:	89bb      	ldrh	r3, [r7, #12]
 8008374:	4618      	mov	r0, r3
 8008376:	f001 feeb 	bl	800a150 <ff_wtoupper>
 800837a:	4603      	mov	r3, r0
 800837c:	461c      	mov	r4, r3
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	617a      	str	r2, [r7, #20]
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	4413      	add	r3, r2
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	4618      	mov	r0, r3
 800838e:	f001 fedf 	bl	800a150 <ff_wtoupper>
 8008392:	4603      	mov	r3, r0
 8008394:	429c      	cmp	r4, r3
 8008396:	d001      	beq.n	800839c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008398:	2300      	movs	r3, #0
 800839a:	e022      	b.n	80083e2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800839c:	89bb      	ldrh	r3, [r7, #12]
 800839e:	81fb      	strh	r3, [r7, #14]
 80083a0:	e006      	b.n	80083b0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80083a2:	89bb      	ldrh	r3, [r7, #12]
 80083a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d001      	beq.n	80083b0 <cmp_lfn+0xa0>
 80083ac:	2300      	movs	r3, #0
 80083ae:	e018      	b.n	80083e2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	3301      	adds	r3, #1
 80083b4:	613b      	str	r3, [r7, #16]
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	2b0c      	cmp	r3, #12
 80083ba:	d9c8      	bls.n	800834e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <cmp_lfn+0xd0>
 80083c8:	89fb      	ldrh	r3, [r7, #14]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d008      	beq.n	80083e0 <cmp_lfn+0xd0>
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	4413      	add	r3, r2
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <cmp_lfn+0xd0>
 80083dc:	2300      	movs	r3, #0
 80083de:	e000      	b.n	80083e2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80083e0:	2301      	movs	r3, #1
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	371c      	adds	r7, #28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd90      	pop	{r4, r7, pc}
 80083ea:	bf00      	nop
 80083ec:	0801c278 	.word	0x0801c278

080083f0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	4611      	mov	r1, r2
 80083fc:	461a      	mov	r2, r3
 80083fe:	460b      	mov	r3, r1
 8008400:	71fb      	strb	r3, [r7, #7]
 8008402:	4613      	mov	r3, r2
 8008404:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	330d      	adds	r3, #13
 800840a:	79ba      	ldrb	r2, [r7, #6]
 800840c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	330b      	adds	r3, #11
 8008412:	220f      	movs	r2, #15
 8008414:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	330c      	adds	r3, #12
 800841a:	2200      	movs	r2, #0
 800841c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	331a      	adds	r3, #26
 8008422:	2100      	movs	r1, #0
 8008424:	4618      	mov	r0, r3
 8008426:	f7ff f866 	bl	80074f6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800842a:	79fb      	ldrb	r3, [r7, #7]
 800842c:	1e5a      	subs	r2, r3, #1
 800842e:	4613      	mov	r3, r2
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800843a:	2300      	movs	r3, #0
 800843c:	82fb      	strh	r3, [r7, #22]
 800843e:	2300      	movs	r3, #0
 8008440:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008442:	8afb      	ldrh	r3, [r7, #22]
 8008444:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008448:	4293      	cmp	r3, r2
 800844a:	d007      	beq.n	800845c <put_lfn+0x6c>
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	1c5a      	adds	r2, r3, #1
 8008450:	61fa      	str	r2, [r7, #28]
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800845c:	4a17      	ldr	r2, [pc, #92]	@ (80084bc <put_lfn+0xcc>)
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	4413      	add	r3, r2
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	4413      	add	r3, r2
 800846a:	8afa      	ldrh	r2, [r7, #22]
 800846c:	4611      	mov	r1, r2
 800846e:	4618      	mov	r0, r3
 8008470:	f7ff f841 	bl	80074f6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008474:	8afb      	ldrh	r3, [r7, #22]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d102      	bne.n	8008480 <put_lfn+0x90>
 800847a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800847e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	3301      	adds	r3, #1
 8008484:	61bb      	str	r3, [r7, #24]
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	2b0c      	cmp	r3, #12
 800848a:	d9da      	bls.n	8008442 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800848c:	8afb      	ldrh	r3, [r7, #22]
 800848e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008492:	4293      	cmp	r3, r2
 8008494:	d006      	beq.n	80084a4 <put_lfn+0xb4>
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	4413      	add	r3, r2
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d103      	bne.n	80084ac <put_lfn+0xbc>
 80084a4:	79fb      	ldrb	r3, [r7, #7]
 80084a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084aa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	79fa      	ldrb	r2, [r7, #7]
 80084b0:	701a      	strb	r2, [r3, #0]
}
 80084b2:	bf00      	nop
 80084b4:	3720      	adds	r7, #32
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	0801c278 	.word	0x0801c278

080084c0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08c      	sub	sp, #48	@ 0x30
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80084ce:	220b      	movs	r2, #11
 80084d0:	68b9      	ldr	r1, [r7, #8]
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f7ff f856 	bl	8007584 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b05      	cmp	r3, #5
 80084dc:	d92b      	bls.n	8008536 <gen_numname+0x76>
		sr = seq;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80084e2:	e022      	b.n	800852a <gen_numname+0x6a>
			wc = *lfn++;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	1c9a      	adds	r2, r3, #2
 80084e8:	607a      	str	r2, [r7, #4]
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80084ee:	2300      	movs	r3, #0
 80084f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084f2:	e017      	b.n	8008524 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	005a      	lsls	r2, r3, #1
 80084f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	4413      	add	r3, r2
 8008500:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008502:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008504:	085b      	lsrs	r3, r3, #1
 8008506:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d005      	beq.n	800851e <gen_numname+0x5e>
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8008518:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800851c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800851e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008520:	3301      	adds	r3, #1
 8008522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008526:	2b0f      	cmp	r3, #15
 8008528:	d9e4      	bls.n	80084f4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1d8      	bne.n	80084e4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008536:	2307      	movs	r3, #7
 8008538:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	f003 030f 	and.w	r3, r3, #15
 8008542:	b2db      	uxtb	r3, r3
 8008544:	3330      	adds	r3, #48	@ 0x30
 8008546:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800854a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800854e:	2b39      	cmp	r3, #57	@ 0x39
 8008550:	d904      	bls.n	800855c <gen_numname+0x9c>
 8008552:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008556:	3307      	adds	r3, #7
 8008558:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800855c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855e:	1e5a      	subs	r2, r3, #1
 8008560:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008562:	3330      	adds	r3, #48	@ 0x30
 8008564:	443b      	add	r3, r7
 8008566:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800856a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	091b      	lsrs	r3, r3, #4
 8008572:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1df      	bne.n	800853a <gen_numname+0x7a>
	ns[i] = '~';
 800857a:	f107 0214 	add.w	r2, r7, #20
 800857e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008580:	4413      	add	r3, r2
 8008582:	227e      	movs	r2, #126	@ 0x7e
 8008584:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008586:	2300      	movs	r3, #0
 8008588:	627b      	str	r3, [r7, #36]	@ 0x24
 800858a:	e002      	b.n	8008592 <gen_numname+0xd2>
 800858c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858e:	3301      	adds	r3, #1
 8008590:	627b      	str	r3, [r7, #36]	@ 0x24
 8008592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008596:	429a      	cmp	r2, r3
 8008598:	d205      	bcs.n	80085a6 <gen_numname+0xe6>
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859e:	4413      	add	r3, r2
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	2b20      	cmp	r3, #32
 80085a4:	d1f2      	bne.n	800858c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80085a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a8:	2b07      	cmp	r3, #7
 80085aa:	d807      	bhi.n	80085bc <gen_numname+0xfc>
 80085ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ae:	1c5a      	adds	r2, r3, #1
 80085b0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80085b2:	3330      	adds	r3, #48	@ 0x30
 80085b4:	443b      	add	r3, r7
 80085b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80085ba:	e000      	b.n	80085be <gen_numname+0xfe>
 80085bc:	2120      	movs	r1, #32
 80085be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	4413      	add	r3, r2
 80085c8:	460a      	mov	r2, r1
 80085ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80085cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ce:	2b07      	cmp	r3, #7
 80085d0:	d9e9      	bls.n	80085a6 <gen_numname+0xe6>
}
 80085d2:	bf00      	nop
 80085d4:	bf00      	nop
 80085d6:	3730      	adds	r7, #48	@ 0x30
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80085e8:	230b      	movs	r3, #11
 80085ea:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	0852      	lsrs	r2, r2, #1
 80085f2:	01db      	lsls	r3, r3, #7
 80085f4:	4313      	orrs	r3, r2
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	1c59      	adds	r1, r3, #1
 80085fc:	6079      	str	r1, [r7, #4]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	4413      	add	r3, r2
 8008602:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	3b01      	subs	r3, #1
 8008608:	60bb      	str	r3, [r7, #8]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1ed      	bne.n	80085ec <sum_sfn+0x10>
	return sum;
 8008610:	7bfb      	ldrb	r3, [r7, #15]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b086      	sub	sp, #24
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800862c:	2100      	movs	r1, #0
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff fca8 	bl	8007f84 <dir_sdi>
 8008634:	4603      	mov	r3, r0
 8008636:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008638:	7dfb      	ldrb	r3, [r7, #23]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <dir_find+0x24>
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	e0a9      	b.n	8008796 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008642:	23ff      	movs	r3, #255	@ 0xff
 8008644:	753b      	strb	r3, [r7, #20]
 8008646:	7d3b      	ldrb	r3, [r7, #20]
 8008648:	757b      	strb	r3, [r7, #21]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f04f 32ff 	mov.w	r2, #4294967295
 8008650:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	4619      	mov	r1, r3
 8008658:	6938      	ldr	r0, [r7, #16]
 800865a:	f7ff f985 	bl	8007968 <move_window>
 800865e:	4603      	mov	r3, r0
 8008660:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f040 8090 	bne.w	800878a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008672:	7dbb      	ldrb	r3, [r7, #22]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <dir_find+0x60>
 8008678:	2304      	movs	r3, #4
 800867a:	75fb      	strb	r3, [r7, #23]
 800867c:	e08a      	b.n	8008794 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	330b      	adds	r3, #11
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800868a:	73fb      	strb	r3, [r7, #15]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	7bfa      	ldrb	r2, [r7, #15]
 8008690:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008692:	7dbb      	ldrb	r3, [r7, #22]
 8008694:	2be5      	cmp	r3, #229	@ 0xe5
 8008696:	d007      	beq.n	80086a8 <dir_find+0x8a>
 8008698:	7bfb      	ldrb	r3, [r7, #15]
 800869a:	f003 0308 	and.w	r3, r3, #8
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d009      	beq.n	80086b6 <dir_find+0x98>
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	2b0f      	cmp	r3, #15
 80086a6:	d006      	beq.n	80086b6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80086a8:	23ff      	movs	r3, #255	@ 0xff
 80086aa:	757b      	strb	r3, [r7, #21]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f04f 32ff 	mov.w	r2, #4294967295
 80086b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80086b4:	e05e      	b.n	8008774 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	2b0f      	cmp	r3, #15
 80086ba:	d136      	bne.n	800872a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80086c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d154      	bne.n	8008774 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80086ca:	7dbb      	ldrb	r3, [r7, #22]
 80086cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00d      	beq.n	80086f0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	7b5b      	ldrb	r3, [r3, #13]
 80086da:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80086dc:	7dbb      	ldrb	r3, [r7, #22]
 80086de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086e2:	75bb      	strb	r3, [r7, #22]
 80086e4:	7dbb      	ldrb	r3, [r7, #22]
 80086e6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	695a      	ldr	r2, [r3, #20]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80086f0:	7dba      	ldrb	r2, [r7, #22]
 80086f2:	7d7b      	ldrb	r3, [r7, #21]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d115      	bne.n	8008724 <dir_find+0x106>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a1b      	ldr	r3, [r3, #32]
 80086fc:	330d      	adds	r3, #13
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	7d3a      	ldrb	r2, [r7, #20]
 8008702:	429a      	cmp	r2, r3
 8008704:	d10e      	bne.n	8008724 <dir_find+0x106>
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	68da      	ldr	r2, [r3, #12]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	4619      	mov	r1, r3
 8008710:	4610      	mov	r0, r2
 8008712:	f7ff fdfd 	bl	8008310 <cmp_lfn>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <dir_find+0x106>
 800871c:	7d7b      	ldrb	r3, [r7, #21]
 800871e:	3b01      	subs	r3, #1
 8008720:	b2db      	uxtb	r3, r3
 8008722:	e000      	b.n	8008726 <dir_find+0x108>
 8008724:	23ff      	movs	r3, #255	@ 0xff
 8008726:	757b      	strb	r3, [r7, #21]
 8008728:	e024      	b.n	8008774 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800872a:	7d7b      	ldrb	r3, [r7, #21]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d109      	bne.n	8008744 <dir_find+0x126>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	4618      	mov	r0, r3
 8008736:	f7ff ff51 	bl	80085dc <sum_sfn>
 800873a:	4603      	mov	r3, r0
 800873c:	461a      	mov	r2, r3
 800873e:	7d3b      	ldrb	r3, [r7, #20]
 8008740:	4293      	cmp	r3, r2
 8008742:	d024      	beq.n	800878e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10a      	bne.n	8008768 <dir_find+0x14a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a18      	ldr	r0, [r3, #32]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	3324      	adds	r3, #36	@ 0x24
 800875a:	220b      	movs	r2, #11
 800875c:	4619      	mov	r1, r3
 800875e:	f7fe ff4d 	bl	80075fc <mem_cmp>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d014      	beq.n	8008792 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008768:	23ff      	movs	r3, #255	@ 0xff
 800876a:	757b      	strb	r3, [r7, #21]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f04f 32ff 	mov.w	r2, #4294967295
 8008772:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008774:	2100      	movs	r1, #0
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7ff fc7f 	bl	800807a <dir_next>
 800877c:	4603      	mov	r3, r0
 800877e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	2b00      	cmp	r3, #0
 8008784:	f43f af65 	beq.w	8008652 <dir_find+0x34>
 8008788:	e004      	b.n	8008794 <dir_find+0x176>
		if (res != FR_OK) break;
 800878a:	bf00      	nop
 800878c:	e002      	b.n	8008794 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800878e:	bf00      	nop
 8008790:	e000      	b.n	8008794 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008792:	bf00      	nop

	return res;
 8008794:	7dfb      	ldrb	r3, [r7, #23]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08c      	sub	sp, #48	@ 0x30
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80087b4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <dir_register+0x20>
 80087bc:	2306      	movs	r3, #6
 80087be:	e0e0      	b.n	8008982 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80087c0:	2300      	movs	r3, #0
 80087c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80087c4:	e002      	b.n	80087cc <dir_register+0x2c>
 80087c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c8:	3301      	adds	r3, #1
 80087ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	68da      	ldr	r2, [r3, #12]
 80087d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	4413      	add	r3, r2
 80087d6:	881b      	ldrh	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1f4      	bne.n	80087c6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80087e2:	f107 030c 	add.w	r3, r7, #12
 80087e6:	220c      	movs	r2, #12
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fe fecb 	bl	8007584 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80087ee:	7dfb      	ldrb	r3, [r7, #23]
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d032      	beq.n	800885e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2240      	movs	r2, #64	@ 0x40
 80087fc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008800:	2301      	movs	r3, #1
 8008802:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008804:	e016      	b.n	8008834 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	68da      	ldr	r2, [r3, #12]
 8008810:	f107 010c 	add.w	r1, r7, #12
 8008814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008816:	f7ff fe53 	bl	80084c0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff feff 	bl	800861e <dir_find>
 8008820:	4603      	mov	r3, r0
 8008822:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008826:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800882a:	2b00      	cmp	r3, #0
 800882c:	d106      	bne.n	800883c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800882e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008830:	3301      	adds	r3, #1
 8008832:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008836:	2b63      	cmp	r3, #99	@ 0x63
 8008838:	d9e5      	bls.n	8008806 <dir_register+0x66>
 800883a:	e000      	b.n	800883e <dir_register+0x9e>
			if (res != FR_OK) break;
 800883c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800883e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008840:	2b64      	cmp	r3, #100	@ 0x64
 8008842:	d101      	bne.n	8008848 <dir_register+0xa8>
 8008844:	2307      	movs	r3, #7
 8008846:	e09c      	b.n	8008982 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008848:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800884c:	2b04      	cmp	r3, #4
 800884e:	d002      	beq.n	8008856 <dir_register+0xb6>
 8008850:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008854:	e095      	b.n	8008982 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008856:	7dfa      	ldrb	r2, [r7, #23]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800885e:	7dfb      	ldrb	r3, [r7, #23]
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b00      	cmp	r3, #0
 8008866:	d007      	beq.n	8008878 <dir_register+0xd8>
 8008868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886a:	330c      	adds	r3, #12
 800886c:	4a47      	ldr	r2, [pc, #284]	@ (800898c <dir_register+0x1ec>)
 800886e:	fba2 2303 	umull	r2, r3, r2, r3
 8008872:	089b      	lsrs	r3, r3, #2
 8008874:	3301      	adds	r3, #1
 8008876:	e000      	b.n	800887a <dir_register+0xda>
 8008878:	2301      	movs	r3, #1
 800887a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800887c:	6a39      	ldr	r1, [r7, #32]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7ff fcc0 	bl	8008204 <dir_alloc>
 8008884:	4603      	mov	r3, r0
 8008886:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800888a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800888e:	2b00      	cmp	r3, #0
 8008890:	d148      	bne.n	8008924 <dir_register+0x184>
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	3b01      	subs	r3, #1
 8008896:	623b      	str	r3, [r7, #32]
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d042      	beq.n	8008924 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695a      	ldr	r2, [r3, #20]
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	015b      	lsls	r3, r3, #5
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	4619      	mov	r1, r3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fb6a 	bl	8007f84 <dir_sdi>
 80088b0:	4603      	mov	r3, r0
 80088b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80088b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d132      	bne.n	8008924 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3324      	adds	r3, #36	@ 0x24
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7ff fe8a 	bl	80085dc <sum_sfn>
 80088c8:	4603      	mov	r3, r0
 80088ca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	4619      	mov	r1, r3
 80088d2:	69f8      	ldr	r0, [r7, #28]
 80088d4:	f7ff f848 	bl	8007968 <move_window>
 80088d8:	4603      	mov	r3, r0
 80088da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80088de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d11d      	bne.n	8008922 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	68d8      	ldr	r0, [r3, #12]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a19      	ldr	r1, [r3, #32]
 80088ee:	6a3b      	ldr	r3, [r7, #32]
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	7efb      	ldrb	r3, [r7, #27]
 80088f4:	f7ff fd7c 	bl	80083f0 <put_lfn>
				fs->wflag = 1;
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	2201      	movs	r2, #1
 80088fc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80088fe:	2100      	movs	r1, #0
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7ff fbba 	bl	800807a <dir_next>
 8008906:	4603      	mov	r3, r0
 8008908:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800890c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008910:	2b00      	cmp	r3, #0
 8008912:	d107      	bne.n	8008924 <dir_register+0x184>
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	3b01      	subs	r3, #1
 8008918:	623b      	str	r3, [r7, #32]
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1d5      	bne.n	80088cc <dir_register+0x12c>
 8008920:	e000      	b.n	8008924 <dir_register+0x184>
				if (res != FR_OK) break;
 8008922:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008924:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008928:	2b00      	cmp	r3, #0
 800892a:	d128      	bne.n	800897e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	4619      	mov	r1, r3
 8008932:	69f8      	ldr	r0, [r7, #28]
 8008934:	f7ff f818 	bl	8007968 <move_window>
 8008938:	4603      	mov	r3, r0
 800893a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800893e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008942:	2b00      	cmp	r3, #0
 8008944:	d11b      	bne.n	800897e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	2220      	movs	r2, #32
 800894c:	2100      	movs	r1, #0
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe fe39 	bl	80075c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a18      	ldr	r0, [r3, #32]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3324      	adds	r3, #36	@ 0x24
 800895c:	220b      	movs	r2, #11
 800895e:	4619      	mov	r1, r3
 8008960:	f7fe fe10 	bl	8007584 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	330c      	adds	r3, #12
 8008970:	f002 0218 	and.w	r2, r2, #24
 8008974:	b2d2      	uxtb	r2, r2
 8008976:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	2201      	movs	r2, #1
 800897c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800897e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008982:	4618      	mov	r0, r3
 8008984:	3730      	adds	r7, #48	@ 0x30
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	4ec4ec4f 	.word	0x4ec4ec4f

08008990 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08a      	sub	sp, #40	@ 0x28
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	613b      	str	r3, [r7, #16]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	2300      	movs	r3, #0
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	1c5a      	adds	r2, r3, #1
 80089b4:	61ba      	str	r2, [r7, #24]
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	4413      	add	r3, r2
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80089be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089c0:	2b1f      	cmp	r3, #31
 80089c2:	d940      	bls.n	8008a46 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80089c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80089c8:	d006      	beq.n	80089d8 <create_name+0x48>
 80089ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80089ce:	d110      	bne.n	80089f2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80089d0:	e002      	b.n	80089d8 <create_name+0x48>
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	3301      	adds	r3, #1
 80089d6:	61bb      	str	r3, [r7, #24]
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	4413      	add	r3, r2
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80089e2:	d0f6      	beq.n	80089d2 <create_name+0x42>
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	4413      	add	r3, r2
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80089ee:	d0f0      	beq.n	80089d2 <create_name+0x42>
			break;
 80089f0:	e02a      	b.n	8008a48 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2bfe      	cmp	r3, #254	@ 0xfe
 80089f6:	d901      	bls.n	80089fc <create_name+0x6c>
 80089f8:	2306      	movs	r3, #6
 80089fa:	e17d      	b.n	8008cf8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80089fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008a02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a04:	2101      	movs	r1, #1
 8008a06:	4618      	mov	r0, r3
 8008a08:	f001 fb66 	bl	800a0d8 <ff_convert>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008a10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <create_name+0x8a>
 8008a16:	2306      	movs	r3, #6
 8008a18:	e16e      	b.n	8008cf8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008a1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a1e:	d809      	bhi.n	8008a34 <create_name+0xa4>
 8008a20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a22:	4619      	mov	r1, r3
 8008a24:	488d      	ldr	r0, [pc, #564]	@ (8008c5c <create_name+0x2cc>)
 8008a26:	f7fe fe10 	bl	800764a <chk_chr>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <create_name+0xa4>
 8008a30:	2306      	movs	r3, #6
 8008a32:	e161      	b.n	8008cf8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	1c5a      	adds	r2, r3, #1
 8008a38:	617a      	str	r2, [r7, #20]
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	4413      	add	r3, r2
 8008a40:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008a42:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008a44:	e7b4      	b.n	80089b0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008a46:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	441a      	add	r2, r3
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008a52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a54:	2b1f      	cmp	r3, #31
 8008a56:	d801      	bhi.n	8008a5c <create_name+0xcc>
 8008a58:	2304      	movs	r3, #4
 8008a5a:	e000      	b.n	8008a5e <create_name+0xce>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008a62:	e011      	b.n	8008a88 <create_name+0xf8>
		w = lfn[di - 1];
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	005b      	lsls	r3, r3, #1
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	4413      	add	r3, r2
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008a76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a78:	2b20      	cmp	r3, #32
 8008a7a:	d002      	beq.n	8008a82 <create_name+0xf2>
 8008a7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a80:	d106      	bne.n	8008a90 <create_name+0x100>
		di--;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	3b01      	subs	r3, #1
 8008a86:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1ea      	bne.n	8008a64 <create_name+0xd4>
 8008a8e:	e000      	b.n	8008a92 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008a90:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	4413      	add	r3, r2
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <create_name+0x118>
 8008aa4:	2306      	movs	r3, #6
 8008aa6:	e127      	b.n	8008cf8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	3324      	adds	r3, #36	@ 0x24
 8008aac:	220b      	movs	r2, #11
 8008aae:	2120      	movs	r1, #32
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fe fd88 	bl	80075c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	61bb      	str	r3, [r7, #24]
 8008aba:	e002      	b.n	8008ac2 <create_name+0x132>
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	61bb      	str	r3, [r7, #24]
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	005b      	lsls	r3, r3, #1
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	4413      	add	r3, r2
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	2b20      	cmp	r3, #32
 8008ace:	d0f5      	beq.n	8008abc <create_name+0x12c>
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	881b      	ldrh	r3, [r3, #0]
 8008ada:	2b2e      	cmp	r3, #46	@ 0x2e
 8008adc:	d0ee      	beq.n	8008abc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d009      	beq.n	8008af8 <create_name+0x168>
 8008ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ae8:	f043 0303 	orr.w	r3, r3, #3
 8008aec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008af0:	e002      	b.n	8008af8 <create_name+0x168>
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d009      	beq.n	8008b12 <create_name+0x182>
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008b04:	3b01      	subs	r3, #1
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b10:	d1ef      	bne.n	8008af2 <create_name+0x162>

	i = b = 0; ni = 8;
 8008b12:	2300      	movs	r3, #0
 8008b14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008b18:	2300      	movs	r3, #0
 8008b1a:	623b      	str	r3, [r7, #32]
 8008b1c:	2308      	movs	r3, #8
 8008b1e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	1c5a      	adds	r2, r3, #1
 8008b24:	61ba      	str	r2, [r7, #24]
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008b30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 8090 	beq.w	8008c58 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008b38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b3a:	2b20      	cmp	r3, #32
 8008b3c:	d006      	beq.n	8008b4c <create_name+0x1bc>
 8008b3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b40:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b42:	d10a      	bne.n	8008b5a <create_name+0x1ca>
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d006      	beq.n	8008b5a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b50:	f043 0303 	orr.w	r3, r3, #3
 8008b54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008b58:	e07d      	b.n	8008c56 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008b5a:	6a3a      	ldr	r2, [r7, #32]
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d203      	bcs.n	8008b6a <create_name+0x1da>
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d123      	bne.n	8008bb2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	2b0b      	cmp	r3, #11
 8008b6e:	d106      	bne.n	8008b7e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b74:	f043 0303 	orr.w	r3, r3, #3
 8008b78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008b7c:	e075      	b.n	8008c6a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008b7e:	69ba      	ldr	r2, [r7, #24]
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d005      	beq.n	8008b92 <create_name+0x202>
 8008b86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b8a:	f043 0303 	orr.w	r3, r3, #3
 8008b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d866      	bhi.n	8008c68 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	61bb      	str	r3, [r7, #24]
 8008b9e:	2308      	movs	r3, #8
 8008ba0:	623b      	str	r3, [r7, #32]
 8008ba2:	230b      	movs	r3, #11
 8008ba4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008ba6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008bb0:	e051      	b.n	8008c56 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008bb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8008bb6:	d914      	bls.n	8008be2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008bb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bba:	2100      	movs	r1, #0
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f001 fa8b 	bl	800a0d8 <ff_convert>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008bc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <create_name+0x246>
 8008bcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bce:	3b80      	subs	r3, #128	@ 0x80
 8008bd0:	4a23      	ldr	r2, [pc, #140]	@ (8008c60 <create_name+0x2d0>)
 8008bd2:	5cd3      	ldrb	r3, [r2, r3]
 8008bd4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bda:	f043 0302 	orr.w	r3, r3, #2
 8008bde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008be2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d007      	beq.n	8008bf8 <create_name+0x268>
 8008be8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bea:	4619      	mov	r1, r3
 8008bec:	481d      	ldr	r0, [pc, #116]	@ (8008c64 <create_name+0x2d4>)
 8008bee:	f7fe fd2c 	bl	800764a <chk_chr>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d008      	beq.n	8008c0a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008bf8:	235f      	movs	r3, #95	@ 0x5f
 8008bfa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c00:	f043 0303 	orr.w	r3, r3, #3
 8008c04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008c08:	e01b      	b.n	8008c42 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008c0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c0c:	2b40      	cmp	r3, #64	@ 0x40
 8008c0e:	d909      	bls.n	8008c24 <create_name+0x294>
 8008c10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c12:	2b5a      	cmp	r3, #90	@ 0x5a
 8008c14:	d806      	bhi.n	8008c24 <create_name+0x294>
					b |= 2;
 8008c16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c1a:	f043 0302 	orr.w	r3, r3, #2
 8008c1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c22:	e00e      	b.n	8008c42 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008c24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c26:	2b60      	cmp	r3, #96	@ 0x60
 8008c28:	d90b      	bls.n	8008c42 <create_name+0x2b2>
 8008c2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c2c:	2b7a      	cmp	r3, #122	@ 0x7a
 8008c2e:	d808      	bhi.n	8008c42 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008c30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c34:	f043 0301 	orr.w	r3, r3, #1
 8008c38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c3e:	3b20      	subs	r3, #32
 8008c40:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	1c5a      	adds	r2, r3, #1
 8008c46:	623a      	str	r2, [r7, #32]
 8008c48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008c4a:	b2d1      	uxtb	r1, r2
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	4413      	add	r3, r2
 8008c50:	460a      	mov	r2, r1
 8008c52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008c56:	e763      	b.n	8008b20 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008c58:	bf00      	nop
 8008c5a:	e006      	b.n	8008c6a <create_name+0x2da>
 8008c5c:	0800acac 	.word	0x0800acac
 8008c60:	0801c1f8 	.word	0x0801c1f8
 8008c64:	0800acb8 	.word	0x0800acb8
			if (si > di) break;			/* No extension */
 8008c68:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008c70:	2be5      	cmp	r3, #229	@ 0xe5
 8008c72:	d103      	bne.n	8008c7c <create_name+0x2ec>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2205      	movs	r2, #5
 8008c78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	2b08      	cmp	r3, #8
 8008c80:	d104      	bne.n	8008c8c <create_name+0x2fc>
 8008c82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008c8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c90:	f003 030c 	and.w	r3, r3, #12
 8008c94:	2b0c      	cmp	r3, #12
 8008c96:	d005      	beq.n	8008ca4 <create_name+0x314>
 8008c98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c9c:	f003 0303 	and.w	r3, r3, #3
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d105      	bne.n	8008cb0 <create_name+0x320>
 8008ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ca8:	f043 0302 	orr.w	r3, r3, #2
 8008cac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d117      	bne.n	8008cec <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008cbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cc0:	f003 0303 	and.w	r3, r3, #3
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d105      	bne.n	8008cd4 <create_name+0x344>
 8008cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ccc:	f043 0310 	orr.w	r3, r3, #16
 8008cd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008cd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cd8:	f003 030c 	and.w	r3, r3, #12
 8008cdc:	2b04      	cmp	r3, #4
 8008cde:	d105      	bne.n	8008cec <create_name+0x35c>
 8008ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ce4:	f043 0308 	orr.w	r3, r3, #8
 8008ce8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008cf2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008cf6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3728      	adds	r7, #40	@ 0x28
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008d14:	e002      	b.n	8008d1c <follow_path+0x1c>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d22:	d0f8      	beq.n	8008d16 <follow_path+0x16>
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b5c      	cmp	r3, #92	@ 0x5c
 8008d2a:	d0f4      	beq.n	8008d16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	2b1f      	cmp	r3, #31
 8008d38:	d80a      	bhi.n	8008d50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2280      	movs	r2, #128	@ 0x80
 8008d3e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008d42:	2100      	movs	r1, #0
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7ff f91d 	bl	8007f84 <dir_sdi>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	75fb      	strb	r3, [r7, #23]
 8008d4e:	e043      	b.n	8008dd8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008d50:	463b      	mov	r3, r7
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff fe1b 	bl	8008990 <create_name>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d134      	bne.n	8008dce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff fc5a 	bl	800861e <dir_find>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008d74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008d76:	7dfb      	ldrb	r3, [r7, #23]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00a      	beq.n	8008d92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	d127      	bne.n	8008dd2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008d82:	7afb      	ldrb	r3, [r7, #11]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d122      	bne.n	8008dd2 <follow_path+0xd2>
 8008d8c:	2305      	movs	r3, #5
 8008d8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008d90:	e01f      	b.n	8008dd2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008d92:	7afb      	ldrb	r3, [r7, #11]
 8008d94:	f003 0304 	and.w	r3, r3, #4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d11c      	bne.n	8008dd6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	799b      	ldrb	r3, [r3, #6]
 8008da0:	f003 0310 	and.w	r3, r3, #16
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d102      	bne.n	8008dae <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008da8:	2305      	movs	r3, #5
 8008daa:	75fb      	strb	r3, [r7, #23]
 8008dac:	e014      	b.n	8008dd8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbc:	4413      	add	r3, r2
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f7ff fa66 	bl	8008292 <ld_clust>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008dcc:	e7c0      	b.n	8008d50 <follow_path+0x50>
			if (res != FR_OK) break;
 8008dce:	bf00      	nop
 8008dd0:	e002      	b.n	8008dd8 <follow_path+0xd8>
				break;
 8008dd2:	bf00      	nop
 8008dd4:	e000      	b.n	8008dd8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008dd6:	bf00      	nop
			}
		}
	}

	return res;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b087      	sub	sp, #28
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008dea:	f04f 33ff 	mov.w	r3, #4294967295
 8008dee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d031      	beq.n	8008e5c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	617b      	str	r3, [r7, #20]
 8008dfe:	e002      	b.n	8008e06 <get_ldnumber+0x24>
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	3301      	adds	r3, #1
 8008e04:	617b      	str	r3, [r7, #20]
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	2b1f      	cmp	r3, #31
 8008e0c:	d903      	bls.n	8008e16 <get_ldnumber+0x34>
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b3a      	cmp	r3, #58	@ 0x3a
 8008e14:	d1f4      	bne.n	8008e00 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	2b3a      	cmp	r3, #58	@ 0x3a
 8008e1c:	d11c      	bne.n	8008e58 <get_ldnumber+0x76>
			tp = *path;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	1c5a      	adds	r2, r3, #1
 8008e28:	60fa      	str	r2, [r7, #12]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	3b30      	subs	r3, #48	@ 0x30
 8008e2e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	2b09      	cmp	r3, #9
 8008e34:	d80e      	bhi.n	8008e54 <get_ldnumber+0x72>
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d10a      	bne.n	8008e54 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d107      	bne.n	8008e54 <get_ldnumber+0x72>
					vol = (int)i;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	617b      	str	r3, [r7, #20]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	e002      	b.n	8008e5e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008e58:	2300      	movs	r3, #0
 8008e5a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008e5c:	693b      	ldr	r3, [r7, #16]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	371c      	adds	r7, #28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
	...

08008e6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	70da      	strb	r2, [r3, #3]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e82:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7fe fd6e 	bl	8007968 <move_window>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <check_fs+0x2a>
 8008e92:	2304      	movs	r3, #4
 8008e94:	e038      	b.n	8008f08 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	3334      	adds	r3, #52	@ 0x34
 8008e9a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe faee 	bl	8007480 <ld_word>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d001      	beq.n	8008eb4 <check_fs+0x48>
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e029      	b.n	8008f08 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008eba:	2be9      	cmp	r3, #233	@ 0xe9
 8008ebc:	d009      	beq.n	8008ed2 <check_fs+0x66>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008ec4:	2beb      	cmp	r3, #235	@ 0xeb
 8008ec6:	d11e      	bne.n	8008f06 <check_fs+0x9a>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008ece:	2b90      	cmp	r3, #144	@ 0x90
 8008ed0:	d119      	bne.n	8008f06 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	3334      	adds	r3, #52	@ 0x34
 8008ed6:	3336      	adds	r3, #54	@ 0x36
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fe fae9 	bl	80074b0 <ld_dword>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8008f10 <check_fs+0xa4>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d101      	bne.n	8008eee <check_fs+0x82>
 8008eea:	2300      	movs	r3, #0
 8008eec:	e00c      	b.n	8008f08 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3334      	adds	r3, #52	@ 0x34
 8008ef2:	3352      	adds	r3, #82	@ 0x52
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe fadb 	bl	80074b0 <ld_dword>
 8008efa:	4603      	mov	r3, r0
 8008efc:	4a05      	ldr	r2, [pc, #20]	@ (8008f14 <check_fs+0xa8>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d101      	bne.n	8008f06 <check_fs+0x9a>
 8008f02:	2300      	movs	r3, #0
 8008f04:	e000      	b.n	8008f08 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008f06:	2302      	movs	r3, #2
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	00544146 	.word	0x00544146
 8008f14:	33544146 	.word	0x33544146

08008f18 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b096      	sub	sp, #88	@ 0x58
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	4613      	mov	r3, r2
 8008f24:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f7ff ff58 	bl	8008de2 <get_ldnumber>
 8008f32:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	da01      	bge.n	8008f3e <find_volume+0x26>
 8008f3a:	230b      	movs	r3, #11
 8008f3c:	e230      	b.n	80093a0 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008f3e:	4aa1      	ldr	r2, [pc, #644]	@ (80091c4 <find_volume+0x2ac>)
 8008f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f46:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <find_volume+0x3a>
 8008f4e:	230c      	movs	r3, #12
 8008f50:	e226      	b.n	80093a0 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f56:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008f58:	79fb      	ldrb	r3, [r7, #7]
 8008f5a:	f023 0301 	bic.w	r3, r3, #1
 8008f5e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d01a      	beq.n	8008f9e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6a:	785b      	ldrb	r3, [r3, #1]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fe fa05 	bl	800737c <disk_status>
 8008f72:	4603      	mov	r3, r0
 8008f74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008f78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008f7c:	f003 0301 	and.w	r3, r3, #1
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10c      	bne.n	8008f9e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008f84:	79fb      	ldrb	r3, [r7, #7]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d007      	beq.n	8008f9a <find_volume+0x82>
 8008f8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008f8e:	f003 0304 	and.w	r3, r3, #4
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008f96:	230a      	movs	r3, #10
 8008f98:	e202      	b.n	80093a0 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e200      	b.n	80093a0 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008faa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fae:	785b      	ldrb	r3, [r3, #1]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fe f9fd 	bl	80073b0 <disk_initialize>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008fbc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e1e9      	b.n	80093a0 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008fcc:	79fb      	ldrb	r3, [r7, #7]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d007      	beq.n	8008fe2 <find_volume+0xca>
 8008fd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008fd6:	f003 0304 	and.w	r3, r3, #4
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008fde:	230a      	movs	r3, #10
 8008fe0:	e1de      	b.n	80093a0 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008fe6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fe8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008fea:	f7ff ff3f 	bl	8008e6c <check_fs>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008ff4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d149      	bne.n	8009090 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	643b      	str	r3, [r7, #64]	@ 0x40
 8009000:	e01e      	b.n	8009040 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009004:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009008:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800900a:	011b      	lsls	r3, r3, #4
 800900c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009010:	4413      	add	r3, r2
 8009012:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009016:	3304      	adds	r3, #4
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d006      	beq.n	800902c <find_volume+0x114>
 800901e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009020:	3308      	adds	r3, #8
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fa44 	bl	80074b0 <ld_dword>
 8009028:	4602      	mov	r2, r0
 800902a:	e000      	b.n	800902e <find_volume+0x116>
 800902c:	2200      	movs	r2, #0
 800902e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	3358      	adds	r3, #88	@ 0x58
 8009034:	443b      	add	r3, r7
 8009036:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800903a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800903c:	3301      	adds	r3, #1
 800903e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009042:	2b03      	cmp	r3, #3
 8009044:	d9dd      	bls.n	8009002 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009046:	2300      	movs	r3, #0
 8009048:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800904a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800904c:	2b00      	cmp	r3, #0
 800904e:	d002      	beq.n	8009056 <find_volume+0x13e>
 8009050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009052:	3b01      	subs	r3, #1
 8009054:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	3358      	adds	r3, #88	@ 0x58
 800905c:	443b      	add	r3, r7
 800905e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009062:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009066:	2b00      	cmp	r3, #0
 8009068:	d005      	beq.n	8009076 <find_volume+0x15e>
 800906a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800906c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800906e:	f7ff fefd 	bl	8008e6c <check_fs>
 8009072:	4603      	mov	r3, r0
 8009074:	e000      	b.n	8009078 <find_volume+0x160>
 8009076:	2303      	movs	r3, #3
 8009078:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800907c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009080:	2b01      	cmp	r3, #1
 8009082:	d905      	bls.n	8009090 <find_volume+0x178>
 8009084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009086:	3301      	adds	r3, #1
 8009088:	643b      	str	r3, [r7, #64]	@ 0x40
 800908a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800908c:	2b03      	cmp	r3, #3
 800908e:	d9e2      	bls.n	8009056 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009090:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009094:	2b04      	cmp	r3, #4
 8009096:	d101      	bne.n	800909c <find_volume+0x184>
 8009098:	2301      	movs	r3, #1
 800909a:	e181      	b.n	80093a0 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800909c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d901      	bls.n	80090a8 <find_volume+0x190>
 80090a4:	230d      	movs	r3, #13
 80090a6:	e17b      	b.n	80093a0 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80090a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090aa:	3334      	adds	r3, #52	@ 0x34
 80090ac:	330b      	adds	r3, #11
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fe f9e6 	bl	8007480 <ld_word>
 80090b4:	4603      	mov	r3, r0
 80090b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090ba:	d001      	beq.n	80090c0 <find_volume+0x1a8>
 80090bc:	230d      	movs	r3, #13
 80090be:	e16f      	b.n	80093a0 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80090c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c2:	3334      	adds	r3, #52	@ 0x34
 80090c4:	3316      	adds	r3, #22
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fe f9da 	bl	8007480 <ld_word>
 80090cc:	4603      	mov	r3, r0
 80090ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80090d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d106      	bne.n	80090e4 <find_volume+0x1cc>
 80090d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d8:	3334      	adds	r3, #52	@ 0x34
 80090da:	3324      	adds	r3, #36	@ 0x24
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fe f9e7 	bl	80074b0 <ld_dword>
 80090e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80090e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80090e8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80090ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ec:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80090f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80090f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f6:	789b      	ldrb	r3, [r3, #2]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d005      	beq.n	8009108 <find_volume+0x1f0>
 80090fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fe:	789b      	ldrb	r3, [r3, #2]
 8009100:	2b02      	cmp	r3, #2
 8009102:	d001      	beq.n	8009108 <find_volume+0x1f0>
 8009104:	230d      	movs	r3, #13
 8009106:	e14b      	b.n	80093a0 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910a:	789b      	ldrb	r3, [r3, #2]
 800910c:	461a      	mov	r2, r3
 800910e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009110:	fb02 f303 	mul.w	r3, r2, r3
 8009114:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800911c:	461a      	mov	r2, r3
 800911e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009120:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009124:	895b      	ldrh	r3, [r3, #10]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d008      	beq.n	800913c <find_volume+0x224>
 800912a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912c:	895b      	ldrh	r3, [r3, #10]
 800912e:	461a      	mov	r2, r3
 8009130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009132:	895b      	ldrh	r3, [r3, #10]
 8009134:	3b01      	subs	r3, #1
 8009136:	4013      	ands	r3, r2
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <find_volume+0x228>
 800913c:	230d      	movs	r3, #13
 800913e:	e12f      	b.n	80093a0 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009142:	3334      	adds	r3, #52	@ 0x34
 8009144:	3311      	adds	r3, #17
 8009146:	4618      	mov	r0, r3
 8009148:	f7fe f99a 	bl	8007480 <ld_word>
 800914c:	4603      	mov	r3, r0
 800914e:	461a      	mov	r2, r3
 8009150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009152:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009156:	891b      	ldrh	r3, [r3, #8]
 8009158:	f003 030f 	and.w	r3, r3, #15
 800915c:	b29b      	uxth	r3, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <find_volume+0x24e>
 8009162:	230d      	movs	r3, #13
 8009164:	e11c      	b.n	80093a0 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009168:	3334      	adds	r3, #52	@ 0x34
 800916a:	3313      	adds	r3, #19
 800916c:	4618      	mov	r0, r3
 800916e:	f7fe f987 	bl	8007480 <ld_word>
 8009172:	4603      	mov	r3, r0
 8009174:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009178:	2b00      	cmp	r3, #0
 800917a:	d106      	bne.n	800918a <find_volume+0x272>
 800917c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917e:	3334      	adds	r3, #52	@ 0x34
 8009180:	3320      	adds	r3, #32
 8009182:	4618      	mov	r0, r3
 8009184:	f7fe f994 	bl	80074b0 <ld_dword>
 8009188:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800918a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918c:	3334      	adds	r3, #52	@ 0x34
 800918e:	330e      	adds	r3, #14
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe f975 	bl	8007480 <ld_word>
 8009196:	4603      	mov	r3, r0
 8009198:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800919a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <find_volume+0x28c>
 80091a0:	230d      	movs	r3, #13
 80091a2:	e0fd      	b.n	80093a0 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80091a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80091a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091a8:	4413      	add	r3, r2
 80091aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091ac:	8912      	ldrh	r2, [r2, #8]
 80091ae:	0912      	lsrs	r2, r2, #4
 80091b0:	b292      	uxth	r2, r2
 80091b2:	4413      	add	r3, r2
 80091b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80091b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d204      	bcs.n	80091c8 <find_volume+0x2b0>
 80091be:	230d      	movs	r3, #13
 80091c0:	e0ee      	b.n	80093a0 <find_volume+0x488>
 80091c2:	bf00      	nop
 80091c4:	20007094 	.word	0x20007094
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80091c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091d0:	8952      	ldrh	r2, [r2, #10]
 80091d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80091d6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80091d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <find_volume+0x2ca>
 80091de:	230d      	movs	r3, #13
 80091e0:	e0de      	b.n	80093a0 <find_volume+0x488>
		fmt = FS_FAT32;
 80091e2:	2303      	movs	r3, #3
 80091e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80091e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ea:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d802      	bhi.n	80091f8 <find_volume+0x2e0>
 80091f2:	2302      	movs	r3, #2
 80091f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80091f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80091fe:	4293      	cmp	r3, r2
 8009200:	d802      	bhi.n	8009208 <find_volume+0x2f0>
 8009202:	2301      	movs	r3, #1
 8009204:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920a:	1c9a      	adds	r2, r3, #2
 800920c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009212:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009214:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009216:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800921a:	441a      	add	r2, r3
 800921c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009220:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009224:	441a      	add	r2, r3
 8009226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009228:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800922a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800922e:	2b03      	cmp	r3, #3
 8009230:	d11e      	bne.n	8009270 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009234:	3334      	adds	r3, #52	@ 0x34
 8009236:	332a      	adds	r3, #42	@ 0x2a
 8009238:	4618      	mov	r0, r3
 800923a:	f7fe f921 	bl	8007480 <ld_word>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <find_volume+0x330>
 8009244:	230d      	movs	r3, #13
 8009246:	e0ab      	b.n	80093a0 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924a:	891b      	ldrh	r3, [r3, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <find_volume+0x33c>
 8009250:	230d      	movs	r3, #13
 8009252:	e0a5      	b.n	80093a0 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009256:	3334      	adds	r3, #52	@ 0x34
 8009258:	332c      	adds	r3, #44	@ 0x2c
 800925a:	4618      	mov	r0, r3
 800925c:	f7fe f928 	bl	80074b0 <ld_dword>
 8009260:	4602      	mov	r2, r0
 8009262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009264:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	647b      	str	r3, [r7, #68]	@ 0x44
 800926e:	e01f      	b.n	80092b0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009272:	891b      	ldrh	r3, [r3, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <find_volume+0x364>
 8009278:	230d      	movs	r3, #13
 800927a:	e091      	b.n	80093a0 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800927c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009282:	441a      	add	r2, r3
 8009284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009286:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009288:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800928c:	2b02      	cmp	r3, #2
 800928e:	d103      	bne.n	8009298 <find_volume+0x380>
 8009290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	e00a      	b.n	80092ae <find_volume+0x396>
 8009298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929a:	699a      	ldr	r2, [r3, #24]
 800929c:	4613      	mov	r3, r2
 800929e:	005b      	lsls	r3, r3, #1
 80092a0:	4413      	add	r3, r2
 80092a2:	085a      	lsrs	r2, r3, #1
 80092a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80092ae:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80092b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b2:	69da      	ldr	r2, [r3, #28]
 80092b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092b6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80092ba:	0a5b      	lsrs	r3, r3, #9
 80092bc:	429a      	cmp	r2, r3
 80092be:	d201      	bcs.n	80092c4 <find_volume+0x3ac>
 80092c0:	230d      	movs	r3, #13
 80092c2:	e06d      	b.n	80093a0 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80092c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c6:	f04f 32ff 	mov.w	r2, #4294967295
 80092ca:	615a      	str	r2, [r3, #20]
 80092cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ce:	695a      	ldr	r2, [r3, #20]
 80092d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80092d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d6:	2280      	movs	r2, #128	@ 0x80
 80092d8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80092da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d149      	bne.n	8009376 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80092e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e4:	3334      	adds	r3, #52	@ 0x34
 80092e6:	3330      	adds	r3, #48	@ 0x30
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe f8c9 	bl	8007480 <ld_word>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d140      	bne.n	8009376 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80092f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092f6:	3301      	adds	r3, #1
 80092f8:	4619      	mov	r1, r3
 80092fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80092fc:	f7fe fb34 	bl	8007968 <move_window>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d137      	bne.n	8009376 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	2200      	movs	r2, #0
 800930a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800930c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930e:	3334      	adds	r3, #52	@ 0x34
 8009310:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009314:	4618      	mov	r0, r3
 8009316:	f7fe f8b3 	bl	8007480 <ld_word>
 800931a:	4603      	mov	r3, r0
 800931c:	461a      	mov	r2, r3
 800931e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009322:	429a      	cmp	r2, r3
 8009324:	d127      	bne.n	8009376 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009328:	3334      	adds	r3, #52	@ 0x34
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe f8c0 	bl	80074b0 <ld_dword>
 8009330:	4603      	mov	r3, r0
 8009332:	4a1d      	ldr	r2, [pc, #116]	@ (80093a8 <find_volume+0x490>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d11e      	bne.n	8009376 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933a:	3334      	adds	r3, #52	@ 0x34
 800933c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe f8b5 	bl	80074b0 <ld_dword>
 8009346:	4603      	mov	r3, r0
 8009348:	4a18      	ldr	r2, [pc, #96]	@ (80093ac <find_volume+0x494>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d113      	bne.n	8009376 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800934e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009350:	3334      	adds	r3, #52	@ 0x34
 8009352:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe f8aa 	bl	80074b0 <ld_dword>
 800935c:	4602      	mov	r2, r0
 800935e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009360:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009364:	3334      	adds	r3, #52	@ 0x34
 8009366:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800936a:	4618      	mov	r0, r3
 800936c:	f7fe f8a0 	bl	80074b0 <ld_dword>
 8009370:	4602      	mov	r2, r0
 8009372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009374:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009378:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800937c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800937e:	4b0c      	ldr	r3, [pc, #48]	@ (80093b0 <find_volume+0x498>)
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	3301      	adds	r3, #1
 8009384:	b29a      	uxth	r2, r3
 8009386:	4b0a      	ldr	r3, [pc, #40]	@ (80093b0 <find_volume+0x498>)
 8009388:	801a      	strh	r2, [r3, #0]
 800938a:	4b09      	ldr	r3, [pc, #36]	@ (80093b0 <find_volume+0x498>)
 800938c:	881a      	ldrh	r2, [r3, #0]
 800938e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009390:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009394:	4a07      	ldr	r2, [pc, #28]	@ (80093b4 <find_volume+0x49c>)
 8009396:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009398:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800939a:	f7fe fa7d 	bl	8007898 <clear_lock>
#endif
	return FR_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3758      	adds	r7, #88	@ 0x58
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	41615252 	.word	0x41615252
 80093ac:	61417272 	.word	0x61417272
 80093b0:	20007098 	.word	0x20007098
 80093b4:	200070bc 	.word	0x200070bc

080093b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80093c2:	2309      	movs	r3, #9
 80093c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d01c      	beq.n	8009406 <validate+0x4e>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d018      	beq.n	8009406 <validate+0x4e>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d013      	beq.n	8009406 <validate+0x4e>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	889a      	ldrh	r2, [r3, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	88db      	ldrh	r3, [r3, #6]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d10c      	bne.n	8009406 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	785b      	ldrb	r3, [r3, #1]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fd ffc2 	bl	800737c <disk_status>
 80093f8:	4603      	mov	r3, r0
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <validate+0x4e>
			res = FR_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d102      	bne.n	8009412 <validate+0x5a>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	e000      	b.n	8009414 <validate+0x5c>
 8009412:	2300      	movs	r3, #0
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	6013      	str	r3, [r2, #0]
	return res;
 8009418:	7bfb      	ldrb	r3, [r7, #15]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b088      	sub	sp, #32
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	4613      	mov	r3, r2
 8009430:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009436:	f107 0310 	add.w	r3, r7, #16
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff fcd1 	bl	8008de2 <get_ldnumber>
 8009440:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	2b00      	cmp	r3, #0
 8009446:	da01      	bge.n	800944c <f_mount+0x28>
 8009448:	230b      	movs	r3, #11
 800944a:	e02b      	b.n	80094a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800944c:	4a17      	ldr	r2, [pc, #92]	@ (80094ac <f_mount+0x88>)
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009454:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d005      	beq.n	8009468 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800945c:	69b8      	ldr	r0, [r7, #24]
 800945e:	f7fe fa1b 	bl	8007898 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	2200      	movs	r2, #0
 8009466:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	490d      	ldr	r1, [pc, #52]	@ (80094ac <f_mount+0x88>)
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <f_mount+0x66>
 8009484:	79fb      	ldrb	r3, [r7, #7]
 8009486:	2b01      	cmp	r3, #1
 8009488:	d001      	beq.n	800948e <f_mount+0x6a>
 800948a:	2300      	movs	r3, #0
 800948c:	e00a      	b.n	80094a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800948e:	f107 010c 	add.w	r1, r7, #12
 8009492:	f107 0308 	add.w	r3, r7, #8
 8009496:	2200      	movs	r2, #0
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff fd3d 	bl	8008f18 <find_volume>
 800949e:	4603      	mov	r3, r0
 80094a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3720      	adds	r7, #32
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	20007094 	.word	0x20007094

080094b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b09a      	sub	sp, #104	@ 0x68
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	4613      	mov	r3, r2
 80094bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <f_open+0x18>
 80094c4:	2309      	movs	r3, #9
 80094c6:	e1a9      	b.n	800981c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80094c8:	79fb      	ldrb	r3, [r7, #7]
 80094ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80094ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80094d0:	79fa      	ldrb	r2, [r7, #7]
 80094d2:	f107 0114 	add.w	r1, r7, #20
 80094d6:	f107 0308 	add.w	r3, r7, #8
 80094da:	4618      	mov	r0, r3
 80094dc:	f7ff fd1c 	bl	8008f18 <find_volume>
 80094e0:	4603      	mov	r3, r0
 80094e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80094e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f040 818d 	bne.w	800980a <f_open+0x35a>
		dj.obj.fs = fs;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	f107 0318 	add.w	r3, r7, #24
 80094fa:	4611      	mov	r1, r2
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff fbff 	bl	8008d00 <follow_path>
 8009502:	4603      	mov	r3, r0
 8009504:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009508:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800950c:	2b00      	cmp	r3, #0
 800950e:	d118      	bne.n	8009542 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009510:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009514:	b25b      	sxtb	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	da03      	bge.n	8009522 <f_open+0x72>
				res = FR_INVALID_NAME;
 800951a:	2306      	movs	r3, #6
 800951c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009520:	e00f      	b.n	8009542 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	2b01      	cmp	r3, #1
 8009526:	bf8c      	ite	hi
 8009528:	2301      	movhi	r3, #1
 800952a:	2300      	movls	r3, #0
 800952c:	b2db      	uxtb	r3, r3
 800952e:	461a      	mov	r2, r3
 8009530:	f107 0318 	add.w	r3, r7, #24
 8009534:	4611      	mov	r1, r2
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe f8a2 	bl	8007680 <chk_lock>
 800953c:	4603      	mov	r3, r0
 800953e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	f003 031c 	and.w	r3, r3, #28
 8009548:	2b00      	cmp	r3, #0
 800954a:	d07f      	beq.n	800964c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800954c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009550:	2b00      	cmp	r3, #0
 8009552:	d017      	beq.n	8009584 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009554:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009558:	2b04      	cmp	r3, #4
 800955a:	d10e      	bne.n	800957a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800955c:	f7fe f8ec 	bl	8007738 <enq_lock>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d006      	beq.n	8009574 <f_open+0xc4>
 8009566:	f107 0318 	add.w	r3, r7, #24
 800956a:	4618      	mov	r0, r3
 800956c:	f7ff f918 	bl	80087a0 <dir_register>
 8009570:	4603      	mov	r3, r0
 8009572:	e000      	b.n	8009576 <f_open+0xc6>
 8009574:	2312      	movs	r3, #18
 8009576:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	f043 0308 	orr.w	r3, r3, #8
 8009580:	71fb      	strb	r3, [r7, #7]
 8009582:	e010      	b.n	80095a6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009584:	7fbb      	ldrb	r3, [r7, #30]
 8009586:	f003 0311 	and.w	r3, r3, #17
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <f_open+0xe6>
					res = FR_DENIED;
 800958e:	2307      	movs	r3, #7
 8009590:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009594:	e007      	b.n	80095a6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009596:	79fb      	ldrb	r3, [r7, #7]
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <f_open+0xf6>
 80095a0:	2308      	movs	r3, #8
 80095a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80095a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d168      	bne.n	8009680 <f_open+0x1d0>
 80095ae:	79fb      	ldrb	r3, [r7, #7]
 80095b0:	f003 0308 	and.w	r3, r3, #8
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d063      	beq.n	8009680 <f_open+0x1d0>
				dw = GET_FATTIME();
 80095b8:	f7fd f9a4 	bl	8006904 <get_fattime>
 80095bc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80095be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c0:	330e      	adds	r3, #14
 80095c2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fd ffb1 	bl	800752c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80095ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095cc:	3316      	adds	r3, #22
 80095ce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fd ffab 	bl	800752c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80095d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d8:	330b      	adds	r3, #11
 80095da:	2220      	movs	r2, #32
 80095dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095e2:	4611      	mov	r1, r2
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fe fe54 	bl	8008292 <ld_clust>
 80095ea:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80095f0:	2200      	movs	r2, #0
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe fe6c 	bl	80082d0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80095f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fa:	331c      	adds	r3, #28
 80095fc:	2100      	movs	r1, #0
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fd ff94 	bl	800752c <st_dword>
					fs->wflag = 1;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2201      	movs	r2, #1
 8009608:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800960a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800960c:	2b00      	cmp	r3, #0
 800960e:	d037      	beq.n	8009680 <f_open+0x1d0>
						dw = fs->winsect;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009614:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009616:	f107 0318 	add.w	r3, r7, #24
 800961a:	2200      	movs	r2, #0
 800961c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fb7f 	bl	8007d22 <remove_chain>
 8009624:	4603      	mov	r3, r0
 8009626:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800962a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800962e:	2b00      	cmp	r3, #0
 8009630:	d126      	bne.n	8009680 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe f996 	bl	8007968 <move_window>
 800963c:	4603      	mov	r3, r0
 800963e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009646:	3a01      	subs	r2, #1
 8009648:	611a      	str	r2, [r3, #16]
 800964a:	e019      	b.n	8009680 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800964c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009650:	2b00      	cmp	r3, #0
 8009652:	d115      	bne.n	8009680 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009654:	7fbb      	ldrb	r3, [r7, #30]
 8009656:	f003 0310 	and.w	r3, r3, #16
 800965a:	2b00      	cmp	r3, #0
 800965c:	d003      	beq.n	8009666 <f_open+0x1b6>
					res = FR_NO_FILE;
 800965e:	2304      	movs	r3, #4
 8009660:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009664:	e00c      	b.n	8009680 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009666:	79fb      	ldrb	r3, [r7, #7]
 8009668:	f003 0302 	and.w	r3, r3, #2
 800966c:	2b00      	cmp	r3, #0
 800966e:	d007      	beq.n	8009680 <f_open+0x1d0>
 8009670:	7fbb      	ldrb	r3, [r7, #30]
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <f_open+0x1d0>
						res = FR_DENIED;
 800967a:	2307      	movs	r3, #7
 800967c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009680:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009684:	2b00      	cmp	r3, #0
 8009686:	d126      	bne.n	80096d6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009688:	79fb      	ldrb	r3, [r7, #7]
 800968a:	f003 0308 	and.w	r3, r3, #8
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009692:	79fb      	ldrb	r3, [r7, #7]
 8009694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009698:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80096a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80096a8:	79fb      	ldrb	r3, [r7, #7]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	bf8c      	ite	hi
 80096ae:	2301      	movhi	r3, #1
 80096b0:	2300      	movls	r3, #0
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	461a      	mov	r2, r3
 80096b6:	f107 0318 	add.w	r3, r7, #24
 80096ba:	4611      	mov	r1, r2
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fe f85d 	bl	800777c <inc_lock>
 80096c2:	4602      	mov	r2, r0
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d102      	bne.n	80096d6 <f_open+0x226>
 80096d0:	2302      	movs	r3, #2
 80096d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80096d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f040 8095 	bne.w	800980a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096e4:	4611      	mov	r1, r2
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fe fdd3 	bl	8008292 <ld_clust>
 80096ec:	4602      	mov	r2, r0
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80096f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f4:	331c      	adds	r3, #28
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fd feda 	bl	80074b0 <ld_dword>
 80096fc:	4602      	mov	r2, r0
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	88da      	ldrh	r2, [r3, #6]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	79fa      	ldrb	r2, [r7, #7]
 800971a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3330      	adds	r3, #48	@ 0x30
 8009732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009736:	2100      	movs	r1, #0
 8009738:	4618      	mov	r0, r3
 800973a:	f7fd ff44 	bl	80075c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	f003 0320 	and.w	r3, r3, #32
 8009744:	2b00      	cmp	r3, #0
 8009746:	d060      	beq.n	800980a <f_open+0x35a>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d05c      	beq.n	800980a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68da      	ldr	r2, [r3, #12]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	895b      	ldrh	r3, [r3, #10]
 800975c:	025b      	lsls	r3, r3, #9
 800975e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800976c:	e016      	b.n	800979c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009772:	4618      	mov	r0, r3
 8009774:	f7fe f944 	bl	8007a00 <get_fat>
 8009778:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800977a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800977c:	2b01      	cmp	r3, #1
 800977e:	d802      	bhi.n	8009786 <f_open+0x2d6>
 8009780:	2302      	movs	r3, #2
 8009782:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009786:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978c:	d102      	bne.n	8009794 <f_open+0x2e4>
 800978e:	2301      	movs	r3, #1
 8009790:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009794:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800979c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d103      	bne.n	80097ac <f_open+0x2fc>
 80097a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80097a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d8e0      	bhi.n	800976e <f_open+0x2be>
				}
				fp->clust = clst;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80097b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80097b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d127      	bne.n	800980a <f_open+0x35a>
 80097ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d022      	beq.n	800980a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fe f8fa 	bl	80079c2 <clust2sect>
 80097ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80097d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d103      	bne.n	80097de <f_open+0x32e>
						res = FR_INT_ERR;
 80097d6:	2302      	movs	r3, #2
 80097d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80097dc:	e015      	b.n	800980a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80097de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097e0:	0a5a      	lsrs	r2, r3, #9
 80097e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097e4:	441a      	add	r2, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	7858      	ldrb	r0, [r3, #1]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6a1a      	ldr	r2, [r3, #32]
 80097f8:	2301      	movs	r3, #1
 80097fa:	f7fd fe01 	bl	8007400 <disk_read>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <f_open+0x35a>
 8009804:	2301      	movs	r3, #1
 8009806:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800980a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <f_open+0x368>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009818:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800981c:	4618      	mov	r0, r3
 800981e:	3768      	adds	r7, #104	@ 0x68
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08e      	sub	sp, #56	@ 0x38
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f107 0214 	add.w	r2, r7, #20
 8009842:	4611      	mov	r1, r2
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff fdb7 	bl	80093b8 <validate>
 800984a:	4603      	mov	r3, r0
 800984c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009850:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009854:	2b00      	cmp	r3, #0
 8009856:	d107      	bne.n	8009868 <f_read+0x44>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	7d5b      	ldrb	r3, [r3, #21]
 800985c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009860:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <f_read+0x4a>
 8009868:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800986c:	e115      	b.n	8009a9a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	7d1b      	ldrb	r3, [r3, #20]
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <f_read+0x5a>
 800987a:	2307      	movs	r3, #7
 800987c:	e10d      	b.n	8009a9a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	68da      	ldr	r2, [r3, #12]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	429a      	cmp	r2, r3
 8009890:	f240 80fe 	bls.w	8009a90 <f_read+0x26c>
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009898:	e0fa      	b.n	8009a90 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f040 80c6 	bne.w	8009a34 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	0a5b      	lsrs	r3, r3, #9
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	8952      	ldrh	r2, [r2, #10]
 80098b2:	3a01      	subs	r2, #1
 80098b4:	4013      	ands	r3, r2
 80098b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d12f      	bne.n	800991e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d103      	bne.n	80098ce <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80098cc:	e013      	b.n	80098f6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d007      	beq.n	80098e6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	4619      	mov	r1, r3
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f7fe fb1d 	bl	8007f1c <clmt_clust>
 80098e2:	6338      	str	r0, [r7, #48]	@ 0x30
 80098e4:	e007      	b.n	80098f6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	4619      	mov	r1, r3
 80098ee:	4610      	mov	r0, r2
 80098f0:	f7fe f886 	bl	8007a00 <get_fat>
 80098f4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80098f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d804      	bhi.n	8009906 <f_read+0xe2>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2202      	movs	r2, #2
 8009900:	755a      	strb	r2, [r3, #21]
 8009902:	2302      	movs	r3, #2
 8009904:	e0c9      	b.n	8009a9a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990c:	d104      	bne.n	8009918 <f_read+0xf4>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2201      	movs	r2, #1
 8009912:	755a      	strb	r2, [r3, #21]
 8009914:	2301      	movs	r3, #1
 8009916:	e0c0      	b.n	8009a9a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800991c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	4619      	mov	r1, r3
 8009926:	4610      	mov	r0, r2
 8009928:	f7fe f84b 	bl	80079c2 <clust2sect>
 800992c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d104      	bne.n	800993e <f_read+0x11a>
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2202      	movs	r2, #2
 8009938:	755a      	strb	r2, [r3, #21]
 800993a:	2302      	movs	r3, #2
 800993c:	e0ad      	b.n	8009a9a <f_read+0x276>
			sect += csect;
 800993e:	69ba      	ldr	r2, [r7, #24]
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	4413      	add	r3, r2
 8009944:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	0a5b      	lsrs	r3, r3, #9
 800994a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800994c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994e:	2b00      	cmp	r3, #0
 8009950:	d039      	beq.n	80099c6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009952:	69fa      	ldr	r2, [r7, #28]
 8009954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009956:	4413      	add	r3, r2
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	8952      	ldrh	r2, [r2, #10]
 800995c:	4293      	cmp	r3, r2
 800995e:	d905      	bls.n	800996c <f_read+0x148>
					cc = fs->csize - csect;
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	895b      	ldrh	r3, [r3, #10]
 8009964:	461a      	mov	r2, r3
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	7858      	ldrb	r0, [r3, #1]
 8009970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009972:	69ba      	ldr	r2, [r7, #24]
 8009974:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009976:	f7fd fd43 	bl	8007400 <disk_read>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <f_read+0x166>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2201      	movs	r2, #1
 8009984:	755a      	strb	r2, [r3, #21]
 8009986:	2301      	movs	r3, #1
 8009988:	e087      	b.n	8009a9a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	7d1b      	ldrb	r3, [r3, #20]
 800998e:	b25b      	sxtb	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	da14      	bge.n	80099be <f_read+0x19a>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6a1a      	ldr	r2, [r3, #32]
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800999e:	429a      	cmp	r2, r3
 80099a0:	d90d      	bls.n	80099be <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6a1a      	ldr	r2, [r3, #32]
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	025b      	lsls	r3, r3, #9
 80099ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099ae:	18d0      	adds	r0, r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	3330      	adds	r3, #48	@ 0x30
 80099b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099b8:	4619      	mov	r1, r3
 80099ba:	f7fd fde3 	bl	8007584 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80099be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c0:	025b      	lsls	r3, r3, #9
 80099c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80099c4:	e050      	b.n	8009a68 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	69ba      	ldr	r2, [r7, #24]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d02e      	beq.n	8009a2e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	7d1b      	ldrb	r3, [r3, #20]
 80099d4:	b25b      	sxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	da18      	bge.n	8009a0c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	7858      	ldrb	r0, [r3, #1]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6a1a      	ldr	r2, [r3, #32]
 80099e8:	2301      	movs	r3, #1
 80099ea:	f7fd fd29 	bl	8007440 <disk_write>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d004      	beq.n	80099fe <f_read+0x1da>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2201      	movs	r2, #1
 80099f8:	755a      	strb	r2, [r3, #21]
 80099fa:	2301      	movs	r3, #1
 80099fc:	e04d      	b.n	8009a9a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	7d1b      	ldrb	r3, [r3, #20]
 8009a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	7858      	ldrb	r0, [r3, #1]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a16:	2301      	movs	r3, #1
 8009a18:	69ba      	ldr	r2, [r7, #24]
 8009a1a:	f7fd fcf1 	bl	8007400 <disk_read>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d004      	beq.n	8009a2e <f_read+0x20a>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2201      	movs	r2, #1
 8009a28:	755a      	strb	r2, [r3, #21]
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e035      	b.n	8009a9a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009a42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d901      	bls.n	8009a4e <f_read+0x22a>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5c:	4413      	add	r3, r2
 8009a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a60:	4619      	mov	r1, r3
 8009a62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009a64:	f7fd fd8e 	bl	8007584 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a6c:	4413      	add	r3, r2
 8009a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	699a      	ldr	r2, [r3, #24]
 8009a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a76:	441a      	add	r2, r3
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	619a      	str	r2, [r3, #24]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a82:	441a      	add	r2, r3
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	601a      	str	r2, [r3, #0]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f47f af01 	bne.w	800989a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3738      	adds	r7, #56	@ 0x38
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b090      	sub	sp, #64	@ 0x40
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f107 0208 	add.w	r2, r7, #8
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7ff fc7f 	bl	80093b8 <validate>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009ac0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d103      	bne.n	8009ad0 <f_lseek+0x2e>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	7d5b      	ldrb	r3, [r3, #21]
 8009acc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009ad0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <f_lseek+0x3c>
 8009ad8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009adc:	e1e6      	b.n	8009eac <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 80d1 	beq.w	8009c8a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aee:	d15a      	bne.n	8009ba6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af8:	1d1a      	adds	r2, r3, #4
 8009afa:	627a      	str	r2, [r7, #36]	@ 0x24
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	2302      	movs	r3, #2
 8009b02:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d03a      	beq.n	8009b86 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b12:	613b      	str	r3, [r7, #16]
 8009b14:	2300      	movs	r3, #0
 8009b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1a:	3302      	adds	r3, #2
 8009b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b20:	60fb      	str	r3, [r7, #12]
 8009b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b24:	3301      	adds	r3, #1
 8009b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fd ff67 	bl	8007a00 <get_fat>
 8009b32:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d804      	bhi.n	8009b44 <f_lseek+0xa2>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	755a      	strb	r2, [r3, #21]
 8009b40:	2302      	movs	r3, #2
 8009b42:	e1b3      	b.n	8009eac <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4a:	d104      	bne.n	8009b56 <f_lseek+0xb4>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	755a      	strb	r2, [r3, #21]
 8009b52:	2301      	movs	r3, #1
 8009b54:	e1aa      	b.n	8009eac <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d0de      	beq.n	8009b1e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009b60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d809      	bhi.n	8009b7c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6a:	1d1a      	adds	r2, r3, #4
 8009b6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8009b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b70:	601a      	str	r2, [r3, #0]
 8009b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b74:	1d1a      	adds	r2, r3, #4
 8009b76:	627a      	str	r2, [r7, #36]	@ 0x24
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d3c4      	bcc.n	8009b10 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b8c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009b8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d803      	bhi.n	8009b9e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b98:	2200      	movs	r2, #0
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	e184      	b.n	8009ea8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009b9e:	2311      	movs	r3, #17
 8009ba0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009ba4:	e180      	b.n	8009ea8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d902      	bls.n	8009bb6 <f_lseek+0x114>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f000 8172 	beq.w	8009ea8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f7fe f9a6 	bl	8007f1c <clmt_clust>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	69db      	ldr	r3, [r3, #28]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	4610      	mov	r0, r2
 8009be0:	f7fd feef 	bl	80079c2 <clust2sect>
 8009be4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d104      	bne.n	8009bf6 <f_lseek+0x154>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	755a      	strb	r2, [r3, #21]
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	e15a      	b.n	8009eac <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	0a5b      	lsrs	r3, r3, #9
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	8952      	ldrh	r2, [r2, #10]
 8009c00:	3a01      	subs	r2, #1
 8009c02:	4013      	ands	r3, r2
 8009c04:	69ba      	ldr	r2, [r7, #24]
 8009c06:	4413      	add	r3, r2
 8009c08:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 8148 	beq.w	8009ea8 <f_lseek+0x406>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a1b      	ldr	r3, [r3, #32]
 8009c1c:	69ba      	ldr	r2, [r7, #24]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	f000 8142 	beq.w	8009ea8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	7d1b      	ldrb	r3, [r3, #20]
 8009c28:	b25b      	sxtb	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	da18      	bge.n	8009c60 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	7858      	ldrb	r0, [r3, #1]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a1a      	ldr	r2, [r3, #32]
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	f7fd fbff 	bl	8007440 <disk_write>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d004      	beq.n	8009c52 <f_lseek+0x1b0>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	755a      	strb	r2, [r3, #21]
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e12c      	b.n	8009eac <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	7d1b      	ldrb	r3, [r3, #20]
 8009c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	7858      	ldrb	r0, [r3, #1]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	69ba      	ldr	r2, [r7, #24]
 8009c6e:	f7fd fbc7 	bl	8007400 <disk_read>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d004      	beq.n	8009c82 <f_lseek+0x1e0>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	755a      	strb	r2, [r3, #21]
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e114      	b.n	8009eac <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	69ba      	ldr	r2, [r7, #24]
 8009c86:	621a      	str	r2, [r3, #32]
 8009c88:	e10e      	b.n	8009ea8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d908      	bls.n	8009ca6 <f_lseek+0x204>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	7d1b      	ldrb	r3, [r3, #20]
 8009c98:	f003 0302 	and.w	r3, r3, #2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d102      	bne.n	8009ca6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009cac:	2300      	movs	r3, #0
 8009cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009cb4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 80a7 	beq.w	8009e0c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	895b      	ldrh	r3, [r3, #10]
 8009cc2:	025b      	lsls	r3, r3, #9
 8009cc4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01b      	beq.n	8009d04 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	1e5a      	subs	r2, r3, #1
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	1e59      	subs	r1, r3, #1
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d30f      	bcc.n	8009d04 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009ce4:	6a3b      	ldr	r3, [r7, #32]
 8009ce6:	1e5a      	subs	r2, r3, #1
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	425b      	negs	r3, r3
 8009cec:	401a      	ands	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d02:	e022      	b.n	8009d4a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d119      	bne.n	8009d44 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2100      	movs	r1, #0
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fe f869 	bl	8007dec <create_chain>
 8009d1a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d104      	bne.n	8009d2c <f_lseek+0x28a>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2202      	movs	r2, #2
 8009d26:	755a      	strb	r2, [r3, #21]
 8009d28:	2302      	movs	r3, #2
 8009d2a:	e0bf      	b.n	8009eac <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d32:	d104      	bne.n	8009d3e <f_lseek+0x29c>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	755a      	strb	r2, [r3, #21]
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e0b6      	b.n	8009eac <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d42:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d48:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d05d      	beq.n	8009e0c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8009d50:	e03a      	b.n	8009dc8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	603b      	str	r3, [r7, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	699a      	ldr	r2, [r3, #24]
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	441a      	add	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	7d1b      	ldrb	r3, [r3, #20]
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00b      	beq.n	8009d8a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fe f838 	bl	8007dec <create_chain>
 8009d7c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d108      	bne.n	8009d96 <f_lseek+0x2f4>
							ofs = 0; break;
 8009d84:	2300      	movs	r3, #0
 8009d86:	603b      	str	r3, [r7, #0]
 8009d88:	e022      	b.n	8009dd0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fd fe36 	bl	8007a00 <get_fat>
 8009d94:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9c:	d104      	bne.n	8009da8 <f_lseek+0x306>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2201      	movs	r2, #1
 8009da2:	755a      	strb	r2, [r3, #21]
 8009da4:	2301      	movs	r3, #1
 8009da6:	e081      	b.n	8009eac <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d904      	bls.n	8009db8 <f_lseek+0x316>
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d304      	bcc.n	8009dc2 <f_lseek+0x320>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	755a      	strb	r2, [r3, #21]
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	e074      	b.n	8009eac <f_lseek+0x40a>
					fp->clust = clst;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009dc6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009dc8:	683a      	ldr	r2, [r7, #0]
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d8c0      	bhi.n	8009d52 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	699a      	ldr	r2, [r3, #24]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	441a      	add	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d012      	beq.n	8009e0c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fd fde9 	bl	80079c2 <clust2sect>
 8009df0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d104      	bne.n	8009e02 <f_lseek+0x360>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	755a      	strb	r2, [r3, #21]
 8009dfe:	2302      	movs	r3, #2
 8009e00:	e054      	b.n	8009eac <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	0a5b      	lsrs	r3, r3, #9
 8009e06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e08:	4413      	add	r3, r2
 8009e0a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	699a      	ldr	r2, [r3, #24]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d90a      	bls.n	8009e2e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	699a      	ldr	r2, [r3, #24]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	7d1b      	ldrb	r3, [r3, #20]
 8009e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d036      	beq.n	8009ea8 <f_lseek+0x406>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d031      	beq.n	8009ea8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	7d1b      	ldrb	r3, [r3, #20]
 8009e48:	b25b      	sxtb	r3, r3
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	da18      	bge.n	8009e80 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	7858      	ldrb	r0, [r3, #1]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a1a      	ldr	r2, [r3, #32]
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f7fd faef 	bl	8007440 <disk_write>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d004      	beq.n	8009e72 <f_lseek+0x3d0>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	755a      	strb	r2, [r3, #21]
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e01c      	b.n	8009eac <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	7d1b      	ldrb	r3, [r3, #20]
 8009e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	7858      	ldrb	r0, [r3, #1]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e8e:	f7fd fab7 	bl	8007400 <disk_read>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d004      	beq.n	8009ea2 <f_lseek+0x400>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	755a      	strb	r2, [r3, #21]
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e004      	b.n	8009eac <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ea6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009ea8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3740      	adds	r7, #64	@ 0x40
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b092      	sub	sp, #72	@ 0x48
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009ec0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8009ec4:	f107 030c 	add.w	r3, r7, #12
 8009ec8:	2200      	movs	r2, #0
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7ff f824 	bl	8008f18 <find_volume>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8009ed6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f040 8099 	bne.w	800a012 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009ee0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee8:	695a      	ldr	r2, [r3, #20]
 8009eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	3b02      	subs	r3, #2
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d804      	bhi.n	8009efe <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef6:	695a      	ldr	r2, [r3, #20]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	e089      	b.n	800a012 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009efe:	2300      	movs	r3, #0
 8009f00:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d128      	bne.n	8009f5c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f10:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009f12:	f107 0314 	add.w	r3, r7, #20
 8009f16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fd fd71 	bl	8007a00 <get_fat>
 8009f1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f26:	d103      	bne.n	8009f30 <f_getfree+0x7c>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009f2e:	e063      	b.n	8009ff8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d103      	bne.n	8009f3e <f_getfree+0x8a>
 8009f36:	2302      	movs	r3, #2
 8009f38:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009f3c:	e05c      	b.n	8009ff8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d102      	bne.n	8009f4a <f_getfree+0x96>
 8009f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f46:	3301      	adds	r3, #1
 8009f48:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8009f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d3db      	bcc.n	8009f12 <f_getfree+0x5e>
 8009f5a:	e04d      	b.n	8009ff8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f66:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8009f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d113      	bne.n	8009f9e <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009f7e:	4619      	mov	r1, r3
 8009f80:	f7fd fcf2 	bl	8007968 <move_window>
 8009f84:	4603      	mov	r3, r0
 8009f86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8009f8a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d131      	bne.n	8009ff6 <f_getfree+0x142>
							p = fs->win;
 8009f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f94:	3334      	adds	r3, #52	@ 0x34
 8009f96:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8009f98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f9c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d10f      	bne.n	8009fc6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009fa6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fa8:	f7fd fa6a 	bl	8007480 <ld_word>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d102      	bne.n	8009fb8 <f_getfree+0x104>
 8009fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fba:	3302      	adds	r3, #2
 8009fbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fc0:	3b02      	subs	r3, #2
 8009fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fc4:	e010      	b.n	8009fe8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009fc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009fc8:	f7fd fa72 	bl	80074b0 <ld_dword>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d102      	bne.n	8009fdc <f_getfree+0x128>
 8009fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fd8:	3301      	adds	r3, #1
 8009fda:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fde:	3304      	adds	r3, #4
 8009fe0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fe4:	3b04      	subs	r3, #4
 8009fe6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8009fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fea:	3b01      	subs	r3, #1
 8009fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1bd      	bne.n	8009f70 <f_getfree+0xbc>
 8009ff4:	e000      	b.n	8009ff8 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009ff6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ffc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a000:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a002:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a006:	791a      	ldrb	r2, [r3, #4]
 800a008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00a:	f042 0201 	orr.w	r2, r2, #1
 800a00e:	b2d2      	uxtb	r2, r2
 800a010:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a012:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a016:	4618      	mov	r0, r3
 800a018:	3748      	adds	r7, #72	@ 0x48
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
	...

0800a020 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a020:	b480      	push	{r7}
 800a022:	b087      	sub	sp, #28
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	4613      	mov	r3, r2
 800a02c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a02e:	2301      	movs	r3, #1
 800a030:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a036:	4b1f      	ldr	r3, [pc, #124]	@ (800a0b4 <FATFS_LinkDriverEx+0x94>)
 800a038:	7a5b      	ldrb	r3, [r3, #9]
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d131      	bne.n	800a0a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a040:	4b1c      	ldr	r3, [pc, #112]	@ (800a0b4 <FATFS_LinkDriverEx+0x94>)
 800a042:	7a5b      	ldrb	r3, [r3, #9]
 800a044:	b2db      	uxtb	r3, r3
 800a046:	461a      	mov	r2, r3
 800a048:	4b1a      	ldr	r3, [pc, #104]	@ (800a0b4 <FATFS_LinkDriverEx+0x94>)
 800a04a:	2100      	movs	r1, #0
 800a04c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a04e:	4b19      	ldr	r3, [pc, #100]	@ (800a0b4 <FATFS_LinkDriverEx+0x94>)
 800a050:	7a5b      	ldrb	r3, [r3, #9]
 800a052:	b2db      	uxtb	r3, r3
 800a054:	4a17      	ldr	r2, [pc, #92]	@ (800a0b4 <FATFS_LinkDriverEx+0x94>)
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a05e:	4b15      	ldr	r3, [pc, #84]	@ (800a0b4 <FATFS_LinkDriverEx+0x94>)
 800a060:	7a5b      	ldrb	r3, [r3, #9]
 800a062:	b2db      	uxtb	r3, r3
 800a064:	461a      	mov	r2, r3
 800a066:	4b13      	ldr	r3, [pc, #76]	@ (800a0b4 <FATFS_LinkDriverEx+0x94>)
 800a068:	4413      	add	r3, r2
 800a06a:	79fa      	ldrb	r2, [r7, #7]
 800a06c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a06e:	4b11      	ldr	r3, [pc, #68]	@ (800a0b4 <FATFS_LinkDriverEx+0x94>)
 800a070:	7a5b      	ldrb	r3, [r3, #9]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	1c5a      	adds	r2, r3, #1
 800a076:	b2d1      	uxtb	r1, r2
 800a078:	4a0e      	ldr	r2, [pc, #56]	@ (800a0b4 <FATFS_LinkDriverEx+0x94>)
 800a07a:	7251      	strb	r1, [r2, #9]
 800a07c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a07e:	7dbb      	ldrb	r3, [r7, #22]
 800a080:	3330      	adds	r3, #48	@ 0x30
 800a082:	b2da      	uxtb	r2, r3
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	3301      	adds	r3, #1
 800a08c:	223a      	movs	r2, #58	@ 0x3a
 800a08e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	3302      	adds	r3, #2
 800a094:	222f      	movs	r2, #47	@ 0x2f
 800a096:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	3303      	adds	r3, #3
 800a09c:	2200      	movs	r2, #0
 800a09e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	371c      	adds	r7, #28
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	200072bc 	.word	0x200072bc

0800a0b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7ff ffaa 	bl	800a020 <FATFS_LinkDriverEx>
 800a0cc:	4603      	mov	r3, r0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
	...

0800a0d8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	6039      	str	r1, [r7, #0]
 800a0e2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a0e4:	88fb      	ldrh	r3, [r7, #6]
 800a0e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800a0e8:	d802      	bhi.n	800a0f0 <ff_convert+0x18>
		c = chr;
 800a0ea:	88fb      	ldrh	r3, [r7, #6]
 800a0ec:	81fb      	strh	r3, [r7, #14]
 800a0ee:	e025      	b.n	800a13c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00b      	beq.n	800a10e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a0f6:	88fb      	ldrh	r3, [r7, #6]
 800a0f8:	2bff      	cmp	r3, #255	@ 0xff
 800a0fa:	d805      	bhi.n	800a108 <ff_convert+0x30>
 800a0fc:	88fb      	ldrh	r3, [r7, #6]
 800a0fe:	3b80      	subs	r3, #128	@ 0x80
 800a100:	4a12      	ldr	r2, [pc, #72]	@ (800a14c <ff_convert+0x74>)
 800a102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a106:	e000      	b.n	800a10a <ff_convert+0x32>
 800a108:	2300      	movs	r3, #0
 800a10a:	81fb      	strh	r3, [r7, #14]
 800a10c:	e016      	b.n	800a13c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a10e:	2300      	movs	r3, #0
 800a110:	81fb      	strh	r3, [r7, #14]
 800a112:	e009      	b.n	800a128 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a114:	89fb      	ldrh	r3, [r7, #14]
 800a116:	4a0d      	ldr	r2, [pc, #52]	@ (800a14c <ff_convert+0x74>)
 800a118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a11c:	88fa      	ldrh	r2, [r7, #6]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d006      	beq.n	800a130 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a122:	89fb      	ldrh	r3, [r7, #14]
 800a124:	3301      	adds	r3, #1
 800a126:	81fb      	strh	r3, [r7, #14]
 800a128:	89fb      	ldrh	r3, [r7, #14]
 800a12a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a12c:	d9f2      	bls.n	800a114 <ff_convert+0x3c>
 800a12e:	e000      	b.n	800a132 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a130:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a132:	89fb      	ldrh	r3, [r7, #14]
 800a134:	3380      	adds	r3, #128	@ 0x80
 800a136:	b29b      	uxth	r3, r3
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a13c:	89fb      	ldrh	r3, [r7, #14]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3714      	adds	r7, #20
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	0801c288 	.word	0x0801c288

0800a150 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a150:	b480      	push	{r7}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	4603      	mov	r3, r0
 800a158:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a15a:	88fb      	ldrh	r3, [r7, #6]
 800a15c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a160:	d201      	bcs.n	800a166 <ff_wtoupper+0x16>
 800a162:	4b3e      	ldr	r3, [pc, #248]	@ (800a25c <ff_wtoupper+0x10c>)
 800a164:	e000      	b.n	800a168 <ff_wtoupper+0x18>
 800a166:	4b3e      	ldr	r3, [pc, #248]	@ (800a260 <ff_wtoupper+0x110>)
 800a168:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	1c9a      	adds	r2, r3, #2
 800a16e:	617a      	str	r2, [r7, #20]
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a174:	8a7b      	ldrh	r3, [r7, #18]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d068      	beq.n	800a24c <ff_wtoupper+0xfc>
 800a17a:	88fa      	ldrh	r2, [r7, #6]
 800a17c:	8a7b      	ldrh	r3, [r7, #18]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d364      	bcc.n	800a24c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	1c9a      	adds	r2, r3, #2
 800a186:	617a      	str	r2, [r7, #20]
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	823b      	strh	r3, [r7, #16]
 800a18c:	8a3b      	ldrh	r3, [r7, #16]
 800a18e:	0a1b      	lsrs	r3, r3, #8
 800a190:	81fb      	strh	r3, [r7, #14]
 800a192:	8a3b      	ldrh	r3, [r7, #16]
 800a194:	b2db      	uxtb	r3, r3
 800a196:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a198:	88fa      	ldrh	r2, [r7, #6]
 800a19a:	8a79      	ldrh	r1, [r7, #18]
 800a19c:	8a3b      	ldrh	r3, [r7, #16]
 800a19e:	440b      	add	r3, r1
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	da49      	bge.n	800a238 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a1a4:	89fb      	ldrh	r3, [r7, #14]
 800a1a6:	2b08      	cmp	r3, #8
 800a1a8:	d84f      	bhi.n	800a24a <ff_wtoupper+0xfa>
 800a1aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b0 <ff_wtoupper+0x60>)
 800a1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b0:	0800a1d5 	.word	0x0800a1d5
 800a1b4:	0800a1e7 	.word	0x0800a1e7
 800a1b8:	0800a1fd 	.word	0x0800a1fd
 800a1bc:	0800a205 	.word	0x0800a205
 800a1c0:	0800a20d 	.word	0x0800a20d
 800a1c4:	0800a215 	.word	0x0800a215
 800a1c8:	0800a21d 	.word	0x0800a21d
 800a1cc:	0800a225 	.word	0x0800a225
 800a1d0:	0800a22d 	.word	0x0800a22d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a1d4:	88fa      	ldrh	r2, [r7, #6]
 800a1d6:	8a7b      	ldrh	r3, [r7, #18]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	697a      	ldr	r2, [r7, #20]
 800a1de:	4413      	add	r3, r2
 800a1e0:	881b      	ldrh	r3, [r3, #0]
 800a1e2:	80fb      	strh	r3, [r7, #6]
 800a1e4:	e027      	b.n	800a236 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a1e6:	88fa      	ldrh	r2, [r7, #6]
 800a1e8:	8a7b      	ldrh	r3, [r7, #18]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	88fa      	ldrh	r2, [r7, #6]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	80fb      	strh	r3, [r7, #6]
 800a1fa:	e01c      	b.n	800a236 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a1fc:	88fb      	ldrh	r3, [r7, #6]
 800a1fe:	3b10      	subs	r3, #16
 800a200:	80fb      	strh	r3, [r7, #6]
 800a202:	e018      	b.n	800a236 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a204:	88fb      	ldrh	r3, [r7, #6]
 800a206:	3b20      	subs	r3, #32
 800a208:	80fb      	strh	r3, [r7, #6]
 800a20a:	e014      	b.n	800a236 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a20c:	88fb      	ldrh	r3, [r7, #6]
 800a20e:	3b30      	subs	r3, #48	@ 0x30
 800a210:	80fb      	strh	r3, [r7, #6]
 800a212:	e010      	b.n	800a236 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a214:	88fb      	ldrh	r3, [r7, #6]
 800a216:	3b1a      	subs	r3, #26
 800a218:	80fb      	strh	r3, [r7, #6]
 800a21a:	e00c      	b.n	800a236 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a21c:	88fb      	ldrh	r3, [r7, #6]
 800a21e:	3308      	adds	r3, #8
 800a220:	80fb      	strh	r3, [r7, #6]
 800a222:	e008      	b.n	800a236 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a224:	88fb      	ldrh	r3, [r7, #6]
 800a226:	3b50      	subs	r3, #80	@ 0x50
 800a228:	80fb      	strh	r3, [r7, #6]
 800a22a:	e004      	b.n	800a236 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a22c:	88fb      	ldrh	r3, [r7, #6]
 800a22e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a232:	80fb      	strh	r3, [r7, #6]
 800a234:	bf00      	nop
			}
			break;
 800a236:	e008      	b.n	800a24a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a238:	89fb      	ldrh	r3, [r7, #14]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d195      	bne.n	800a16a <ff_wtoupper+0x1a>
 800a23e:	8a3b      	ldrh	r3, [r7, #16]
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	4413      	add	r3, r2
 800a246:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a248:	e78f      	b.n	800a16a <ff_wtoupper+0x1a>
			break;
 800a24a:	bf00      	nop
	}

	return chr;
 800a24c:	88fb      	ldrh	r3, [r7, #6]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	371c      	adds	r7, #28
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	0801c388 	.word	0x0801c388
 800a260:	0801c57c 	.word	0x0801c57c

0800a264 <sniprintf>:
 800a264:	b40c      	push	{r2, r3}
 800a266:	b530      	push	{r4, r5, lr}
 800a268:	4b17      	ldr	r3, [pc, #92]	@ (800a2c8 <sniprintf+0x64>)
 800a26a:	1e0c      	subs	r4, r1, #0
 800a26c:	681d      	ldr	r5, [r3, #0]
 800a26e:	b09d      	sub	sp, #116	@ 0x74
 800a270:	da08      	bge.n	800a284 <sniprintf+0x20>
 800a272:	238b      	movs	r3, #139	@ 0x8b
 800a274:	602b      	str	r3, [r5, #0]
 800a276:	f04f 30ff 	mov.w	r0, #4294967295
 800a27a:	b01d      	add	sp, #116	@ 0x74
 800a27c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a280:	b002      	add	sp, #8
 800a282:	4770      	bx	lr
 800a284:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a288:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a28c:	bf14      	ite	ne
 800a28e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a292:	4623      	moveq	r3, r4
 800a294:	9304      	str	r3, [sp, #16]
 800a296:	9307      	str	r3, [sp, #28]
 800a298:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a29c:	9002      	str	r0, [sp, #8]
 800a29e:	9006      	str	r0, [sp, #24]
 800a2a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a2a4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a2a6:	ab21      	add	r3, sp, #132	@ 0x84
 800a2a8:	a902      	add	r1, sp, #8
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	9301      	str	r3, [sp, #4]
 800a2ae:	f000 f995 	bl	800a5dc <_svfiprintf_r>
 800a2b2:	1c43      	adds	r3, r0, #1
 800a2b4:	bfbc      	itt	lt
 800a2b6:	238b      	movlt	r3, #139	@ 0x8b
 800a2b8:	602b      	strlt	r3, [r5, #0]
 800a2ba:	2c00      	cmp	r4, #0
 800a2bc:	d0dd      	beq.n	800a27a <sniprintf+0x16>
 800a2be:	9b02      	ldr	r3, [sp, #8]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	701a      	strb	r2, [r3, #0]
 800a2c4:	e7d9      	b.n	800a27a <sniprintf+0x16>
 800a2c6:	bf00      	nop
 800a2c8:	200000e4 	.word	0x200000e4

0800a2cc <memset>:
 800a2cc:	4402      	add	r2, r0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d100      	bne.n	800a2d6 <memset+0xa>
 800a2d4:	4770      	bx	lr
 800a2d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2da:	e7f9      	b.n	800a2d0 <memset+0x4>

0800a2dc <__errno>:
 800a2dc:	4b01      	ldr	r3, [pc, #4]	@ (800a2e4 <__errno+0x8>)
 800a2de:	6818      	ldr	r0, [r3, #0]
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	200000e4 	.word	0x200000e4

0800a2e8 <__libc_init_array>:
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	4d0d      	ldr	r5, [pc, #52]	@ (800a320 <__libc_init_array+0x38>)
 800a2ec:	4c0d      	ldr	r4, [pc, #52]	@ (800a324 <__libc_init_array+0x3c>)
 800a2ee:	1b64      	subs	r4, r4, r5
 800a2f0:	10a4      	asrs	r4, r4, #2
 800a2f2:	2600      	movs	r6, #0
 800a2f4:	42a6      	cmp	r6, r4
 800a2f6:	d109      	bne.n	800a30c <__libc_init_array+0x24>
 800a2f8:	4d0b      	ldr	r5, [pc, #44]	@ (800a328 <__libc_init_array+0x40>)
 800a2fa:	4c0c      	ldr	r4, [pc, #48]	@ (800a32c <__libc_init_array+0x44>)
 800a2fc:	f000 fc66 	bl	800abcc <_init>
 800a300:	1b64      	subs	r4, r4, r5
 800a302:	10a4      	asrs	r4, r4, #2
 800a304:	2600      	movs	r6, #0
 800a306:	42a6      	cmp	r6, r4
 800a308:	d105      	bne.n	800a316 <__libc_init_array+0x2e>
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
 800a30c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a310:	4798      	blx	r3
 800a312:	3601      	adds	r6, #1
 800a314:	e7ee      	b.n	800a2f4 <__libc_init_array+0xc>
 800a316:	f855 3b04 	ldr.w	r3, [r5], #4
 800a31a:	4798      	blx	r3
 800a31c:	3601      	adds	r6, #1
 800a31e:	e7f2      	b.n	800a306 <__libc_init_array+0x1e>
 800a320:	0801c674 	.word	0x0801c674
 800a324:	0801c674 	.word	0x0801c674
 800a328:	0801c674 	.word	0x0801c674
 800a32c:	0801c678 	.word	0x0801c678

0800a330 <__retarget_lock_acquire_recursive>:
 800a330:	4770      	bx	lr

0800a332 <__retarget_lock_release_recursive>:
 800a332:	4770      	bx	lr

0800a334 <_free_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4605      	mov	r5, r0
 800a338:	2900      	cmp	r1, #0
 800a33a:	d041      	beq.n	800a3c0 <_free_r+0x8c>
 800a33c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a340:	1f0c      	subs	r4, r1, #4
 800a342:	2b00      	cmp	r3, #0
 800a344:	bfb8      	it	lt
 800a346:	18e4      	addlt	r4, r4, r3
 800a348:	f000 f8e0 	bl	800a50c <__malloc_lock>
 800a34c:	4a1d      	ldr	r2, [pc, #116]	@ (800a3c4 <_free_r+0x90>)
 800a34e:	6813      	ldr	r3, [r2, #0]
 800a350:	b933      	cbnz	r3, 800a360 <_free_r+0x2c>
 800a352:	6063      	str	r3, [r4, #4]
 800a354:	6014      	str	r4, [r2, #0]
 800a356:	4628      	mov	r0, r5
 800a358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a35c:	f000 b8dc 	b.w	800a518 <__malloc_unlock>
 800a360:	42a3      	cmp	r3, r4
 800a362:	d908      	bls.n	800a376 <_free_r+0x42>
 800a364:	6820      	ldr	r0, [r4, #0]
 800a366:	1821      	adds	r1, r4, r0
 800a368:	428b      	cmp	r3, r1
 800a36a:	bf01      	itttt	eq
 800a36c:	6819      	ldreq	r1, [r3, #0]
 800a36e:	685b      	ldreq	r3, [r3, #4]
 800a370:	1809      	addeq	r1, r1, r0
 800a372:	6021      	streq	r1, [r4, #0]
 800a374:	e7ed      	b.n	800a352 <_free_r+0x1e>
 800a376:	461a      	mov	r2, r3
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	b10b      	cbz	r3, 800a380 <_free_r+0x4c>
 800a37c:	42a3      	cmp	r3, r4
 800a37e:	d9fa      	bls.n	800a376 <_free_r+0x42>
 800a380:	6811      	ldr	r1, [r2, #0]
 800a382:	1850      	adds	r0, r2, r1
 800a384:	42a0      	cmp	r0, r4
 800a386:	d10b      	bne.n	800a3a0 <_free_r+0x6c>
 800a388:	6820      	ldr	r0, [r4, #0]
 800a38a:	4401      	add	r1, r0
 800a38c:	1850      	adds	r0, r2, r1
 800a38e:	4283      	cmp	r3, r0
 800a390:	6011      	str	r1, [r2, #0]
 800a392:	d1e0      	bne.n	800a356 <_free_r+0x22>
 800a394:	6818      	ldr	r0, [r3, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	6053      	str	r3, [r2, #4]
 800a39a:	4408      	add	r0, r1
 800a39c:	6010      	str	r0, [r2, #0]
 800a39e:	e7da      	b.n	800a356 <_free_r+0x22>
 800a3a0:	d902      	bls.n	800a3a8 <_free_r+0x74>
 800a3a2:	230c      	movs	r3, #12
 800a3a4:	602b      	str	r3, [r5, #0]
 800a3a6:	e7d6      	b.n	800a356 <_free_r+0x22>
 800a3a8:	6820      	ldr	r0, [r4, #0]
 800a3aa:	1821      	adds	r1, r4, r0
 800a3ac:	428b      	cmp	r3, r1
 800a3ae:	bf04      	itt	eq
 800a3b0:	6819      	ldreq	r1, [r3, #0]
 800a3b2:	685b      	ldreq	r3, [r3, #4]
 800a3b4:	6063      	str	r3, [r4, #4]
 800a3b6:	bf04      	itt	eq
 800a3b8:	1809      	addeq	r1, r1, r0
 800a3ba:	6021      	streq	r1, [r4, #0]
 800a3bc:	6054      	str	r4, [r2, #4]
 800a3be:	e7ca      	b.n	800a356 <_free_r+0x22>
 800a3c0:	bd38      	pop	{r3, r4, r5, pc}
 800a3c2:	bf00      	nop
 800a3c4:	2000740c 	.word	0x2000740c

0800a3c8 <sbrk_aligned>:
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	4e0f      	ldr	r6, [pc, #60]	@ (800a408 <sbrk_aligned+0x40>)
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	6831      	ldr	r1, [r6, #0]
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	b911      	cbnz	r1, 800a3da <sbrk_aligned+0x12>
 800a3d4:	f000 fba6 	bl	800ab24 <_sbrk_r>
 800a3d8:	6030      	str	r0, [r6, #0]
 800a3da:	4621      	mov	r1, r4
 800a3dc:	4628      	mov	r0, r5
 800a3de:	f000 fba1 	bl	800ab24 <_sbrk_r>
 800a3e2:	1c43      	adds	r3, r0, #1
 800a3e4:	d103      	bne.n	800a3ee <sbrk_aligned+0x26>
 800a3e6:	f04f 34ff 	mov.w	r4, #4294967295
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	bd70      	pop	{r4, r5, r6, pc}
 800a3ee:	1cc4      	adds	r4, r0, #3
 800a3f0:	f024 0403 	bic.w	r4, r4, #3
 800a3f4:	42a0      	cmp	r0, r4
 800a3f6:	d0f8      	beq.n	800a3ea <sbrk_aligned+0x22>
 800a3f8:	1a21      	subs	r1, r4, r0
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f000 fb92 	bl	800ab24 <_sbrk_r>
 800a400:	3001      	adds	r0, #1
 800a402:	d1f2      	bne.n	800a3ea <sbrk_aligned+0x22>
 800a404:	e7ef      	b.n	800a3e6 <sbrk_aligned+0x1e>
 800a406:	bf00      	nop
 800a408:	20007408 	.word	0x20007408

0800a40c <_malloc_r>:
 800a40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a410:	1ccd      	adds	r5, r1, #3
 800a412:	f025 0503 	bic.w	r5, r5, #3
 800a416:	3508      	adds	r5, #8
 800a418:	2d0c      	cmp	r5, #12
 800a41a:	bf38      	it	cc
 800a41c:	250c      	movcc	r5, #12
 800a41e:	2d00      	cmp	r5, #0
 800a420:	4606      	mov	r6, r0
 800a422:	db01      	blt.n	800a428 <_malloc_r+0x1c>
 800a424:	42a9      	cmp	r1, r5
 800a426:	d904      	bls.n	800a432 <_malloc_r+0x26>
 800a428:	230c      	movs	r3, #12
 800a42a:	6033      	str	r3, [r6, #0]
 800a42c:	2000      	movs	r0, #0
 800a42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a432:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a508 <_malloc_r+0xfc>
 800a436:	f000 f869 	bl	800a50c <__malloc_lock>
 800a43a:	f8d8 3000 	ldr.w	r3, [r8]
 800a43e:	461c      	mov	r4, r3
 800a440:	bb44      	cbnz	r4, 800a494 <_malloc_r+0x88>
 800a442:	4629      	mov	r1, r5
 800a444:	4630      	mov	r0, r6
 800a446:	f7ff ffbf 	bl	800a3c8 <sbrk_aligned>
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	4604      	mov	r4, r0
 800a44e:	d158      	bne.n	800a502 <_malloc_r+0xf6>
 800a450:	f8d8 4000 	ldr.w	r4, [r8]
 800a454:	4627      	mov	r7, r4
 800a456:	2f00      	cmp	r7, #0
 800a458:	d143      	bne.n	800a4e2 <_malloc_r+0xd6>
 800a45a:	2c00      	cmp	r4, #0
 800a45c:	d04b      	beq.n	800a4f6 <_malloc_r+0xea>
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	4639      	mov	r1, r7
 800a462:	4630      	mov	r0, r6
 800a464:	eb04 0903 	add.w	r9, r4, r3
 800a468:	f000 fb5c 	bl	800ab24 <_sbrk_r>
 800a46c:	4581      	cmp	r9, r0
 800a46e:	d142      	bne.n	800a4f6 <_malloc_r+0xea>
 800a470:	6821      	ldr	r1, [r4, #0]
 800a472:	1a6d      	subs	r5, r5, r1
 800a474:	4629      	mov	r1, r5
 800a476:	4630      	mov	r0, r6
 800a478:	f7ff ffa6 	bl	800a3c8 <sbrk_aligned>
 800a47c:	3001      	adds	r0, #1
 800a47e:	d03a      	beq.n	800a4f6 <_malloc_r+0xea>
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	442b      	add	r3, r5
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	f8d8 3000 	ldr.w	r3, [r8]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	bb62      	cbnz	r2, 800a4e8 <_malloc_r+0xdc>
 800a48e:	f8c8 7000 	str.w	r7, [r8]
 800a492:	e00f      	b.n	800a4b4 <_malloc_r+0xa8>
 800a494:	6822      	ldr	r2, [r4, #0]
 800a496:	1b52      	subs	r2, r2, r5
 800a498:	d420      	bmi.n	800a4dc <_malloc_r+0xd0>
 800a49a:	2a0b      	cmp	r2, #11
 800a49c:	d917      	bls.n	800a4ce <_malloc_r+0xc2>
 800a49e:	1961      	adds	r1, r4, r5
 800a4a0:	42a3      	cmp	r3, r4
 800a4a2:	6025      	str	r5, [r4, #0]
 800a4a4:	bf18      	it	ne
 800a4a6:	6059      	strne	r1, [r3, #4]
 800a4a8:	6863      	ldr	r3, [r4, #4]
 800a4aa:	bf08      	it	eq
 800a4ac:	f8c8 1000 	streq.w	r1, [r8]
 800a4b0:	5162      	str	r2, [r4, r5]
 800a4b2:	604b      	str	r3, [r1, #4]
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f000 f82f 	bl	800a518 <__malloc_unlock>
 800a4ba:	f104 000b 	add.w	r0, r4, #11
 800a4be:	1d23      	adds	r3, r4, #4
 800a4c0:	f020 0007 	bic.w	r0, r0, #7
 800a4c4:	1ac2      	subs	r2, r0, r3
 800a4c6:	bf1c      	itt	ne
 800a4c8:	1a1b      	subne	r3, r3, r0
 800a4ca:	50a3      	strne	r3, [r4, r2]
 800a4cc:	e7af      	b.n	800a42e <_malloc_r+0x22>
 800a4ce:	6862      	ldr	r2, [r4, #4]
 800a4d0:	42a3      	cmp	r3, r4
 800a4d2:	bf0c      	ite	eq
 800a4d4:	f8c8 2000 	streq.w	r2, [r8]
 800a4d8:	605a      	strne	r2, [r3, #4]
 800a4da:	e7eb      	b.n	800a4b4 <_malloc_r+0xa8>
 800a4dc:	4623      	mov	r3, r4
 800a4de:	6864      	ldr	r4, [r4, #4]
 800a4e0:	e7ae      	b.n	800a440 <_malloc_r+0x34>
 800a4e2:	463c      	mov	r4, r7
 800a4e4:	687f      	ldr	r7, [r7, #4]
 800a4e6:	e7b6      	b.n	800a456 <_malloc_r+0x4a>
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	42a3      	cmp	r3, r4
 800a4ee:	d1fb      	bne.n	800a4e8 <_malloc_r+0xdc>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	6053      	str	r3, [r2, #4]
 800a4f4:	e7de      	b.n	800a4b4 <_malloc_r+0xa8>
 800a4f6:	230c      	movs	r3, #12
 800a4f8:	6033      	str	r3, [r6, #0]
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f000 f80c 	bl	800a518 <__malloc_unlock>
 800a500:	e794      	b.n	800a42c <_malloc_r+0x20>
 800a502:	6005      	str	r5, [r0, #0]
 800a504:	e7d6      	b.n	800a4b4 <_malloc_r+0xa8>
 800a506:	bf00      	nop
 800a508:	2000740c 	.word	0x2000740c

0800a50c <__malloc_lock>:
 800a50c:	4801      	ldr	r0, [pc, #4]	@ (800a514 <__malloc_lock+0x8>)
 800a50e:	f7ff bf0f 	b.w	800a330 <__retarget_lock_acquire_recursive>
 800a512:	bf00      	nop
 800a514:	20007404 	.word	0x20007404

0800a518 <__malloc_unlock>:
 800a518:	4801      	ldr	r0, [pc, #4]	@ (800a520 <__malloc_unlock+0x8>)
 800a51a:	f7ff bf0a 	b.w	800a332 <__retarget_lock_release_recursive>
 800a51e:	bf00      	nop
 800a520:	20007404 	.word	0x20007404

0800a524 <__ssputs_r>:
 800a524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a528:	688e      	ldr	r6, [r1, #8]
 800a52a:	461f      	mov	r7, r3
 800a52c:	42be      	cmp	r6, r7
 800a52e:	680b      	ldr	r3, [r1, #0]
 800a530:	4682      	mov	sl, r0
 800a532:	460c      	mov	r4, r1
 800a534:	4690      	mov	r8, r2
 800a536:	d82d      	bhi.n	800a594 <__ssputs_r+0x70>
 800a538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a53c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a540:	d026      	beq.n	800a590 <__ssputs_r+0x6c>
 800a542:	6965      	ldr	r5, [r4, #20]
 800a544:	6909      	ldr	r1, [r1, #16]
 800a546:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a54a:	eba3 0901 	sub.w	r9, r3, r1
 800a54e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a552:	1c7b      	adds	r3, r7, #1
 800a554:	444b      	add	r3, r9
 800a556:	106d      	asrs	r5, r5, #1
 800a558:	429d      	cmp	r5, r3
 800a55a:	bf38      	it	cc
 800a55c:	461d      	movcc	r5, r3
 800a55e:	0553      	lsls	r3, r2, #21
 800a560:	d527      	bpl.n	800a5b2 <__ssputs_r+0x8e>
 800a562:	4629      	mov	r1, r5
 800a564:	f7ff ff52 	bl	800a40c <_malloc_r>
 800a568:	4606      	mov	r6, r0
 800a56a:	b360      	cbz	r0, 800a5c6 <__ssputs_r+0xa2>
 800a56c:	6921      	ldr	r1, [r4, #16]
 800a56e:	464a      	mov	r2, r9
 800a570:	f000 fae8 	bl	800ab44 <memcpy>
 800a574:	89a3      	ldrh	r3, [r4, #12]
 800a576:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a57a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a57e:	81a3      	strh	r3, [r4, #12]
 800a580:	6126      	str	r6, [r4, #16]
 800a582:	6165      	str	r5, [r4, #20]
 800a584:	444e      	add	r6, r9
 800a586:	eba5 0509 	sub.w	r5, r5, r9
 800a58a:	6026      	str	r6, [r4, #0]
 800a58c:	60a5      	str	r5, [r4, #8]
 800a58e:	463e      	mov	r6, r7
 800a590:	42be      	cmp	r6, r7
 800a592:	d900      	bls.n	800a596 <__ssputs_r+0x72>
 800a594:	463e      	mov	r6, r7
 800a596:	6820      	ldr	r0, [r4, #0]
 800a598:	4632      	mov	r2, r6
 800a59a:	4641      	mov	r1, r8
 800a59c:	f000 faa8 	bl	800aaf0 <memmove>
 800a5a0:	68a3      	ldr	r3, [r4, #8]
 800a5a2:	1b9b      	subs	r3, r3, r6
 800a5a4:	60a3      	str	r3, [r4, #8]
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	4433      	add	r3, r6
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b2:	462a      	mov	r2, r5
 800a5b4:	f000 fad4 	bl	800ab60 <_realloc_r>
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d1e0      	bne.n	800a580 <__ssputs_r+0x5c>
 800a5be:	6921      	ldr	r1, [r4, #16]
 800a5c0:	4650      	mov	r0, sl
 800a5c2:	f7ff feb7 	bl	800a334 <_free_r>
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	f8ca 3000 	str.w	r3, [sl]
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5d2:	81a3      	strh	r3, [r4, #12]
 800a5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d8:	e7e9      	b.n	800a5ae <__ssputs_r+0x8a>
	...

0800a5dc <_svfiprintf_r>:
 800a5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e0:	4698      	mov	r8, r3
 800a5e2:	898b      	ldrh	r3, [r1, #12]
 800a5e4:	061b      	lsls	r3, r3, #24
 800a5e6:	b09d      	sub	sp, #116	@ 0x74
 800a5e8:	4607      	mov	r7, r0
 800a5ea:	460d      	mov	r5, r1
 800a5ec:	4614      	mov	r4, r2
 800a5ee:	d510      	bpl.n	800a612 <_svfiprintf_r+0x36>
 800a5f0:	690b      	ldr	r3, [r1, #16]
 800a5f2:	b973      	cbnz	r3, 800a612 <_svfiprintf_r+0x36>
 800a5f4:	2140      	movs	r1, #64	@ 0x40
 800a5f6:	f7ff ff09 	bl	800a40c <_malloc_r>
 800a5fa:	6028      	str	r0, [r5, #0]
 800a5fc:	6128      	str	r0, [r5, #16]
 800a5fe:	b930      	cbnz	r0, 800a60e <_svfiprintf_r+0x32>
 800a600:	230c      	movs	r3, #12
 800a602:	603b      	str	r3, [r7, #0]
 800a604:	f04f 30ff 	mov.w	r0, #4294967295
 800a608:	b01d      	add	sp, #116	@ 0x74
 800a60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60e:	2340      	movs	r3, #64	@ 0x40
 800a610:	616b      	str	r3, [r5, #20]
 800a612:	2300      	movs	r3, #0
 800a614:	9309      	str	r3, [sp, #36]	@ 0x24
 800a616:	2320      	movs	r3, #32
 800a618:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a61c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a620:	2330      	movs	r3, #48	@ 0x30
 800a622:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a7c0 <_svfiprintf_r+0x1e4>
 800a626:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a62a:	f04f 0901 	mov.w	r9, #1
 800a62e:	4623      	mov	r3, r4
 800a630:	469a      	mov	sl, r3
 800a632:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a636:	b10a      	cbz	r2, 800a63c <_svfiprintf_r+0x60>
 800a638:	2a25      	cmp	r2, #37	@ 0x25
 800a63a:	d1f9      	bne.n	800a630 <_svfiprintf_r+0x54>
 800a63c:	ebba 0b04 	subs.w	fp, sl, r4
 800a640:	d00b      	beq.n	800a65a <_svfiprintf_r+0x7e>
 800a642:	465b      	mov	r3, fp
 800a644:	4622      	mov	r2, r4
 800a646:	4629      	mov	r1, r5
 800a648:	4638      	mov	r0, r7
 800a64a:	f7ff ff6b 	bl	800a524 <__ssputs_r>
 800a64e:	3001      	adds	r0, #1
 800a650:	f000 80a7 	beq.w	800a7a2 <_svfiprintf_r+0x1c6>
 800a654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a656:	445a      	add	r2, fp
 800a658:	9209      	str	r2, [sp, #36]	@ 0x24
 800a65a:	f89a 3000 	ldrb.w	r3, [sl]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 809f 	beq.w	800a7a2 <_svfiprintf_r+0x1c6>
 800a664:	2300      	movs	r3, #0
 800a666:	f04f 32ff 	mov.w	r2, #4294967295
 800a66a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a66e:	f10a 0a01 	add.w	sl, sl, #1
 800a672:	9304      	str	r3, [sp, #16]
 800a674:	9307      	str	r3, [sp, #28]
 800a676:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a67a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a67c:	4654      	mov	r4, sl
 800a67e:	2205      	movs	r2, #5
 800a680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a684:	484e      	ldr	r0, [pc, #312]	@ (800a7c0 <_svfiprintf_r+0x1e4>)
 800a686:	f7f5 fdab 	bl	80001e0 <memchr>
 800a68a:	9a04      	ldr	r2, [sp, #16]
 800a68c:	b9d8      	cbnz	r0, 800a6c6 <_svfiprintf_r+0xea>
 800a68e:	06d0      	lsls	r0, r2, #27
 800a690:	bf44      	itt	mi
 800a692:	2320      	movmi	r3, #32
 800a694:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a698:	0711      	lsls	r1, r2, #28
 800a69a:	bf44      	itt	mi
 800a69c:	232b      	movmi	r3, #43	@ 0x2b
 800a69e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6a8:	d015      	beq.n	800a6d6 <_svfiprintf_r+0xfa>
 800a6aa:	9a07      	ldr	r2, [sp, #28]
 800a6ac:	4654      	mov	r4, sl
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	f04f 0c0a 	mov.w	ip, #10
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6ba:	3b30      	subs	r3, #48	@ 0x30
 800a6bc:	2b09      	cmp	r3, #9
 800a6be:	d94b      	bls.n	800a758 <_svfiprintf_r+0x17c>
 800a6c0:	b1b0      	cbz	r0, 800a6f0 <_svfiprintf_r+0x114>
 800a6c2:	9207      	str	r2, [sp, #28]
 800a6c4:	e014      	b.n	800a6f0 <_svfiprintf_r+0x114>
 800a6c6:	eba0 0308 	sub.w	r3, r0, r8
 800a6ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	9304      	str	r3, [sp, #16]
 800a6d2:	46a2      	mov	sl, r4
 800a6d4:	e7d2      	b.n	800a67c <_svfiprintf_r+0xa0>
 800a6d6:	9b03      	ldr	r3, [sp, #12]
 800a6d8:	1d19      	adds	r1, r3, #4
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	9103      	str	r1, [sp, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	bfbb      	ittet	lt
 800a6e2:	425b      	neglt	r3, r3
 800a6e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a6e8:	9307      	strge	r3, [sp, #28]
 800a6ea:	9307      	strlt	r3, [sp, #28]
 800a6ec:	bfb8      	it	lt
 800a6ee:	9204      	strlt	r2, [sp, #16]
 800a6f0:	7823      	ldrb	r3, [r4, #0]
 800a6f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6f4:	d10a      	bne.n	800a70c <_svfiprintf_r+0x130>
 800a6f6:	7863      	ldrb	r3, [r4, #1]
 800a6f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6fa:	d132      	bne.n	800a762 <_svfiprintf_r+0x186>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	1d1a      	adds	r2, r3, #4
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	9203      	str	r2, [sp, #12]
 800a704:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a708:	3402      	adds	r4, #2
 800a70a:	9305      	str	r3, [sp, #20]
 800a70c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a7d0 <_svfiprintf_r+0x1f4>
 800a710:	7821      	ldrb	r1, [r4, #0]
 800a712:	2203      	movs	r2, #3
 800a714:	4650      	mov	r0, sl
 800a716:	f7f5 fd63 	bl	80001e0 <memchr>
 800a71a:	b138      	cbz	r0, 800a72c <_svfiprintf_r+0x150>
 800a71c:	9b04      	ldr	r3, [sp, #16]
 800a71e:	eba0 000a 	sub.w	r0, r0, sl
 800a722:	2240      	movs	r2, #64	@ 0x40
 800a724:	4082      	lsls	r2, r0
 800a726:	4313      	orrs	r3, r2
 800a728:	3401      	adds	r4, #1
 800a72a:	9304      	str	r3, [sp, #16]
 800a72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a730:	4824      	ldr	r0, [pc, #144]	@ (800a7c4 <_svfiprintf_r+0x1e8>)
 800a732:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a736:	2206      	movs	r2, #6
 800a738:	f7f5 fd52 	bl	80001e0 <memchr>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	d036      	beq.n	800a7ae <_svfiprintf_r+0x1d2>
 800a740:	4b21      	ldr	r3, [pc, #132]	@ (800a7c8 <_svfiprintf_r+0x1ec>)
 800a742:	bb1b      	cbnz	r3, 800a78c <_svfiprintf_r+0x1b0>
 800a744:	9b03      	ldr	r3, [sp, #12]
 800a746:	3307      	adds	r3, #7
 800a748:	f023 0307 	bic.w	r3, r3, #7
 800a74c:	3308      	adds	r3, #8
 800a74e:	9303      	str	r3, [sp, #12]
 800a750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a752:	4433      	add	r3, r6
 800a754:	9309      	str	r3, [sp, #36]	@ 0x24
 800a756:	e76a      	b.n	800a62e <_svfiprintf_r+0x52>
 800a758:	fb0c 3202 	mla	r2, ip, r2, r3
 800a75c:	460c      	mov	r4, r1
 800a75e:	2001      	movs	r0, #1
 800a760:	e7a8      	b.n	800a6b4 <_svfiprintf_r+0xd8>
 800a762:	2300      	movs	r3, #0
 800a764:	3401      	adds	r4, #1
 800a766:	9305      	str	r3, [sp, #20]
 800a768:	4619      	mov	r1, r3
 800a76a:	f04f 0c0a 	mov.w	ip, #10
 800a76e:	4620      	mov	r0, r4
 800a770:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a774:	3a30      	subs	r2, #48	@ 0x30
 800a776:	2a09      	cmp	r2, #9
 800a778:	d903      	bls.n	800a782 <_svfiprintf_r+0x1a6>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0c6      	beq.n	800a70c <_svfiprintf_r+0x130>
 800a77e:	9105      	str	r1, [sp, #20]
 800a780:	e7c4      	b.n	800a70c <_svfiprintf_r+0x130>
 800a782:	fb0c 2101 	mla	r1, ip, r1, r2
 800a786:	4604      	mov	r4, r0
 800a788:	2301      	movs	r3, #1
 800a78a:	e7f0      	b.n	800a76e <_svfiprintf_r+0x192>
 800a78c:	ab03      	add	r3, sp, #12
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	462a      	mov	r2, r5
 800a792:	4b0e      	ldr	r3, [pc, #56]	@ (800a7cc <_svfiprintf_r+0x1f0>)
 800a794:	a904      	add	r1, sp, #16
 800a796:	4638      	mov	r0, r7
 800a798:	f3af 8000 	nop.w
 800a79c:	1c42      	adds	r2, r0, #1
 800a79e:	4606      	mov	r6, r0
 800a7a0:	d1d6      	bne.n	800a750 <_svfiprintf_r+0x174>
 800a7a2:	89ab      	ldrh	r3, [r5, #12]
 800a7a4:	065b      	lsls	r3, r3, #25
 800a7a6:	f53f af2d 	bmi.w	800a604 <_svfiprintf_r+0x28>
 800a7aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7ac:	e72c      	b.n	800a608 <_svfiprintf_r+0x2c>
 800a7ae:	ab03      	add	r3, sp, #12
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	462a      	mov	r2, r5
 800a7b4:	4b05      	ldr	r3, [pc, #20]	@ (800a7cc <_svfiprintf_r+0x1f0>)
 800a7b6:	a904      	add	r1, sp, #16
 800a7b8:	4638      	mov	r0, r7
 800a7ba:	f000 f879 	bl	800a8b0 <_printf_i>
 800a7be:	e7ed      	b.n	800a79c <_svfiprintf_r+0x1c0>
 800a7c0:	0801c638 	.word	0x0801c638
 800a7c4:	0801c642 	.word	0x0801c642
 800a7c8:	00000000 	.word	0x00000000
 800a7cc:	0800a525 	.word	0x0800a525
 800a7d0:	0801c63e 	.word	0x0801c63e

0800a7d4 <_printf_common>:
 800a7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d8:	4616      	mov	r6, r2
 800a7da:	4698      	mov	r8, r3
 800a7dc:	688a      	ldr	r2, [r1, #8]
 800a7de:	690b      	ldr	r3, [r1, #16]
 800a7e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	bfb8      	it	lt
 800a7e8:	4613      	movlt	r3, r2
 800a7ea:	6033      	str	r3, [r6, #0]
 800a7ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a7f0:	4607      	mov	r7, r0
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	b10a      	cbz	r2, 800a7fa <_printf_common+0x26>
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	6033      	str	r3, [r6, #0]
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	0699      	lsls	r1, r3, #26
 800a7fe:	bf42      	ittt	mi
 800a800:	6833      	ldrmi	r3, [r6, #0]
 800a802:	3302      	addmi	r3, #2
 800a804:	6033      	strmi	r3, [r6, #0]
 800a806:	6825      	ldr	r5, [r4, #0]
 800a808:	f015 0506 	ands.w	r5, r5, #6
 800a80c:	d106      	bne.n	800a81c <_printf_common+0x48>
 800a80e:	f104 0a19 	add.w	sl, r4, #25
 800a812:	68e3      	ldr	r3, [r4, #12]
 800a814:	6832      	ldr	r2, [r6, #0]
 800a816:	1a9b      	subs	r3, r3, r2
 800a818:	42ab      	cmp	r3, r5
 800a81a:	dc26      	bgt.n	800a86a <_printf_common+0x96>
 800a81c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a820:	6822      	ldr	r2, [r4, #0]
 800a822:	3b00      	subs	r3, #0
 800a824:	bf18      	it	ne
 800a826:	2301      	movne	r3, #1
 800a828:	0692      	lsls	r2, r2, #26
 800a82a:	d42b      	bmi.n	800a884 <_printf_common+0xb0>
 800a82c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a830:	4641      	mov	r1, r8
 800a832:	4638      	mov	r0, r7
 800a834:	47c8      	blx	r9
 800a836:	3001      	adds	r0, #1
 800a838:	d01e      	beq.n	800a878 <_printf_common+0xa4>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	6922      	ldr	r2, [r4, #16]
 800a83e:	f003 0306 	and.w	r3, r3, #6
 800a842:	2b04      	cmp	r3, #4
 800a844:	bf02      	ittt	eq
 800a846:	68e5      	ldreq	r5, [r4, #12]
 800a848:	6833      	ldreq	r3, [r6, #0]
 800a84a:	1aed      	subeq	r5, r5, r3
 800a84c:	68a3      	ldr	r3, [r4, #8]
 800a84e:	bf0c      	ite	eq
 800a850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a854:	2500      	movne	r5, #0
 800a856:	4293      	cmp	r3, r2
 800a858:	bfc4      	itt	gt
 800a85a:	1a9b      	subgt	r3, r3, r2
 800a85c:	18ed      	addgt	r5, r5, r3
 800a85e:	2600      	movs	r6, #0
 800a860:	341a      	adds	r4, #26
 800a862:	42b5      	cmp	r5, r6
 800a864:	d11a      	bne.n	800a89c <_printf_common+0xc8>
 800a866:	2000      	movs	r0, #0
 800a868:	e008      	b.n	800a87c <_printf_common+0xa8>
 800a86a:	2301      	movs	r3, #1
 800a86c:	4652      	mov	r2, sl
 800a86e:	4641      	mov	r1, r8
 800a870:	4638      	mov	r0, r7
 800a872:	47c8      	blx	r9
 800a874:	3001      	adds	r0, #1
 800a876:	d103      	bne.n	800a880 <_printf_common+0xac>
 800a878:	f04f 30ff 	mov.w	r0, #4294967295
 800a87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a880:	3501      	adds	r5, #1
 800a882:	e7c6      	b.n	800a812 <_printf_common+0x3e>
 800a884:	18e1      	adds	r1, r4, r3
 800a886:	1c5a      	adds	r2, r3, #1
 800a888:	2030      	movs	r0, #48	@ 0x30
 800a88a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a88e:	4422      	add	r2, r4
 800a890:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a894:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a898:	3302      	adds	r3, #2
 800a89a:	e7c7      	b.n	800a82c <_printf_common+0x58>
 800a89c:	2301      	movs	r3, #1
 800a89e:	4622      	mov	r2, r4
 800a8a0:	4641      	mov	r1, r8
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	47c8      	blx	r9
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	d0e6      	beq.n	800a878 <_printf_common+0xa4>
 800a8aa:	3601      	adds	r6, #1
 800a8ac:	e7d9      	b.n	800a862 <_printf_common+0x8e>
	...

0800a8b0 <_printf_i>:
 800a8b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b4:	7e0f      	ldrb	r7, [r1, #24]
 800a8b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8b8:	2f78      	cmp	r7, #120	@ 0x78
 800a8ba:	4691      	mov	r9, r2
 800a8bc:	4680      	mov	r8, r0
 800a8be:	460c      	mov	r4, r1
 800a8c0:	469a      	mov	sl, r3
 800a8c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8c6:	d807      	bhi.n	800a8d8 <_printf_i+0x28>
 800a8c8:	2f62      	cmp	r7, #98	@ 0x62
 800a8ca:	d80a      	bhi.n	800a8e2 <_printf_i+0x32>
 800a8cc:	2f00      	cmp	r7, #0
 800a8ce:	f000 80d2 	beq.w	800aa76 <_printf_i+0x1c6>
 800a8d2:	2f58      	cmp	r7, #88	@ 0x58
 800a8d4:	f000 80b9 	beq.w	800aa4a <_printf_i+0x19a>
 800a8d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a8e0:	e03a      	b.n	800a958 <_printf_i+0xa8>
 800a8e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a8e6:	2b15      	cmp	r3, #21
 800a8e8:	d8f6      	bhi.n	800a8d8 <_printf_i+0x28>
 800a8ea:	a101      	add	r1, pc, #4	@ (adr r1, 800a8f0 <_printf_i+0x40>)
 800a8ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8f0:	0800a949 	.word	0x0800a949
 800a8f4:	0800a95d 	.word	0x0800a95d
 800a8f8:	0800a8d9 	.word	0x0800a8d9
 800a8fc:	0800a8d9 	.word	0x0800a8d9
 800a900:	0800a8d9 	.word	0x0800a8d9
 800a904:	0800a8d9 	.word	0x0800a8d9
 800a908:	0800a95d 	.word	0x0800a95d
 800a90c:	0800a8d9 	.word	0x0800a8d9
 800a910:	0800a8d9 	.word	0x0800a8d9
 800a914:	0800a8d9 	.word	0x0800a8d9
 800a918:	0800a8d9 	.word	0x0800a8d9
 800a91c:	0800aa5d 	.word	0x0800aa5d
 800a920:	0800a987 	.word	0x0800a987
 800a924:	0800aa17 	.word	0x0800aa17
 800a928:	0800a8d9 	.word	0x0800a8d9
 800a92c:	0800a8d9 	.word	0x0800a8d9
 800a930:	0800aa7f 	.word	0x0800aa7f
 800a934:	0800a8d9 	.word	0x0800a8d9
 800a938:	0800a987 	.word	0x0800a987
 800a93c:	0800a8d9 	.word	0x0800a8d9
 800a940:	0800a8d9 	.word	0x0800a8d9
 800a944:	0800aa1f 	.word	0x0800aa1f
 800a948:	6833      	ldr	r3, [r6, #0]
 800a94a:	1d1a      	adds	r2, r3, #4
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	6032      	str	r2, [r6, #0]
 800a950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a954:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a958:	2301      	movs	r3, #1
 800a95a:	e09d      	b.n	800aa98 <_printf_i+0x1e8>
 800a95c:	6833      	ldr	r3, [r6, #0]
 800a95e:	6820      	ldr	r0, [r4, #0]
 800a960:	1d19      	adds	r1, r3, #4
 800a962:	6031      	str	r1, [r6, #0]
 800a964:	0606      	lsls	r6, r0, #24
 800a966:	d501      	bpl.n	800a96c <_printf_i+0xbc>
 800a968:	681d      	ldr	r5, [r3, #0]
 800a96a:	e003      	b.n	800a974 <_printf_i+0xc4>
 800a96c:	0645      	lsls	r5, r0, #25
 800a96e:	d5fb      	bpl.n	800a968 <_printf_i+0xb8>
 800a970:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a974:	2d00      	cmp	r5, #0
 800a976:	da03      	bge.n	800a980 <_printf_i+0xd0>
 800a978:	232d      	movs	r3, #45	@ 0x2d
 800a97a:	426d      	negs	r5, r5
 800a97c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a980:	4859      	ldr	r0, [pc, #356]	@ (800aae8 <_printf_i+0x238>)
 800a982:	230a      	movs	r3, #10
 800a984:	e011      	b.n	800a9aa <_printf_i+0xfa>
 800a986:	6821      	ldr	r1, [r4, #0]
 800a988:	6833      	ldr	r3, [r6, #0]
 800a98a:	0608      	lsls	r0, r1, #24
 800a98c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a990:	d402      	bmi.n	800a998 <_printf_i+0xe8>
 800a992:	0649      	lsls	r1, r1, #25
 800a994:	bf48      	it	mi
 800a996:	b2ad      	uxthmi	r5, r5
 800a998:	2f6f      	cmp	r7, #111	@ 0x6f
 800a99a:	4853      	ldr	r0, [pc, #332]	@ (800aae8 <_printf_i+0x238>)
 800a99c:	6033      	str	r3, [r6, #0]
 800a99e:	bf14      	ite	ne
 800a9a0:	230a      	movne	r3, #10
 800a9a2:	2308      	moveq	r3, #8
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9aa:	6866      	ldr	r6, [r4, #4]
 800a9ac:	60a6      	str	r6, [r4, #8]
 800a9ae:	2e00      	cmp	r6, #0
 800a9b0:	bfa2      	ittt	ge
 800a9b2:	6821      	ldrge	r1, [r4, #0]
 800a9b4:	f021 0104 	bicge.w	r1, r1, #4
 800a9b8:	6021      	strge	r1, [r4, #0]
 800a9ba:	b90d      	cbnz	r5, 800a9c0 <_printf_i+0x110>
 800a9bc:	2e00      	cmp	r6, #0
 800a9be:	d04b      	beq.n	800aa58 <_printf_i+0x1a8>
 800a9c0:	4616      	mov	r6, r2
 800a9c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9c6:	fb03 5711 	mls	r7, r3, r1, r5
 800a9ca:	5dc7      	ldrb	r7, [r0, r7]
 800a9cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9d0:	462f      	mov	r7, r5
 800a9d2:	42bb      	cmp	r3, r7
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	d9f4      	bls.n	800a9c2 <_printf_i+0x112>
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d10b      	bne.n	800a9f4 <_printf_i+0x144>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	07df      	lsls	r7, r3, #31
 800a9e0:	d508      	bpl.n	800a9f4 <_printf_i+0x144>
 800a9e2:	6923      	ldr	r3, [r4, #16]
 800a9e4:	6861      	ldr	r1, [r4, #4]
 800a9e6:	4299      	cmp	r1, r3
 800a9e8:	bfde      	ittt	le
 800a9ea:	2330      	movle	r3, #48	@ 0x30
 800a9ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9f4:	1b92      	subs	r2, r2, r6
 800a9f6:	6122      	str	r2, [r4, #16]
 800a9f8:	f8cd a000 	str.w	sl, [sp]
 800a9fc:	464b      	mov	r3, r9
 800a9fe:	aa03      	add	r2, sp, #12
 800aa00:	4621      	mov	r1, r4
 800aa02:	4640      	mov	r0, r8
 800aa04:	f7ff fee6 	bl	800a7d4 <_printf_common>
 800aa08:	3001      	adds	r0, #1
 800aa0a:	d14a      	bne.n	800aaa2 <_printf_i+0x1f2>
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa10:	b004      	add	sp, #16
 800aa12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	f043 0320 	orr.w	r3, r3, #32
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	4833      	ldr	r0, [pc, #204]	@ (800aaec <_printf_i+0x23c>)
 800aa20:	2778      	movs	r7, #120	@ 0x78
 800aa22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	6831      	ldr	r1, [r6, #0]
 800aa2a:	061f      	lsls	r7, r3, #24
 800aa2c:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa30:	d402      	bmi.n	800aa38 <_printf_i+0x188>
 800aa32:	065f      	lsls	r7, r3, #25
 800aa34:	bf48      	it	mi
 800aa36:	b2ad      	uxthmi	r5, r5
 800aa38:	6031      	str	r1, [r6, #0]
 800aa3a:	07d9      	lsls	r1, r3, #31
 800aa3c:	bf44      	itt	mi
 800aa3e:	f043 0320 	orrmi.w	r3, r3, #32
 800aa42:	6023      	strmi	r3, [r4, #0]
 800aa44:	b11d      	cbz	r5, 800aa4e <_printf_i+0x19e>
 800aa46:	2310      	movs	r3, #16
 800aa48:	e7ac      	b.n	800a9a4 <_printf_i+0xf4>
 800aa4a:	4827      	ldr	r0, [pc, #156]	@ (800aae8 <_printf_i+0x238>)
 800aa4c:	e7e9      	b.n	800aa22 <_printf_i+0x172>
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	f023 0320 	bic.w	r3, r3, #32
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	e7f6      	b.n	800aa46 <_printf_i+0x196>
 800aa58:	4616      	mov	r6, r2
 800aa5a:	e7bd      	b.n	800a9d8 <_printf_i+0x128>
 800aa5c:	6833      	ldr	r3, [r6, #0]
 800aa5e:	6825      	ldr	r5, [r4, #0]
 800aa60:	6961      	ldr	r1, [r4, #20]
 800aa62:	1d18      	adds	r0, r3, #4
 800aa64:	6030      	str	r0, [r6, #0]
 800aa66:	062e      	lsls	r6, r5, #24
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	d501      	bpl.n	800aa70 <_printf_i+0x1c0>
 800aa6c:	6019      	str	r1, [r3, #0]
 800aa6e:	e002      	b.n	800aa76 <_printf_i+0x1c6>
 800aa70:	0668      	lsls	r0, r5, #25
 800aa72:	d5fb      	bpl.n	800aa6c <_printf_i+0x1bc>
 800aa74:	8019      	strh	r1, [r3, #0]
 800aa76:	2300      	movs	r3, #0
 800aa78:	6123      	str	r3, [r4, #16]
 800aa7a:	4616      	mov	r6, r2
 800aa7c:	e7bc      	b.n	800a9f8 <_printf_i+0x148>
 800aa7e:	6833      	ldr	r3, [r6, #0]
 800aa80:	1d1a      	adds	r2, r3, #4
 800aa82:	6032      	str	r2, [r6, #0]
 800aa84:	681e      	ldr	r6, [r3, #0]
 800aa86:	6862      	ldr	r2, [r4, #4]
 800aa88:	2100      	movs	r1, #0
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	f7f5 fba8 	bl	80001e0 <memchr>
 800aa90:	b108      	cbz	r0, 800aa96 <_printf_i+0x1e6>
 800aa92:	1b80      	subs	r0, r0, r6
 800aa94:	6060      	str	r0, [r4, #4]
 800aa96:	6863      	ldr	r3, [r4, #4]
 800aa98:	6123      	str	r3, [r4, #16]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aaa0:	e7aa      	b.n	800a9f8 <_printf_i+0x148>
 800aaa2:	6923      	ldr	r3, [r4, #16]
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	47d0      	blx	sl
 800aaac:	3001      	adds	r0, #1
 800aaae:	d0ad      	beq.n	800aa0c <_printf_i+0x15c>
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	079b      	lsls	r3, r3, #30
 800aab4:	d413      	bmi.n	800aade <_printf_i+0x22e>
 800aab6:	68e0      	ldr	r0, [r4, #12]
 800aab8:	9b03      	ldr	r3, [sp, #12]
 800aaba:	4298      	cmp	r0, r3
 800aabc:	bfb8      	it	lt
 800aabe:	4618      	movlt	r0, r3
 800aac0:	e7a6      	b.n	800aa10 <_printf_i+0x160>
 800aac2:	2301      	movs	r3, #1
 800aac4:	4632      	mov	r2, r6
 800aac6:	4649      	mov	r1, r9
 800aac8:	4640      	mov	r0, r8
 800aaca:	47d0      	blx	sl
 800aacc:	3001      	adds	r0, #1
 800aace:	d09d      	beq.n	800aa0c <_printf_i+0x15c>
 800aad0:	3501      	adds	r5, #1
 800aad2:	68e3      	ldr	r3, [r4, #12]
 800aad4:	9903      	ldr	r1, [sp, #12]
 800aad6:	1a5b      	subs	r3, r3, r1
 800aad8:	42ab      	cmp	r3, r5
 800aada:	dcf2      	bgt.n	800aac2 <_printf_i+0x212>
 800aadc:	e7eb      	b.n	800aab6 <_printf_i+0x206>
 800aade:	2500      	movs	r5, #0
 800aae0:	f104 0619 	add.w	r6, r4, #25
 800aae4:	e7f5      	b.n	800aad2 <_printf_i+0x222>
 800aae6:	bf00      	nop
 800aae8:	0801c649 	.word	0x0801c649
 800aaec:	0801c65a 	.word	0x0801c65a

0800aaf0 <memmove>:
 800aaf0:	4288      	cmp	r0, r1
 800aaf2:	b510      	push	{r4, lr}
 800aaf4:	eb01 0402 	add.w	r4, r1, r2
 800aaf8:	d902      	bls.n	800ab00 <memmove+0x10>
 800aafa:	4284      	cmp	r4, r0
 800aafc:	4623      	mov	r3, r4
 800aafe:	d807      	bhi.n	800ab10 <memmove+0x20>
 800ab00:	1e43      	subs	r3, r0, #1
 800ab02:	42a1      	cmp	r1, r4
 800ab04:	d008      	beq.n	800ab18 <memmove+0x28>
 800ab06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab0e:	e7f8      	b.n	800ab02 <memmove+0x12>
 800ab10:	4402      	add	r2, r0
 800ab12:	4601      	mov	r1, r0
 800ab14:	428a      	cmp	r2, r1
 800ab16:	d100      	bne.n	800ab1a <memmove+0x2a>
 800ab18:	bd10      	pop	{r4, pc}
 800ab1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab22:	e7f7      	b.n	800ab14 <memmove+0x24>

0800ab24 <_sbrk_r>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	4d06      	ldr	r5, [pc, #24]	@ (800ab40 <_sbrk_r+0x1c>)
 800ab28:	2300      	movs	r3, #0
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	4608      	mov	r0, r1
 800ab2e:	602b      	str	r3, [r5, #0]
 800ab30:	f7f9 f8f8 	bl	8003d24 <_sbrk>
 800ab34:	1c43      	adds	r3, r0, #1
 800ab36:	d102      	bne.n	800ab3e <_sbrk_r+0x1a>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	b103      	cbz	r3, 800ab3e <_sbrk_r+0x1a>
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	bd38      	pop	{r3, r4, r5, pc}
 800ab40:	20007400 	.word	0x20007400

0800ab44 <memcpy>:
 800ab44:	440a      	add	r2, r1
 800ab46:	4291      	cmp	r1, r2
 800ab48:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab4c:	d100      	bne.n	800ab50 <memcpy+0xc>
 800ab4e:	4770      	bx	lr
 800ab50:	b510      	push	{r4, lr}
 800ab52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab5a:	4291      	cmp	r1, r2
 800ab5c:	d1f9      	bne.n	800ab52 <memcpy+0xe>
 800ab5e:	bd10      	pop	{r4, pc}

0800ab60 <_realloc_r>:
 800ab60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab64:	4680      	mov	r8, r0
 800ab66:	4615      	mov	r5, r2
 800ab68:	460c      	mov	r4, r1
 800ab6a:	b921      	cbnz	r1, 800ab76 <_realloc_r+0x16>
 800ab6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab70:	4611      	mov	r1, r2
 800ab72:	f7ff bc4b 	b.w	800a40c <_malloc_r>
 800ab76:	b92a      	cbnz	r2, 800ab84 <_realloc_r+0x24>
 800ab78:	f7ff fbdc 	bl	800a334 <_free_r>
 800ab7c:	2400      	movs	r4, #0
 800ab7e:	4620      	mov	r0, r4
 800ab80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab84:	f000 f81a 	bl	800abbc <_malloc_usable_size_r>
 800ab88:	4285      	cmp	r5, r0
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	d802      	bhi.n	800ab94 <_realloc_r+0x34>
 800ab8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ab92:	d8f4      	bhi.n	800ab7e <_realloc_r+0x1e>
 800ab94:	4629      	mov	r1, r5
 800ab96:	4640      	mov	r0, r8
 800ab98:	f7ff fc38 	bl	800a40c <_malloc_r>
 800ab9c:	4607      	mov	r7, r0
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d0ec      	beq.n	800ab7c <_realloc_r+0x1c>
 800aba2:	42b5      	cmp	r5, r6
 800aba4:	462a      	mov	r2, r5
 800aba6:	4621      	mov	r1, r4
 800aba8:	bf28      	it	cs
 800abaa:	4632      	movcs	r2, r6
 800abac:	f7ff ffca 	bl	800ab44 <memcpy>
 800abb0:	4621      	mov	r1, r4
 800abb2:	4640      	mov	r0, r8
 800abb4:	f7ff fbbe 	bl	800a334 <_free_r>
 800abb8:	463c      	mov	r4, r7
 800abba:	e7e0      	b.n	800ab7e <_realloc_r+0x1e>

0800abbc <_malloc_usable_size_r>:
 800abbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abc0:	1f18      	subs	r0, r3, #4
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	bfbc      	itt	lt
 800abc6:	580b      	ldrlt	r3, [r1, r0]
 800abc8:	18c0      	addlt	r0, r0, r3
 800abca:	4770      	bx	lr

0800abcc <_init>:
 800abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abce:	bf00      	nop
 800abd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd2:	bc08      	pop	{r3}
 800abd4:	469e      	mov	lr, r3
 800abd6:	4770      	bx	lr

0800abd8 <_fini>:
 800abd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abda:	bf00      	nop
 800abdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abde:	bc08      	pop	{r3}
 800abe0:	469e      	mov	lr, r3
 800abe2:	4770      	bx	lr
