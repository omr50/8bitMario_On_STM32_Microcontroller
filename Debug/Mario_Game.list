
Mario_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a578  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011288  0800a718  0800a718  0000b718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b9a0  0801b9a0  0001d0f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b9a0  0801b9a0  0001c9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b9a8  0801b9a8  0001d0f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b9a8  0801b9a8  0001c9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b9ac  0801b9ac  0001c9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f0  20000000  0801b9b0  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000062d8  200000f0  0801baa0  0001d0f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200063c8  0801baa0  0001d3c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d0f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014694  00000000  00000000  0001d120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed2  00000000  00000000  000317b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00034688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018a10  00000000  00000000  00035938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018db5  00000000  00000000  0004e348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000924ae  00000000  00000000  000670fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000f95ab  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000e85  00000000  00000000  000f95ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005494  00000000  00000000  000fa474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000ff908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a700 	.word	0x0800a700

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	0800a700 	.word	0x0800a700

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96a 	b.w	8000bd8 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	460c      	mov	r4, r1
 8000924:	2b00      	cmp	r3, #0
 8000926:	d14e      	bne.n	80009c6 <__udivmoddi4+0xaa>
 8000928:	4694      	mov	ip, r2
 800092a:	458c      	cmp	ip, r1
 800092c:	4686      	mov	lr, r0
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	d962      	bls.n	80009fa <__udivmoddi4+0xde>
 8000934:	b14a      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000936:	f1c2 0320 	rsb	r3, r2, #32
 800093a:	4091      	lsls	r1, r2
 800093c:	fa20 f303 	lsr.w	r3, r0, r3
 8000940:	fa0c fc02 	lsl.w	ip, ip, r2
 8000944:	4319      	orrs	r1, r3
 8000946:	fa00 fe02 	lsl.w	lr, r0, r2
 800094a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800094e:	fa1f f68c 	uxth.w	r6, ip
 8000952:	fbb1 f4f7 	udiv	r4, r1, r7
 8000956:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800095a:	fb07 1114 	mls	r1, r7, r4, r1
 800095e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000962:	fb04 f106 	mul.w	r1, r4, r6
 8000966:	4299      	cmp	r1, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x64>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000972:	f080 8112 	bcs.w	8000b9a <__udivmoddi4+0x27e>
 8000976:	4299      	cmp	r1, r3
 8000978:	f240 810f 	bls.w	8000b9a <__udivmoddi4+0x27e>
 800097c:	3c02      	subs	r4, #2
 800097e:	4463      	add	r3, ip
 8000980:	1a59      	subs	r1, r3, r1
 8000982:	fa1f f38e 	uxth.w	r3, lr
 8000986:	fbb1 f0f7 	udiv	r0, r1, r7
 800098a:	fb07 1110 	mls	r1, r7, r0, r1
 800098e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000992:	fb00 f606 	mul.w	r6, r0, r6
 8000996:	429e      	cmp	r6, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x94>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f100 31ff 	add.w	r1, r0, #4294967295
 80009a2:	f080 80fc 	bcs.w	8000b9e <__udivmoddi4+0x282>
 80009a6:	429e      	cmp	r6, r3
 80009a8:	f240 80f9 	bls.w	8000b9e <__udivmoddi4+0x282>
 80009ac:	4463      	add	r3, ip
 80009ae:	3802      	subs	r0, #2
 80009b0:	1b9b      	subs	r3, r3, r6
 80009b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009b6:	2100      	movs	r1, #0
 80009b8:	b11d      	cbz	r5, 80009c2 <__udivmoddi4+0xa6>
 80009ba:	40d3      	lsrs	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	e9c5 3200 	strd	r3, r2, [r5]
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d905      	bls.n	80009d6 <__udivmoddi4+0xba>
 80009ca:	b10d      	cbz	r5, 80009d0 <__udivmoddi4+0xb4>
 80009cc:	e9c5 0100 	strd	r0, r1, [r5]
 80009d0:	2100      	movs	r1, #0
 80009d2:	4608      	mov	r0, r1
 80009d4:	e7f5      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009d6:	fab3 f183 	clz	r1, r3
 80009da:	2900      	cmp	r1, #0
 80009dc:	d146      	bne.n	8000a6c <__udivmoddi4+0x150>
 80009de:	42a3      	cmp	r3, r4
 80009e0:	d302      	bcc.n	80009e8 <__udivmoddi4+0xcc>
 80009e2:	4290      	cmp	r0, r2
 80009e4:	f0c0 80f0 	bcc.w	8000bc8 <__udivmoddi4+0x2ac>
 80009e8:	1a86      	subs	r6, r0, r2
 80009ea:	eb64 0303 	sbc.w	r3, r4, r3
 80009ee:	2001      	movs	r0, #1
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d0e6      	beq.n	80009c2 <__udivmoddi4+0xa6>
 80009f4:	e9c5 6300 	strd	r6, r3, [r5]
 80009f8:	e7e3      	b.n	80009c2 <__udivmoddi4+0xa6>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	f040 8090 	bne.w	8000b20 <__udivmoddi4+0x204>
 8000a00:	eba1 040c 	sub.w	r4, r1, ip
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	fa1f f78c 	uxth.w	r7, ip
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a16:	fb08 4416 	mls	r4, r8, r6, r4
 8000a1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1e:	fb07 f006 	mul.w	r0, r7, r6
 8000a22:	4298      	cmp	r0, r3
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x11c>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x11a>
 8000a30:	4298      	cmp	r0, r3
 8000a32:	f200 80cd 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 8000a36:	4626      	mov	r6, r4
 8000a38:	1a1c      	subs	r4, r3, r0
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a42:	fb08 4410 	mls	r4, r8, r0, r4
 8000a46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4a:	fb00 f707 	mul.w	r7, r0, r7
 8000a4e:	429f      	cmp	r7, r3
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x148>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5a:	d202      	bcs.n	8000a62 <__udivmoddi4+0x146>
 8000a5c:	429f      	cmp	r7, r3
 8000a5e:	f200 80b0 	bhi.w	8000bc2 <__udivmoddi4+0x2a6>
 8000a62:	4620      	mov	r0, r4
 8000a64:	1bdb      	subs	r3, r3, r7
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	e7a5      	b.n	80009b8 <__udivmoddi4+0x9c>
 8000a6c:	f1c1 0620 	rsb	r6, r1, #32
 8000a70:	408b      	lsls	r3, r1
 8000a72:	fa22 f706 	lsr.w	r7, r2, r6
 8000a76:	431f      	orrs	r7, r3
 8000a78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a80:	ea43 030c 	orr.w	r3, r3, ip
 8000a84:	40f4      	lsrs	r4, r6
 8000a86:	fa00 f801 	lsl.w	r8, r0, r1
 8000a8a:	0c38      	lsrs	r0, r7, #16
 8000a8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a90:	fbb4 fef0 	udiv	lr, r4, r0
 8000a94:	fa1f fc87 	uxth.w	ip, r7
 8000a98:	fb00 441e 	mls	r4, r0, lr, r4
 8000a9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000aa4:	45a1      	cmp	r9, r4
 8000aa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aaa:	d90a      	bls.n	8000ac2 <__udivmoddi4+0x1a6>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ab2:	f080 8084 	bcs.w	8000bbe <__udivmoddi4+0x2a2>
 8000ab6:	45a1      	cmp	r9, r4
 8000ab8:	f240 8081 	bls.w	8000bbe <__udivmoddi4+0x2a2>
 8000abc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ac0:	443c      	add	r4, r7
 8000ac2:	eba4 0409 	sub.w	r4, r4, r9
 8000ac6:	fa1f f983 	uxth.w	r9, r3
 8000aca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ace:	fb00 4413 	mls	r4, r0, r3, r4
 8000ad2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ada:	45a4      	cmp	ip, r4
 8000adc:	d907      	bls.n	8000aee <__udivmoddi4+0x1d2>
 8000ade:	193c      	adds	r4, r7, r4
 8000ae0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ae4:	d267      	bcs.n	8000bb6 <__udivmoddi4+0x29a>
 8000ae6:	45a4      	cmp	ip, r4
 8000ae8:	d965      	bls.n	8000bb6 <__udivmoddi4+0x29a>
 8000aea:	3b02      	subs	r3, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000af2:	fba0 9302 	umull	r9, r3, r0, r2
 8000af6:	eba4 040c 	sub.w	r4, r4, ip
 8000afa:	429c      	cmp	r4, r3
 8000afc:	46ce      	mov	lr, r9
 8000afe:	469c      	mov	ip, r3
 8000b00:	d351      	bcc.n	8000ba6 <__udivmoddi4+0x28a>
 8000b02:	d04e      	beq.n	8000ba2 <__udivmoddi4+0x286>
 8000b04:	b155      	cbz	r5, 8000b1c <__udivmoddi4+0x200>
 8000b06:	ebb8 030e 	subs.w	r3, r8, lr
 8000b0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b12:	40cb      	lsrs	r3, r1
 8000b14:	431e      	orrs	r6, r3
 8000b16:	40cc      	lsrs	r4, r1
 8000b18:	e9c5 6400 	strd	r6, r4, [r5]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	e750      	b.n	80009c2 <__udivmoddi4+0xa6>
 8000b20:	f1c2 0320 	rsb	r3, r2, #32
 8000b24:	fa20 f103 	lsr.w	r1, r0, r3
 8000b28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b30:	4094      	lsls	r4, r2
 8000b32:	430c      	orrs	r4, r1
 8000b34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b3c:	fa1f f78c 	uxth.w	r7, ip
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3110 	mls	r1, r8, r0, r3
 8000b48:	0c23      	lsrs	r3, r4, #16
 8000b4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4e:	fb00 f107 	mul.w	r1, r0, r7
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x24c>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b5e:	d22c      	bcs.n	8000bba <__udivmoddi4+0x29e>
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d92a      	bls.n	8000bba <__udivmoddi4+0x29e>
 8000b64:	3802      	subs	r0, #2
 8000b66:	4463      	add	r3, ip
 8000b68:	1a5b      	subs	r3, r3, r1
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b70:	fb08 3311 	mls	r3, r8, r1, r3
 8000b74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b78:	fb01 f307 	mul.w	r3, r1, r7
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x276>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b88:	d213      	bcs.n	8000bb2 <__udivmoddi4+0x296>
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	d911      	bls.n	8000bb2 <__udivmoddi4+0x296>
 8000b8e:	3902      	subs	r1, #2
 8000b90:	4464      	add	r4, ip
 8000b92:	1ae4      	subs	r4, r4, r3
 8000b94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b98:	e739      	b.n	8000a0e <__udivmoddi4+0xf2>
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	e6f0      	b.n	8000980 <__udivmoddi4+0x64>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e706      	b.n	80009b0 <__udivmoddi4+0x94>
 8000ba2:	45c8      	cmp	r8, r9
 8000ba4:	d2ae      	bcs.n	8000b04 <__udivmoddi4+0x1e8>
 8000ba6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000baa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bae:	3801      	subs	r0, #1
 8000bb0:	e7a8      	b.n	8000b04 <__udivmoddi4+0x1e8>
 8000bb2:	4631      	mov	r1, r6
 8000bb4:	e7ed      	b.n	8000b92 <__udivmoddi4+0x276>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	e799      	b.n	8000aee <__udivmoddi4+0x1d2>
 8000bba:	4630      	mov	r0, r6
 8000bbc:	e7d4      	b.n	8000b68 <__udivmoddi4+0x24c>
 8000bbe:	46d6      	mov	lr, sl
 8000bc0:	e77f      	b.n	8000ac2 <__udivmoddi4+0x1a6>
 8000bc2:	4463      	add	r3, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	e74d      	b.n	8000a64 <__udivmoddi4+0x148>
 8000bc8:	4606      	mov	r6, r0
 8000bca:	4623      	mov	r3, r4
 8000bcc:	4608      	mov	r0, r1
 8000bce:	e70f      	b.n	80009f0 <__udivmoddi4+0xd4>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	e730      	b.n	8000a38 <__udivmoddi4+0x11c>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_idiv0>:
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2101      	movs	r1, #1
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <ILI9341_Select+0x14>)
 8000be6:	f003 f9ed 	bl	8003fc4 <HAL_GPIO_WritePin>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40020400 	.word	0x40020400

08000bf4 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	4802      	ldr	r0, [pc, #8]	@ (8000c08 <ILI9341_Unselect+0x14>)
 8000bfe:	f003 f9e1 	bl	8003fc4 <HAL_GPIO_WritePin>
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40020400 	.word	0x40020400

08000c0c <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2110      	movs	r1, #16
 8000c14:	4806      	ldr	r0, [pc, #24]	@ (8000c30 <ILI9341_Reset+0x24>)
 8000c16:	f003 f9d5 	bl	8003fc4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000c1a:	2005      	movs	r0, #5
 8000c1c:	f002 ff00 	bl	8003a20 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2110      	movs	r1, #16
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <ILI9341_Reset+0x24>)
 8000c26:	f003 f9cd 	bl	8003fc4 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40020000 	.word	0x40020000

08000c34 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2102      	movs	r1, #2
 8000c42:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <ILI9341_WriteCommand+0x2c>)
 8000c44:	f003 f9be 	bl	8003fc4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000c48:	1df9      	adds	r1, r7, #7
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <ILI9341_WriteCommand+0x30>)
 8000c52:	f003 feb2 	bl	80049ba <HAL_SPI_Transmit>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020400 	.word	0x40020400
 8000c64:	2000010c 	.word	0x2000010c

08000c68 <ILI9341_WriteData>:


static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2102      	movs	r1, #2
 8000c76:	4811      	ldr	r0, [pc, #68]	@ (8000cbc <ILI9341_WriteData+0x54>)
 8000c78:	f003 f9a4 	bl	8003fc4 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000c7c:	e015      	b.n	8000caa <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c84:	bf28      	it	cs
 8000c86:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000c8a:	81fb      	strh	r3, [r7, #14]

        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000c8c:	89fa      	ldrh	r2, [r7, #14]
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	480a      	ldr	r0, [pc, #40]	@ (8000cc0 <ILI9341_WriteData+0x58>)
 8000c96:	f003 fe90 	bl	80049ba <HAL_SPI_Transmit>
        buff += chunk_size;
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000ca2:	89fb      	ldrh	r3, [r7, #14]
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1e6      	bne.n	8000c7e <ILI9341_WriteData+0x16>
    }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	2000010c 	.word	0x2000010c

08000cc4 <ILI9341_WriteData_with_endian>:
//			buff += chunk_size;
//			buff_size -= chunk_size;
//        }
//}

static void ILI9341_WriteData_with_endian(uint8_t* buff, size_t buff_size) {
 8000cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cc8:	b089      	sub	sp, #36	@ 0x24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
 8000cd0:	466b      	mov	r3, sp
 8000cd2:	461e      	mov	r6, r3
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	483c      	ldr	r0, [pc, #240]	@ (8000dcc <ILI9341_WriteData_with_endian+0x108>)
 8000cda:	f003 f973 	bl	8003fc4 <HAL_GPIO_WritePin>

    const uint16_t MAX_CHUNK = 32768;
 8000cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ce2:	837b      	strh	r3, [r7, #26]
    uint8_t arr[MAX_CHUNK];  // <-- stack size: risky if too large. Consider using a smaller buffer, eg. 512 or 1024.
 8000ce4:	8b7b      	ldrh	r3, [r7, #26]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	8b7b      	ldrh	r3, [r7, #26]
 8000cec:	2200      	movs	r2, #0
 8000cee:	4698      	mov	r8, r3
 8000cf0:	4691      	mov	r9, r2
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	f04f 0300 	mov.w	r3, #0
 8000cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d06:	8b7b      	ldrh	r3, [r7, #26]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	461c      	mov	r4, r3
 8000d0c:	4615      	mov	r5, r2
 8000d0e:	f04f 0200 	mov.w	r2, #0
 8000d12:	f04f 0300 	mov.w	r3, #0
 8000d16:	00eb      	lsls	r3, r5, #3
 8000d18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d1c:	00e2      	lsls	r2, r4, #3
 8000d1e:	8b7b      	ldrh	r3, [r7, #26]
 8000d20:	3307      	adds	r3, #7
 8000d22:	08db      	lsrs	r3, r3, #3
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	ebad 0d03 	sub.w	sp, sp, r3
 8000d2a:	466b      	mov	r3, sp
 8000d2c:	3300      	adds	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]

    while (buff_size > 0) {
 8000d30:	e043      	b.n	8000dba <ILI9341_WriteData_with_endian+0xf6>
        uint16_t chunk_size = (buff_size > MAX_CHUNK) ? MAX_CHUNK : buff_size;
 8000d32:	8b7a      	ldrh	r2, [r7, #26]
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	4293      	cmp	r3, r2
 8000d38:	bf28      	it	cs
 8000d3a:	4613      	movcs	r3, r2
 8000d3c:	81fb      	strh	r3, [r7, #14]
        uint16_t swap_size = chunk_size & ~1; // make sure it's even
 8000d3e:	89fb      	ldrh	r3, [r7, #14]
 8000d40:	f023 0301 	bic.w	r3, r3, #1
 8000d44:	81bb      	strh	r3, [r7, #12]

        for (int i = 0; i < swap_size; i += 2) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	e014      	b.n	8000d76 <ILI9341_WriteData_with_endian+0xb2>
            arr[i] = buff[i+1];
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	4413      	add	r3, r2
 8000d54:	7819      	ldrb	r1, [r3, #0]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	701a      	strb	r2, [r3, #0]
            arr[i+1] = buff[i];
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	441a      	add	r2, r3
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	7811      	ldrb	r1, [r2, #0]
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	54d1      	strb	r1, [r2, r3]
        for (int i = 0; i < swap_size; i += 2) {
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	3302      	adds	r3, #2
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	89bb      	ldrh	r3, [r7, #12]
 8000d78:	69fa      	ldr	r2, [r7, #28]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	dbe6      	blt.n	8000d4c <ILI9341_WriteData_with_endian+0x88>
        }
        // If odd size, just copy the last byte without swapping
        if (chunk_size % 2 != 0) {
 8000d7e:	89fb      	ldrh	r3, [r7, #14]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d008      	beq.n	8000d9c <ILI9341_WriteData_with_endian+0xd8>
            arr[chunk_size - 1] = buff[chunk_size - 1];
 8000d8a:	89fb      	ldrh	r3, [r7, #14]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	441a      	add	r2, r3
 8000d92:	89fb      	ldrh	r3, [r7, #14]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	7811      	ldrb	r1, [r2, #0]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	54d1      	strb	r1, [r2, r3]
        }
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, arr, chunk_size, HAL_MAX_DELAY);
 8000d9c:	89fa      	ldrh	r2, [r7, #14]
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	6939      	ldr	r1, [r7, #16]
 8000da4:	480a      	ldr	r0, [pc, #40]	@ (8000dd0 <ILI9341_WriteData_with_endian+0x10c>)
 8000da6:	f003 fe08 	bl	80049ba <HAL_SPI_Transmit>

        buff += chunk_size;
 8000daa:	89fb      	ldrh	r3, [r7, #14]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	4413      	add	r3, r2
 8000db0:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	603b      	str	r3, [r7, #0]
    while (buff_size > 0) {
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1b8      	bne.n	8000d32 <ILI9341_WriteData_with_endian+0x6e>
 8000dc0:	46b5      	mov	sp, r6
    }
}
 8000dc2:	bf00      	nop
 8000dc4:	3724      	adds	r7, #36	@ 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	2000010c 	.word	0x2000010c

08000dd4 <ILI9341_SetAddressWindow>:


static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4604      	mov	r4, r0
 8000ddc:	4608      	mov	r0, r1
 8000dde:	4611      	mov	r1, r2
 8000de0:	461a      	mov	r2, r3
 8000de2:	4623      	mov	r3, r4
 8000de4:	80fb      	strh	r3, [r7, #6]
 8000de6:	4603      	mov	r3, r0
 8000de8:	80bb      	strh	r3, [r7, #4]
 8000dea:	460b      	mov	r3, r1
 8000dec:	807b      	strh	r3, [r7, #2]
 8000dee:	4613      	mov	r3, r2
 8000df0:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000df2:	202a      	movs	r0, #42	@ 0x2a
 8000df4:	f7ff ff1e 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	0a1b      	lsrs	r3, r3, #8
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	733b      	strb	r3, [r7, #12]
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	737b      	strb	r3, [r7, #13]
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	73bb      	strb	r3, [r7, #14]
 8000e12:	887b      	ldrh	r3, [r7, #2]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff22 	bl	8000c68 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000e24:	202b      	movs	r0, #43	@ 0x2b
 8000e26:	f7ff ff05 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	723b      	strb	r3, [r7, #8]
 8000e34:	88bb      	ldrh	r3, [r7, #4]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	727b      	strb	r3, [r7, #9]
 8000e3a:	883b      	ldrh	r3, [r7, #0]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	72bb      	strb	r3, [r7, #10]
 8000e44:	883b      	ldrh	r3, [r7, #0]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	2104      	movs	r1, #4
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff09 	bl	8000c68 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8000e56:	202c      	movs	r0, #44	@ 0x2c
 8000e58:	f7ff feec 	bl	8000c34 <ILI9341_WriteCommand>
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd90      	pop	{r4, r7, pc}

08000e64 <ILI9341_Init>:

void ILI9341_Init() {
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b09b      	sub	sp, #108	@ 0x6c
 8000e68:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000e6a:	f7ff feb7 	bl	8000bdc <ILI9341_Select>
    ILI9341_Reset();
 8000e6e:	f7ff fecd 	bl	8000c0c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff fede 	bl	8000c34 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000e78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e7c:	f002 fdd0 	bl	8003a20 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000e80:	20cb      	movs	r0, #203	@ 0xcb
 8000e82:	f7ff fed7 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000e86:	4a87      	ldr	r2, [pc, #540]	@ (80010a4 <ILI9341_Init+0x240>)
 8000e88:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e90:	6018      	str	r0, [r3, #0]
 8000e92:	3304      	adds	r3, #4
 8000e94:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000e96:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000e9a:	2105      	movs	r1, #5
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fee3 	bl	8000c68 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8000ea2:	20cf      	movs	r0, #207	@ 0xcf
 8000ea4:	f7ff fec6 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000ea8:	4a7f      	ldr	r2, [pc, #508]	@ (80010a8 <ILI9341_Init+0x244>)
 8000eaa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000eae:	6812      	ldr	r2, [r2, #0]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	8019      	strh	r1, [r3, #0]
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	0c12      	lsrs	r2, r2, #16
 8000eb8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000eba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fed1 	bl	8000c68 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8000ec6:	20e8      	movs	r0, #232	@ 0xe8
 8000ec8:	f7ff feb4 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000ecc:	4a77      	ldr	r2, [pc, #476]	@ (80010ac <ILI9341_Init+0x248>)
 8000ece:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ed2:	6812      	ldr	r2, [r2, #0]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	8019      	strh	r1, [r3, #0]
 8000ed8:	3302      	adds	r3, #2
 8000eda:	0c12      	lsrs	r2, r2, #16
 8000edc:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000ede:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ee2:	2103      	movs	r1, #3
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff febf 	bl	8000c68 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000eea:	20ea      	movs	r0, #234	@ 0xea
 8000eec:	f7ff fea2 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 8000ef6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000efa:	2102      	movs	r1, #2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff feb3 	bl	8000c68 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8000f02:	20ed      	movs	r0, #237	@ 0xed
 8000f04:	f7ff fe96 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000f08:	4b69      	ldr	r3, [pc, #420]	@ (80010b0 <ILI9341_Init+0x24c>)
 8000f0a:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8000f0c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f10:	2104      	movs	r1, #4
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fea8 	bl	8000c68 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8000f18:	20f7      	movs	r0, #247	@ 0xf7
 8000f1a:	f7ff fe8b 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8000f1e:	2320      	movs	r3, #32
 8000f20:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8000f24:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fe9c 	bl	8000c68 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8000f30:	20c0      	movs	r0, #192	@ 0xc0
 8000f32:	f7ff fe7f 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8000f36:	2323      	movs	r3, #35	@ 0x23
 8000f38:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8000f3c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f40:	2101      	movs	r1, #1
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fe90 	bl	8000c68 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8000f48:	20c1      	movs	r0, #193	@ 0xc1
 8000f4a:	f7ff fe73 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8000f4e:	2310      	movs	r3, #16
 8000f50:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 8000f54:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fe84 	bl	8000c68 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8000f60:	20c5      	movs	r0, #197	@ 0xc5
 8000f62:	f7ff fe67 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8000f66:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000f6a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000f6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f72:	2102      	movs	r1, #2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fe77 	bl	8000c68 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000f7a:	20c7      	movs	r0, #199	@ 0xc7
 8000f7c:	f7ff fe5a 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000f80:	2386      	movs	r3, #134	@ 0x86
 8000f82:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8000f86:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fe6b 	bl	8000c68 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8000f92:	2036      	movs	r0, #54	@ 0x36
 8000f94:	f7ff fe4e 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000f98:	2348      	movs	r3, #72	@ 0x48
 8000f9a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 8000f9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fe5f 	bl	8000c68 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000faa:	203a      	movs	r0, #58	@ 0x3a
 8000fac:	f7ff fe42 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000fb0:	2355      	movs	r3, #85	@ 0x55
 8000fb2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 8000fb6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fe53 	bl	8000c68 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8000fc2:	20b1      	movs	r0, #177	@ 0xb1
 8000fc4:	f7ff fe36 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000fc8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000fcc:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 8000fce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe47 	bl	8000c68 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000fda:	20b6      	movs	r0, #182	@ 0xb6
 8000fdc:	f7ff fe2a 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8000fe0:	4a34      	ldr	r2, [pc, #208]	@ (80010b4 <ILI9341_Init+0x250>)
 8000fe2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	8019      	strh	r1, [r3, #0]
 8000fec:	3302      	adds	r3, #2
 8000fee:	0c12      	lsrs	r2, r2, #16
 8000ff0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000ff2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fe35 	bl	8000c68 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8000ffe:	20f2      	movs	r0, #242	@ 0xf2
 8001000:	f7ff fe18 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8001004:	2300      	movs	r3, #0
 8001006:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 800100a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800100e:	2101      	movs	r1, #1
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fe29 	bl	8000c68 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8001016:	2026      	movs	r0, #38	@ 0x26
 8001018:	f7ff fe0c 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 800101c:	2301      	movs	r3, #1
 800101e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 8001022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001026:	2101      	movs	r1, #1
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fe1d 	bl	8000c68 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 800102e:	20e0      	movs	r0, #224	@ 0xe0
 8001030:	f7ff fe00 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8001034:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <ILI9341_Init+0x254>)
 8001036:	f107 0414 	add.w	r4, r7, #20
 800103a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800103c:	c407      	stmia	r4!, {r0, r1, r2}
 800103e:	8023      	strh	r3, [r4, #0]
 8001040:	3402      	adds	r4, #2
 8001042:	0c1b      	lsrs	r3, r3, #16
 8001044:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	210f      	movs	r1, #15
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fe0b 	bl	8000c68 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8001052:	20e1      	movs	r0, #225	@ 0xe1
 8001054:	f7ff fdee 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8001058:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <ILI9341_Init+0x258>)
 800105a:	1d3c      	adds	r4, r7, #4
 800105c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105e:	c407      	stmia	r4!, {r0, r1, r2}
 8001060:	8023      	strh	r3, [r4, #0]
 8001062:	3402      	adds	r4, #2
 8001064:	0c1b      	lsrs	r3, r3, #16
 8001066:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	210f      	movs	r1, #15
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fdfb 	bl	8000c68 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8001072:	2011      	movs	r0, #17
 8001074:	f7ff fdde 	bl	8000c34 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8001078:	2078      	movs	r0, #120	@ 0x78
 800107a:	f002 fcd1 	bl	8003a20 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 800107e:	2029      	movs	r0, #41	@ 0x29
 8001080:	f7ff fdd8 	bl	8000c34 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8001084:	2036      	movs	r0, #54	@ 0x36
 8001086:	f7ff fdd5 	bl	8000c34 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 800108a:	23e8      	movs	r3, #232	@ 0xe8
 800108c:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 800108e:	463b      	mov	r3, r7
 8001090:	2101      	movs	r1, #1
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fde8 	bl	8000c68 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8001098:	f7ff fdac 	bl	8000bf4 <ILI9341_Unselect>
}
 800109c:	bf00      	nop
 800109e:	376c      	adds	r7, #108	@ 0x6c
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd90      	pop	{r4, r7, pc}
 80010a4:	0800a718 	.word	0x0800a718
 80010a8:	0800a720 	.word	0x0800a720
 80010ac:	0800a724 	.word	0x0800a724
 80010b0:	81120364 	.word	0x81120364
 80010b4:	0800a728 	.word	0x0800a728
 80010b8:	0800a72c 	.word	0x0800a72c
 80010bc:	0800a73c 	.word	0x0800a73c

080010c0 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80010c0:	b082      	sub	sp, #8
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b088      	sub	sp, #32
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
 80010ce:	460b      	mov	r3, r1
 80010d0:	80bb      	strh	r3, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80010d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80010da:	461a      	mov	r2, r3
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	4413      	add	r3, r2
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80010ea:	4619      	mov	r1, r3
 80010ec:	88bb      	ldrh	r3, [r7, #4]
 80010ee:	440b      	add	r3, r1
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	88b9      	ldrh	r1, [r7, #4]
 80010f8:	88f8      	ldrh	r0, [r7, #6]
 80010fa:	f7ff fe6b 	bl	8000dd4 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e041      	b.n	8001188 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8001104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	3b20      	subs	r3, #32
 800110a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800110e:	fb01 f303 	mul.w	r3, r1, r3
 8001112:	4619      	mov	r1, r3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	440b      	add	r3, r1
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	e027      	b.n	8001176 <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00e      	beq.n	8001154 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001136:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	b29b      	uxth	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	743b      	strb	r3, [r7, #16]
 8001140:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001142:	b2db      	uxtb	r3, r3
 8001144:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	2102      	movs	r1, #2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fd8b 	bl	8000c68 <ILI9341_WriteData>
 8001152:	e00d      	b.n	8001170 <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001154:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001156:	0a1b      	lsrs	r3, r3, #8
 8001158:	b29b      	uxth	r3, r3
 800115a:	b2db      	uxtb	r3, r3
 800115c:	733b      	strb	r3, [r7, #12]
 800115e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001160:	b2db      	uxtb	r3, r3
 8001162:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	2102      	movs	r1, #2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fd7c 	bl	8000c68 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	3301      	adds	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800117a:	461a      	mov	r2, r3
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	4293      	cmp	r3, r2
 8001180:	d3d1      	bcc.n	8001126 <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3301      	adds	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800118c:	461a      	mov	r2, r3
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	4293      	cmp	r3, r2
 8001192:	d3b7      	bcc.n	8001104 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3720      	adds	r7, #32
 800119a:	46bd      	mov	sp, r7
 800119c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011a0:	b002      	add	sp, #8
 80011a2:	4770      	bx	lr

080011a4 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80011a4:	b082      	sub	sp, #8
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af04      	add	r7, sp, #16
 80011ac:	603a      	str	r2, [r7, #0]
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	4603      	mov	r3, r0
 80011b2:	80fb      	strh	r3, [r7, #6]
 80011b4:	460b      	mov	r3, r1
 80011b6:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80011b8:	f7ff fd10 	bl	8000bdc <ILI9341_Select>

    while(*str) {
 80011bc:	e02e      	b.n	800121c <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	7d3a      	ldrb	r2, [r7, #20]
 80011c2:	4413      	add	r3, r2
 80011c4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80011c8:	db13      	blt.n	80011f2 <ILI9341_WriteString+0x4e>
            x = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80011ce:	7d7b      	ldrb	r3, [r7, #21]
 80011d0:	461a      	mov	r2, r3
 80011d2:	88bb      	ldrh	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	7d7a      	ldrb	r2, [r7, #21]
 80011dc:	4413      	add	r3, r2
 80011de:	2bef      	cmp	r3, #239	@ 0xef
 80011e0:	dc21      	bgt.n	8001226 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b20      	cmp	r3, #32
 80011e8:	d103      	bne.n	80011f2 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	603b      	str	r3, [r7, #0]
                continue;
 80011f0:	e014      	b.n	800121c <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	88b9      	ldrh	r1, [r7, #4]
 80011f8:	88f8      	ldrh	r0, [r7, #6]
 80011fa:	8c3b      	ldrh	r3, [r7, #32]
 80011fc:	9302      	str	r3, [sp, #8]
 80011fe:	8bbb      	ldrh	r3, [r7, #28]
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f7ff ff5a 	bl	80010c0 <ILI9341_WriteChar>
        x += font.width;
 800120c:	7d3b      	ldrb	r3, [r7, #20]
 800120e:	461a      	mov	r2, r3
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	4413      	add	r3, r2
 8001214:	80fb      	strh	r3, [r7, #6]
        str++;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1cc      	bne.n	80011be <ILI9341_WriteString+0x1a>
 8001224:	e000      	b.n	8001228 <ILI9341_WriteString+0x84>
                break;
 8001226:	bf00      	nop
    }

    ILI9341_Unselect();
 8001228:	f7ff fce4 	bl	8000bf4 <ILI9341_Unselect>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001236:	b002      	add	sp, #8
 8001238:	4770      	bx	lr
	...

0800123c <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	4604      	mov	r4, r0
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4623      	mov	r3, r4
 800124c:	80fb      	strh	r3, [r7, #6]
 800124e:	4603      	mov	r3, r0
 8001250:	80bb      	strh	r3, [r7, #4]
 8001252:	460b      	mov	r3, r1
 8001254:	807b      	strh	r3, [r7, #2]
 8001256:	4613      	mov	r3, r2
 8001258:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001260:	d252      	bcs.n	8001308 <ILI9341_FillRectangle+0xcc>
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	2bef      	cmp	r3, #239	@ 0xef
 8001266:	d84f      	bhi.n	8001308 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8001268:	88fa      	ldrh	r2, [r7, #6]
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	4413      	add	r3, r2
 800126e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001272:	dd03      	ble.n	800127c <ILI9341_FillRectangle+0x40>
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800127a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 800127c:	88ba      	ldrh	r2, [r7, #4]
 800127e:	883b      	ldrh	r3, [r7, #0]
 8001280:	4413      	add	r3, r2
 8001282:	2bf0      	cmp	r3, #240	@ 0xf0
 8001284:	dd03      	ble.n	800128e <ILI9341_FillRectangle+0x52>
 8001286:	88bb      	ldrh	r3, [r7, #4]
 8001288:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800128c:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 800128e:	f7ff fca5 	bl	8000bdc <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001292:	88fa      	ldrh	r2, [r7, #6]
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	4413      	add	r3, r2
 8001298:	b29b      	uxth	r3, r3
 800129a:	3b01      	subs	r3, #1
 800129c:	b29c      	uxth	r4, r3
 800129e:	88ba      	ldrh	r2, [r7, #4]
 80012a0:	883b      	ldrh	r3, [r7, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	3b01      	subs	r3, #1
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	88b9      	ldrh	r1, [r7, #4]
 80012ac:	88f8      	ldrh	r0, [r7, #6]
 80012ae:	4622      	mov	r2, r4
 80012b0:	f7ff fd90 	bl	8000dd4 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80012b4:	8c3b      	ldrh	r3, [r7, #32]
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	733b      	strb	r3, [r7, #12]
 80012be:	8c3b      	ldrh	r3, [r7, #32]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	2102      	movs	r1, #2
 80012c8:	4811      	ldr	r0, [pc, #68]	@ (8001310 <ILI9341_FillRectangle+0xd4>)
 80012ca:	f002 fe7b 	bl	8003fc4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80012ce:	883b      	ldrh	r3, [r7, #0]
 80012d0:	80bb      	strh	r3, [r7, #4]
 80012d2:	e013      	b.n	80012fc <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	80fb      	strh	r3, [r7, #6]
 80012d8:	e00a      	b.n	80012f0 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80012da:	f107 010c 	add.w	r1, r7, #12
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	2202      	movs	r2, #2
 80012e4:	480b      	ldr	r0, [pc, #44]	@ (8001314 <ILI9341_FillRectangle+0xd8>)
 80012e6:	f003 fb68 	bl	80049ba <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	80fb      	strh	r3, [r7, #6]
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f1      	bne.n	80012da <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 80012f6:	88bb      	ldrh	r3, [r7, #4]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	80bb      	strh	r3, [r7, #4]
 80012fc:	88bb      	ldrh	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1e8      	bne.n	80012d4 <ILI9341_FillRectangle+0x98>
        }
    }

    ILI9341_Unselect();
 8001302:	f7ff fc77 	bl	8000bf4 <ILI9341_Unselect>
 8001306:	e000      	b.n	800130a <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8001308:	bf00      	nop
}
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	40020400 	.word	0x40020400
 8001314:	2000010c 	.word	0x2000010c

08001318 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af02      	add	r7, sp, #8
 800131e:	4603      	mov	r3, r0
 8001320:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	23f0      	movs	r3, #240	@ 0xf0
 8001328:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800132c:	2100      	movs	r1, #0
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff ff84 	bl	800123c <ILI9341_FillRectangle>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4604      	mov	r4, r0
 8001344:	4608      	mov	r0, r1
 8001346:	4611      	mov	r1, r2
 8001348:	461a      	mov	r2, r3
 800134a:	4623      	mov	r3, r4
 800134c:	80fb      	strh	r3, [r7, #6]
 800134e:	4603      	mov	r3, r0
 8001350:	80bb      	strh	r3, [r7, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	807b      	strh	r3, [r7, #2]
 8001356:	4613      	mov	r3, r2
 8001358:	803b      	strh	r3, [r7, #0]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001360:	d22c      	bcs.n	80013bc <ILI9341_DrawImage+0x80>
 8001362:	88bb      	ldrh	r3, [r7, #4]
 8001364:	2bef      	cmp	r3, #239	@ 0xef
 8001366:	d829      	bhi.n	80013bc <ILI9341_DrawImage+0x80>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 8001368:	88fa      	ldrh	r2, [r7, #6]
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	4413      	add	r3, r2
 800136e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001372:	dc25      	bgt.n	80013c0 <ILI9341_DrawImage+0x84>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 8001374:	88ba      	ldrh	r2, [r7, #4]
 8001376:	883b      	ldrh	r3, [r7, #0]
 8001378:	4413      	add	r3, r2
 800137a:	2bf0      	cmp	r3, #240	@ 0xf0
 800137c:	dc22      	bgt.n	80013c4 <ILI9341_DrawImage+0x88>

    ILI9341_Select();
 800137e:	f7ff fc2d 	bl	8000bdc <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001382:	88fa      	ldrh	r2, [r7, #6]
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	4413      	add	r3, r2
 8001388:	b29b      	uxth	r3, r3
 800138a:	3b01      	subs	r3, #1
 800138c:	b29c      	uxth	r4, r3
 800138e:	88ba      	ldrh	r2, [r7, #4]
 8001390:	883b      	ldrh	r3, [r7, #0]
 8001392:	4413      	add	r3, r2
 8001394:	b29b      	uxth	r3, r3
 8001396:	3b01      	subs	r3, #1
 8001398:	b29b      	uxth	r3, r3
 800139a:	88b9      	ldrh	r1, [r7, #4]
 800139c:	88f8      	ldrh	r0, [r7, #6]
 800139e:	4622      	mov	r2, r4
 80013a0:	f7ff fd18 	bl	8000dd4 <ILI9341_SetAddressWindow>
    // MODIFICATION ----------------------------
    ILI9341_WriteData_with_endian((uint8_t*)data, sizeof(uint16_t)*w*h);
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	883a      	ldrh	r2, [r7, #0]
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	69b8      	ldr	r0, [r7, #24]
 80013b2:	f7ff fc87 	bl	8000cc4 <ILI9341_WriteData_with_endian>
//    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
    ILI9341_Unselect();
 80013b6:	f7ff fc1d 	bl	8000bf4 <ILI9341_Unselect>
 80013ba:	e004      	b.n	80013c6 <ILI9341_DrawImage+0x8a>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80013bc:	bf00      	nop
 80013be:	e002      	b.n	80013c6 <ILI9341_DrawImage+0x8a>
    if((x + w - 1) >= ILI9341_WIDTH) return;
 80013c0:	bf00      	nop
 80013c2:	e000      	b.n	80013c6 <ILI9341_DrawImage+0x8a>
    if((y + h - 1) >= ILI9341_HEIGHT) return;
 80013c4:	bf00      	nop
}
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd90      	pop	{r4, r7, pc}

080013cc <HAL_TIM_PeriodElapsedCallback>:
bool do_once = false;
bool is_jumping = false;
bool reset_jump_audio = false;
uint32_t jump_timer;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a49      	ldr	r2, [pc, #292]	@ (8001500 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	f040 808c 	bne.w	80014f8 <HAL_TIM_PeriodElapsedCallback+0x12c>
        // Get next sample from buffer
		uint8_t sampled_8bit_pwm_val = audio_buff[buff_pointer++];
 80013e0:	4b48      	ldr	r3, [pc, #288]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	b291      	uxth	r1, r2
 80013e8:	4a46      	ldr	r2, [pc, #280]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80013ea:	8011      	strh	r1, [r2, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b46      	ldr	r3, [pc, #280]	@ (8001508 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80013f0:	5c9b      	ldrb	r3, [r3, r2]
 80013f2:	75fb      	strb	r3, [r7, #23]
		if (is_jumping && HAL_GetTick() - jump_timer < 500) {
 80013f4:	4b45      	ldr	r3, [pc, #276]	@ (800150c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d01f      	beq.n	800143c <HAL_TIM_PeriodElapsedCallback+0x70>
 80013fc:	f002 fb04 	bl	8003a08 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	4b43      	ldr	r3, [pc, #268]	@ (8001510 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800140c:	d216      	bcs.n	800143c <HAL_TIM_PeriodElapsedCallback+0x70>
			sampled_8bit_pwm_val = (3 * sampled_8bit_pwm_val + yahoo_buff[yahoo_buff_pointer++]) / 4;
 800140e:	7dfa      	ldrb	r2, [r7, #23]
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	441a      	add	r2, r3
 8001416:	4b3f      	ldr	r3, [pc, #252]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	1c59      	adds	r1, r3, #1
 800141c:	b288      	uxth	r0, r1
 800141e:	493d      	ldr	r1, [pc, #244]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001420:	8008      	strh	r0, [r1, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	4b3c      	ldr	r3, [pc, #240]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001426:	5c5b      	ldrb	r3, [r3, r1]
 8001428:	4413      	add	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	da00      	bge.n	8001430 <HAL_TIM_PeriodElapsedCallback+0x64>
 800142e:	3303      	adds	r3, #3
 8001430:	109b      	asrs	r3, r3, #2
 8001432:	75fb      	strb	r3, [r7, #23]
			reset_jump_audio = false;
 8001434:	4b39      	ldr	r3, [pc, #228]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e01c      	b.n	8001476 <HAL_TIM_PeriodElapsedCallback+0xaa>
		}
		else {
			if (!reset_jump_audio) {
 800143c:	4b37      	ldr	r3, [pc, #220]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f083 0301 	eor.w	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d015      	beq.n	8001476 <HAL_TIM_PeriodElapsedCallback+0xaa>
				reset_jump_audio = true;
 800144a:	4b34      	ldr	r3, [pc, #208]	@ (800151c <HAL_TIM_PeriodElapsedCallback+0x150>)
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
				f_lseek(&fil_yahoo, 0x2c);
 8001450:	212c      	movs	r1, #44	@ 0x2c
 8001452:	4833      	ldr	r0, [pc, #204]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001454:	f008 f8bf 	bl	80095d6 <f_lseek>
				yahoo_buff_pointer = 0;
 8001458:	4b2e      	ldr	r3, [pc, #184]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800145a:	2200      	movs	r2, #0
 800145c:	801a      	strh	r2, [r3, #0]
				int bytesRead = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
				FRESULT res = f_read(&fil_yahoo, yahoo_buff, BUFF_SIZE, &bytesRead);
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800146a:	492b      	ldr	r1, [pc, #172]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800146c:	482c      	ldr	r0, [pc, #176]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800146e:	f007 ff73 	bl	8009358 <f_read>
 8001472:	4603      	mov	r3, r0
 8001474:	75bb      	strb	r3, [r7, #22]
//			char hex_str[16];
//			sprintf(hex_str, "0x%02X", sampled_8bit_pwm_val);
//			ILI9341_WriteString(80, 0, hex_str, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
//			do_once = true;
//		}
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, sampled_8bit_pwm_val);
 8001476:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7dfa      	ldrb	r2, [r7, #23]
 800147c:	635a      	str	r2, [r3, #52]	@ 0x34

        // Refill buffer if needed
        if (buff_pointer >= BUFF_SIZE) {
 800147e:	4b21      	ldr	r3, [pc, #132]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001486:	d31b      	bcc.n	80014c0 <HAL_TIM_PeriodElapsedCallback+0xf4>
        	num_iter++;
 8001488:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	4a26      	ldr	r2, [pc, #152]	@ (8001528 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001490:	6013      	str	r3, [r2, #0]
//			char hex_str[16];
//			sprintf(hex_str, "0x%02X", pwm_value);
//			ILI9341_WriteString(80, 0, hex_str, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
            // refill buffer with f_read (non-blocking, or with a flag in main loop)
            // or set a "need_refill" flag to be handled in main()
        	int bytesRead = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
        	FRESULT res = f_read(&fil, audio_buff, BUFF_SIZE, &bytesRead);
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800149e:	491a      	ldr	r1, [pc, #104]	@ (8001508 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80014a0:	4822      	ldr	r0, [pc, #136]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80014a2:	f007 ff59 	bl	8009358 <f_read>
 80014a6:	4603      	mov	r3, r0
 80014a8:	757b      	strb	r3, [r7, #21]
        	if (bytesRead < BUFF_SIZE) {
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014b0:	da03      	bge.n	80014ba <HAL_TIM_PeriodElapsedCallback+0xee>
        		f_lseek(&fil, 0x2C);
 80014b2:	212c      	movs	r1, #44	@ 0x2c
 80014b4:	481d      	ldr	r0, [pc, #116]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80014b6:	f008 f88e 	bl	80095d6 <f_lseek>
        	}

        	buff_pointer = 0;
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80014bc:	2200      	movs	r2, #0
 80014be:	801a      	strh	r2, [r3, #0]
        }

        if (yahoo_buff_pointer >= BUFF_SIZE) {
 80014c0:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014c8:	d316      	bcc.n	80014f8 <HAL_TIM_PeriodElapsedCallback+0x12c>
        	int bytesRead = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
        	FRESULT res = f_read(&fil_yahoo, yahoo_buff, BUFF_SIZE, &bytesRead);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014d6:	4910      	ldr	r1, [pc, #64]	@ (8001518 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80014d8:	4811      	ldr	r0, [pc, #68]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80014da:	f007 ff3d 	bl	8009358 <f_read>
 80014de:	4603      	mov	r3, r0
 80014e0:	753b      	strb	r3, [r7, #20]
        	if (bytesRead < BUFF_SIZE) {
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014e8:	da03      	bge.n	80014f2 <HAL_TIM_PeriodElapsedCallback+0x126>
				f_lseek(&fil_yahoo, 0x2c);
 80014ea:	212c      	movs	r1, #44	@ 0x2c
 80014ec:	480c      	ldr	r0, [pc, #48]	@ (8001520 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80014ee:	f008 f872 	bl	80095d6 <f_lseek>
        	}

        	yahoo_buff_pointer = 0;
 80014f2:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	801a      	strh	r2, [r3, #0]
        }
	}
}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40000400 	.word	0x40000400
 8001504:	20004ca8 	.word	0x20004ca8
 8001508:	20002ca8 	.word	0x20002ca8
 800150c:	20005348 	.word	0x20005348
 8001510:	2000534c 	.word	0x2000534c
 8001514:	20004caa 	.word	0x20004caa
 8001518:	20003ca8 	.word	0x20003ca8
 800151c:	20005349 	.word	0x20005349
 8001520:	20005110 	.word	0x20005110
 8001524:	20000204 	.word	0x20000204
 8001528:	20005344 	.word	0x20005344
 800152c:	20004ee0 	.word	0x20004ee0

08001530 <init>:

void init() {
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
    ILI9341_Unselect();
 8001534:	f7ff fb5e 	bl	8000bf4 <ILI9341_Unselect>
//    ILI9341_TouchUnselect();
    ILI9341_Init();
 8001538:	f7ff fc94 	bl	8000e64 <ILI9341_Init>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <turn_mario>:

// turn left if walking left
void turn_mario(uint8_t width, uint8_t height) {
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	@ 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	460a      	mov	r2, r1
 800154a:	71fb      	strb	r3, [r7, #7]
 800154c:	4613      	mov	r3, r2
 800154e:	71bb      	strb	r3, [r7, #6]
	if (mario.x_distance_between_frame < 0 || (mario.x_distance_between_frame == 0 && dir == true)) {
 8001550:	4b2c      	ldr	r3, [pc, #176]	@ (8001604 <turn_mario+0xc4>)
 8001552:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db08      	blt.n	800156c <turn_mario+0x2c>
 800155a:	4b2a      	ldr	r3, [pc, #168]	@ (8001604 <turn_mario+0xc4>)
 800155c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d141      	bne.n	80015e8 <turn_mario+0xa8>
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <turn_mario+0xc8>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d03d      	beq.n	80015e8 <turn_mario+0xa8>
        for (int row = 0; row < height; row++) {
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	e032      	b.n	80015d8 <turn_mario+0x98>
            for (int col = 0; col < width / 2; col++) {
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	e025      	b.n	80015c4 <turn_mario+0x84>
                int left  = row * width + col;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	fb02 f303 	mul.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4413      	add	r3, r2
 8001584:	617b      	str	r3, [r7, #20]
                int right = row * width + (width - 1 - col);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	69fa      	ldr	r2, [r7, #28]
 800158a:	fb03 f202 	mul.w	r2, r3, r2
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	1e59      	subs	r1, r3, #1
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	1acb      	subs	r3, r1, r3
 8001596:	4413      	add	r3, r2
 8001598:	613b      	str	r3, [r7, #16]

                // Swap 16-bit pixels
                uint16_t temp = mario_final[left];
 800159a:	4a1c      	ldr	r2, [pc, #112]	@ (800160c <turn_mario+0xcc>)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015a2:	81fb      	strh	r3, [r7, #14]
                mario_final[left] = mario_final[right];
 80015a4:	4a19      	ldr	r2, [pc, #100]	@ (800160c <turn_mario+0xcc>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015ac:	4a17      	ldr	r2, [pc, #92]	@ (800160c <turn_mario+0xcc>)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                mario_final[right] = temp;
 80015b4:	4915      	ldr	r1, [pc, #84]	@ (800160c <turn_mario+0xcc>)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	89fa      	ldrh	r2, [r7, #14]
 80015ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (int col = 0; col < width / 2; col++) {
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61bb      	str	r3, [r7, #24]
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	085b      	lsrs	r3, r3, #1
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	4293      	cmp	r3, r2
 80015d0:	dbd2      	blt.n	8001578 <turn_mario+0x38>
        for (int row = 0; row < height; row++) {
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	79bb      	ldrb	r3, [r7, #6]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbc8      	blt.n	8001572 <turn_mario+0x32>
            }
        }

		dir = true;
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <turn_mario+0xc8>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
	}
	else if (mario.x_distance_between_frame > 0) {
		dir = false;
	}

}
 80015e6:	e007      	b.n	80015f8 <turn_mario+0xb8>
	else if (mario.x_distance_between_frame > 0) {
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <turn_mario+0xc4>)
 80015ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	dd02      	ble.n	80015f8 <turn_mario+0xb8>
		dir = false;
 80015f2:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <turn_mario+0xc8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3724      	adds	r7, #36	@ 0x24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	2000001c 	.word	0x2000001c
 8001608:	20002ca5 	.word	0x20002ca5
 800160c:	20000424 	.word	0x20000424

08001610 <turn_enemy>:

void turn_enemy(uint8_t width, uint8_t height, uint16_t* enemy_final, struct Enemy enemy) {
 8001610:	b082      	sub	sp, #8
 8001612:	b480      	push	{r7}
 8001614:	b089      	sub	sp, #36	@ 0x24
 8001616:	af00      	add	r7, sp, #0
 8001618:	603a      	str	r2, [r7, #0]
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
 8001620:	460b      	mov	r3, r1
 8001622:	71bb      	strb	r3, [r7, #6]
	for (int row = 0; row < height; row++) {
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	e036      	b.n	8001698 <turn_enemy+0x88>
		for (int col = 0; col < width / 2; col++) {
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
 800162e:	e029      	b.n	8001684 <turn_enemy+0x74>
			int left  = row * width + col;
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4413      	add	r3, r2
 800163c:	617b      	str	r3, [r7, #20]
			int right = row * width + (width - 1 - col);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	fb03 f202 	mul.w	r2, r3, r2
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	1e59      	subs	r1, r3, #1
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	1acb      	subs	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	613b      	str	r3, [r7, #16]

			// Swap 16-bit pixels
			uint16_t temp = enemy_final[left];
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	4413      	add	r3, r2
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	81fb      	strh	r3, [r7, #14]
			enemy_final[left] = enemy_final[right];
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	441a      	add	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	6839      	ldr	r1, [r7, #0]
 800166c:	440b      	add	r3, r1
 800166e:	8812      	ldrh	r2, [r2, #0]
 8001670:	801a      	strh	r2, [r3, #0]
			enemy_final[right] = temp;
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	4413      	add	r3, r2
 800167a:	89fa      	ldrh	r2, [r7, #14]
 800167c:	801a      	strh	r2, [r3, #0]
		for (int col = 0; col < width / 2; col++) {
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	3301      	adds	r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	085b      	lsrs	r3, r3, #1
 8001688:	b2db      	uxtb	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	4293      	cmp	r3, r2
 8001690:	dbce      	blt.n	8001630 <turn_enemy+0x20>
	for (int row = 0; row < height; row++) {
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3301      	adds	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbc4      	blt.n	800162a <turn_enemy+0x1a>
		}
	}


}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3724      	adds	r7, #36	@ 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	b002      	add	sp, #8
 80016ae:	4770      	bx	lr

080016b0 <collision_detection>:
		arr[i+1] = temp;
	}
}


bool collision_detection(struct Character mario, struct Object object) {
 80016b0:	b490      	push	{r4, r7}
 80016b2:	b08c      	sub	sp, #48	@ 0x30
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	463c      	mov	r4, r7
 80016b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t Ax = mario.x;
 80016bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t Ay = mario.y;
 80016c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016c6:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	uint16_t Bx = object.x;
 80016c8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80016cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t By = object.y;
 80016ce:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80016d2:	853b      	strh	r3, [r7, #40]	@ 0x28

	uint16_t A_left   = Ax;
 80016d4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80016d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t A_right  = Ax + mario.width;
 80016d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80016e0:	4413      	add	r3, r2
 80016e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t A_top    = Ay;
 80016e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80016e6:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint16_t A_bottom = Ay + mario.height;
 80016e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80016f0:	4413      	add	r3, r2
 80016f2:	843b      	strh	r3, [r7, #32]

	uint16_t B_left   = Bx;
 80016f4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80016f6:	83fb      	strh	r3, [r7, #30]
	uint16_t B_right  = Bx + object.width;
 80016f8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001700:	4413      	add	r3, r2
 8001702:	83bb      	strh	r3, [r7, #28]
	uint16_t B_top    = By;
 8001704:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001706:	837b      	strh	r3, [r7, #26]
	uint16_t B_bottom = By + object.height;
 8001708:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800170c:	b29a      	uxth	r2, r3
 800170e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001710:	4413      	add	r3, r2
 8001712:	833b      	strh	r3, [r7, #24]

	bool x_overlap = (A_right >  B_left) && (B_right >  A_left);
 8001714:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001716:	8bfb      	ldrh	r3, [r7, #30]
 8001718:	429a      	cmp	r2, r3
 800171a:	d905      	bls.n	8001728 <collision_detection+0x78>
 800171c:	8bba      	ldrh	r2, [r7, #28]
 800171e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001720:	429a      	cmp	r2, r3
 8001722:	d901      	bls.n	8001728 <collision_detection+0x78>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <collision_detection+0x7a>
 8001728:	2300      	movs	r3, #0
 800172a:	75fb      	strb	r3, [r7, #23]
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	75fb      	strb	r3, [r7, #23]
	bool y_overlap = (A_bottom > B_top ) && (B_bottom > A_top );
 8001734:	8c3a      	ldrh	r2, [r7, #32]
 8001736:	8b7b      	ldrh	r3, [r7, #26]
 8001738:	429a      	cmp	r2, r3
 800173a:	d905      	bls.n	8001748 <collision_detection+0x98>
 800173c:	8b3a      	ldrh	r2, [r7, #24]
 800173e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001740:	429a      	cmp	r2, r3
 8001742:	d901      	bls.n	8001748 <collision_detection+0x98>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <collision_detection+0x9a>
 8001748:	2300      	movs	r3, #0
 800174a:	75bb      	strb	r3, [r7, #22]
 800174c:	7dbb      	ldrb	r3, [r7, #22]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	75bb      	strb	r3, [r7, #22]
	return x_overlap && y_overlap;
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d004      	beq.n	8001764 <collision_detection+0xb4>
 800175a:	7dbb      	ldrb	r3, [r7, #22]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <collision_detection+0xb4>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <collision_detection+0xb6>
 8001764:	2300      	movs	r3, #0
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	b2db      	uxtb	r3, r3
}
 800176c:	4618      	mov	r0, r3
 800176e:	3730      	adds	r7, #48	@ 0x30
 8001770:	46bd      	mov	sp, r7
 8001772:	bc90      	pop	{r4, r7}
 8001774:	4770      	bx	lr
	...

08001778 <collision_detection_enemies>:

bool collision_detection_enemies() {
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	b08f      	sub	sp, #60	@ 0x3c
 800177c:	af06      	add	r7, sp, #24

	static uint32_t mario_last_hit = 0;
	if (mario_last_hit == 0)
 800177e:	4b93      	ldr	r3, [pc, #588]	@ (80019cc <collision_detection_enemies+0x254>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d104      	bne.n	8001790 <collision_detection_enemies+0x18>
		mario_last_hit = HAL_GetTick();
 8001786:	f002 f93f 	bl	8003a08 <HAL_GetTick>
 800178a:	4603      	mov	r3, r0
 800178c:	4a8f      	ldr	r2, [pc, #572]	@ (80019cc <collision_detection_enemies+0x254>)
 800178e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 1; i++) {
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	e110      	b.n	80019b8 <collision_detection_enemies+0x240>
//	int16_t height;
//	uint16_t* frame;
//	bool collidable;
//	bool redraw;

		struct Object enemy_object = { enemies[i]->x, enemies[i]->y, 0, 0, enemies[i]->width, enemies[i]->height, bowser_final, true, false };
 8001796:	4a8e      	ldr	r2, [pc, #568]	@ (80019d0 <collision_detection_enemies+0x258>)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a2:	80bb      	strh	r3, [r7, #4]
 80017a4:	4a8a      	ldr	r2, [pc, #552]	@ (80019d0 <collision_detection_enemies+0x258>)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017b0:	80fb      	strh	r3, [r7, #6]
 80017b2:	2300      	movs	r3, #0
 80017b4:	813b      	strh	r3, [r7, #8]
 80017b6:	2300      	movs	r3, #0
 80017b8:	817b      	strh	r3, [r7, #10]
 80017ba:	4a85      	ldr	r2, [pc, #532]	@ (80019d0 <collision_detection_enemies+0x258>)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017c6:	81bb      	strh	r3, [r7, #12]
 80017c8:	4a81      	ldr	r2, [pc, #516]	@ (80019d0 <collision_detection_enemies+0x258>)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017d4:	81fb      	strh	r3, [r7, #14]
 80017d6:	4b7f      	ldr	r3, [pc, #508]	@ (80019d4 <collision_detection_enemies+0x25c>)
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	2301      	movs	r3, #1
 80017dc:	753b      	strb	r3, [r7, #20]
 80017de:	2300      	movs	r3, #0
 80017e0:	757b      	strb	r3, [r7, #21]

		if (enemies[i]->died || !collision_detection(mario,enemy_object))
 80017e2:	4a7b      	ldr	r2, [pc, #492]	@ (80019d0 <collision_detection_enemies+0x258>)
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ea:	7d5b      	ldrb	r3, [r3, #21]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f040 80df 	bne.w	80019b0 <collision_detection_enemies+0x238>
 80017f2:	4e79      	ldr	r6, [pc, #484]	@ (80019d8 <collision_detection_enemies+0x260>)
 80017f4:	466d      	mov	r5, sp
 80017f6:	1d3c      	adds	r4, r7, #4
 80017f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	602b      	str	r3, [r5, #0]
 8001800:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001804:	f7ff ff54 	bl	80016b0 <collision_detection>
 8001808:	4603      	mov	r3, r0
 800180a:	f083 0301 	eor.w	r3, r3, #1
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	f040 80cd 	bne.w	80019b0 <collision_detection_enemies+0x238>
			continue;

		uint32_t now = HAL_GetTick();
 8001816:	f002 f8f7 	bl	8003a08 <HAL_GetTick>
 800181a:	61b8      	str	r0, [r7, #24]

		if (now - mario_last_hit  > 1000) {
 800181c:	4b6b      	ldr	r3, [pc, #428]	@ (80019cc <collision_detection_enemies+0x254>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001828:	d908      	bls.n	800183c <collision_detection_enemies+0xc4>
			mario_lives--;
 800182a:	4b6c      	ldr	r3, [pc, #432]	@ (80019dc <collision_detection_enemies+0x264>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	3b01      	subs	r3, #1
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b6a      	ldr	r3, [pc, #424]	@ (80019dc <collision_detection_enemies+0x264>)
 8001834:	701a      	strb	r2, [r3, #0]
			mario_last_hit = now;
 8001836:	4a65      	ldr	r2, [pc, #404]	@ (80019cc <collision_detection_enemies+0x254>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	6013      	str	r3, [r2, #0]
		}
		// renders rest of function obsolete for now
//		return;
		// Landing from above (moving downward)
		if (mario.y_velocity > 0 &&
 800183c:	4b66      	ldr	r3, [pc, #408]	@ (80019d8 <collision_detection_enemies+0x260>)
 800183e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	dd2c      	ble.n	80018a6 <collision_detection_enemies+0x12e>
			prev_mario.y + prev_mario.height <= enemies[i]->y) {
 800184c:	4b64      	ldr	r3, [pc, #400]	@ (80019e0 <collision_detection_enemies+0x268>)
 800184e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001852:	461a      	mov	r2, r3
 8001854:	4b62      	ldr	r3, [pc, #392]	@ (80019e0 <collision_detection_enemies+0x268>)
 8001856:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800185a:	4413      	add	r3, r2
 800185c:	495c      	ldr	r1, [pc, #368]	@ (80019d0 <collision_detection_enemies+0x258>)
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001864:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
		if (mario.y_velocity > 0 &&
 8001868:	4293      	cmp	r3, r2
 800186a:	dc1c      	bgt.n	80018a6 <collision_detection_enemies+0x12e>

			mario.y = enemies[i]->y - mario.height - 40;
 800186c:	4a58      	ldr	r2, [pc, #352]	@ (80019d0 <collision_detection_enemies+0x258>)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001878:	b29a      	uxth	r2, r3
 800187a:	4b57      	ldr	r3, [pc, #348]	@ (80019d8 <collision_detection_enemies+0x260>)
 800187c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001880:	b29b      	uxth	r3, r3
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b28      	subs	r3, #40	@ 0x28
 8001888:	b29b      	uxth	r3, r3
 800188a:	b21a      	sxth	r2, r3
 800188c:	4b52      	ldr	r3, [pc, #328]	@ (80019d8 <collision_detection_enemies+0x260>)
 800188e:	805a      	strh	r2, [r3, #2]
			if (i == 0) {
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d105      	bne.n	80018a2 <collision_detection_enemies+0x12a>
				enemies[i]->died = true;
 8001896:	4a4e      	ldr	r2, [pc, #312]	@ (80019d0 <collision_detection_enemies+0x258>)
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189e:	2201      	movs	r2, #1
 80018a0:	755a      	strb	r2, [r3, #21]
			}
			return true;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e08d      	b.n	80019c2 <collision_detection_enemies+0x24a>
		}
		// Hit head from below (moving upward)
		else if (mario.y_velocity < 0 &&
 80018a6:	4b4c      	ldr	r3, [pc, #304]	@ (80019d8 <collision_detection_enemies+0x260>)
 80018a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80018ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	d52b      	bpl.n	800190e <collision_detection_enemies+0x196>
				 prev_mario.y >= enemies[i]->y + enemies[i]->height) {
 80018b6:	4b4a      	ldr	r3, [pc, #296]	@ (80019e0 <collision_detection_enemies+0x268>)
 80018b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018bc:	4619      	mov	r1, r3
 80018be:	4a44      	ldr	r2, [pc, #272]	@ (80019d0 <collision_detection_enemies+0x258>)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018ca:	4618      	mov	r0, r3
 80018cc:	4a40      	ldr	r2, [pc, #256]	@ (80019d0 <collision_detection_enemies+0x258>)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018d8:	4403      	add	r3, r0
		else if (mario.y_velocity < 0 &&
 80018da:	4299      	cmp	r1, r3
 80018dc:	db17      	blt.n	800190e <collision_detection_enemies+0x196>

			mario.y = enemies[i]->y + enemies[i]->height;
 80018de:	4a3c      	ldr	r2, [pc, #240]	@ (80019d0 <collision_detection_enemies+0x258>)
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4938      	ldr	r1, [pc, #224]	@ (80019d0 <collision_detection_enemies+0x258>)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	b21a      	sxth	r2, r3
 8001900:	4b35      	ldr	r3, [pc, #212]	@ (80019d8 <collision_detection_enemies+0x260>)
 8001902:	805a      	strh	r2, [r3, #2]
			mario.y_velocity = 0.1;  // Start falling
 8001904:	4b34      	ldr	r3, [pc, #208]	@ (80019d8 <collision_detection_enemies+0x260>)
 8001906:	4a37      	ldr	r2, [pc, #220]	@ (80019e4 <collision_detection_enemies+0x26c>)
 8001908:	60da      	str	r2, [r3, #12]
			return true;
 800190a:	2301      	movs	r3, #1
 800190c:	e059      	b.n	80019c2 <collision_detection_enemies+0x24a>
		}
		// Hit from left
		else if (prev_mario.x + prev_mario.width <= enemies[i]->x) {
 800190e:	4b34      	ldr	r3, [pc, #208]	@ (80019e0 <collision_detection_enemies+0x268>)
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	461a      	mov	r2, r3
 8001916:	4b32      	ldr	r3, [pc, #200]	@ (80019e0 <collision_detection_enemies+0x268>)
 8001918:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800191c:	4413      	add	r3, r2
 800191e:	492c      	ldr	r1, [pc, #176]	@ (80019d0 <collision_detection_enemies+0x258>)
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001926:	f9b2 2000 	ldrsh.w	r2, [r2]
 800192a:	4293      	cmp	r3, r2
 800192c:	dc14      	bgt.n	8001958 <collision_detection_enemies+0x1e0>
			mario.x = enemies[i]->x - mario.width;
 800192e:	4a28      	ldr	r2, [pc, #160]	@ (80019d0 <collision_detection_enemies+0x258>)
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193a:	b29a      	uxth	r2, r3
 800193c:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <collision_detection_enemies+0x260>)
 800193e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001942:	b29b      	uxth	r3, r3
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	b29b      	uxth	r3, r3
 8001948:	b21a      	sxth	r2, r3
 800194a:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <collision_detection_enemies+0x260>)
 800194c:	801a      	strh	r2, [r3, #0]
			mario.x_distance_between_frame = 0;
 800194e:	4b22      	ldr	r3, [pc, #136]	@ (80019d8 <collision_detection_enemies+0x260>)
 8001950:	2200      	movs	r2, #0
 8001952:	811a      	strh	r2, [r3, #8]
			return true;
 8001954:	2301      	movs	r3, #1
 8001956:	e034      	b.n	80019c2 <collision_detection_enemies+0x24a>
		}
		// Hit from right
		else if (prev_mario.x >= enemies[i]->x + enemies[i]->width) {
 8001958:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <collision_detection_enemies+0x268>)
 800195a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195e:	4619      	mov	r1, r3
 8001960:	4a1b      	ldr	r2, [pc, #108]	@ (80019d0 <collision_detection_enemies+0x258>)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196c:	4618      	mov	r0, r3
 800196e:	4a18      	ldr	r2, [pc, #96]	@ (80019d0 <collision_detection_enemies+0x258>)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001976:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800197a:	4403      	add	r3, r0
 800197c:	4299      	cmp	r1, r3
 800197e:	db18      	blt.n	80019b2 <collision_detection_enemies+0x23a>
			mario.x = enemies[i]->x + enemies[i]->width;
 8001980:	4a13      	ldr	r2, [pc, #76]	@ (80019d0 <collision_detection_enemies+0x258>)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198c:	b29a      	uxth	r2, r3
 800198e:	4910      	ldr	r1, [pc, #64]	@ (80019d0 <collision_detection_enemies+0x258>)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001996:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800199a:	b29b      	uxth	r3, r3
 800199c:	4413      	add	r3, r2
 800199e:	b29b      	uxth	r3, r3
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <collision_detection_enemies+0x260>)
 80019a4:	801a      	strh	r2, [r3, #0]
			mario.x_distance_between_frame = 0;
 80019a6:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <collision_detection_enemies+0x260>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	811a      	strh	r2, [r3, #8]
			return true;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e008      	b.n	80019c2 <collision_detection_enemies+0x24a>
			continue;
 80019b0:	bf00      	nop
	for (int i = 0; i < 1; i++) {
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3301      	adds	r3, #1
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f77f aeeb 	ble.w	8001796 <collision_detection_enemies+0x1e>
		}
	}

	return false;
 80019c0:	2300      	movs	r3, #0

}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	@ 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20005350 	.word	0x20005350
 80019d0:	2000005c 	.word	0x2000005c
 80019d4:	20000ca4 	.word	0x20000ca4
 80019d8:	2000001c 	.word	0x2000001c
 80019dc:	20000008 	.word	0x20000008
 80019e0:	2000000c 	.word	0x2000000c
 80019e4:	3dcccccd 	.word	0x3dcccccd

080019e8 <standing_on>:



bool standing_on(struct Character mario, struct Object object) {
 80019e8:	b490      	push	{r4, r7}
 80019ea:	b08a      	sub	sp, #40	@ 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	463c      	mov	r4, r7
 80019f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t Ax = mario.x;
 80019f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80019f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t Ay = mario.y;
 80019fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019fe:	84bb      	strh	r3, [r7, #36]	@ 0x24

    uint16_t Bx = object.x;
 8001a00:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001a04:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t By = object.y;
 8001a06:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001a0a:	843b      	strh	r3, [r7, #32]

    uint16_t A_left   = Ax;
 8001a0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a0e:	83fb      	strh	r3, [r7, #30]
    uint16_t A_right  = Ax + mario.width;
 8001a10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a18:	4413      	add	r3, r2
 8001a1a:	83bb      	strh	r3, [r7, #28]
    uint16_t A_bottom = Ay + mario.height;
 8001a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a24:	4413      	add	r3, r2
 8001a26:	837b      	strh	r3, [r7, #26]

    uint16_t B_left   = Bx;
 8001a28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001a2a:	833b      	strh	r3, [r7, #24]
    uint16_t B_right  = Bx + object.width;
 8001a2c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001a34:	4413      	add	r3, r2
 8001a36:	82fb      	strh	r3, [r7, #22]
    uint16_t B_top    = By;
 8001a38:	8c3b      	ldrh	r3, [r7, #32]
 8001a3a:	82bb      	strh	r3, [r7, #20]

    // Check if Mario is horizontally overlapping with the object
    bool x_overlap = (A_right > B_left) && (A_left < B_right);
 8001a3c:	8bba      	ldrh	r2, [r7, #28]
 8001a3e:	8b3b      	ldrh	r3, [r7, #24]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d905      	bls.n	8001a50 <standing_on+0x68>
 8001a44:	8bfa      	ldrh	r2, [r7, #30]
 8001a46:	8afb      	ldrh	r3, [r7, #22]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d201      	bcs.n	8001a50 <standing_on+0x68>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <standing_on+0x6a>
 8001a50:	2300      	movs	r3, #0
 8001a52:	74fb      	strb	r3, [r7, #19]
 8001a54:	7cfb      	ldrb	r3, [r7, #19]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	74fb      	strb	r3, [r7, #19]

    // Check if Mario's bottom is within 2 pixels of the object's top
    // This gives tolerance for floating-point precision issues
    bool y_standing = (A_bottom >= B_top - 1) && (A_bottom <= B_top + 1);
 8001a5c:	8b7a      	ldrh	r2, [r7, #26]
 8001a5e:	8abb      	ldrh	r3, [r7, #20]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	429a      	cmp	r2, r3
 8001a64:	db06      	blt.n	8001a74 <standing_on+0x8c>
 8001a66:	8b7a      	ldrh	r2, [r7, #26]
 8001a68:	8abb      	ldrh	r3, [r7, #20]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	dc01      	bgt.n	8001a74 <standing_on+0x8c>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <standing_on+0x8e>
 8001a74:	2300      	movs	r3, #0
 8001a76:	74bb      	strb	r3, [r7, #18]
 8001a78:	7cbb      	ldrb	r3, [r7, #18]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	74bb      	strb	r3, [r7, #18]

    return x_overlap && y_standing;
 8001a80:	7cfb      	ldrb	r3, [r7, #19]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d004      	beq.n	8001a90 <standing_on+0xa8>
 8001a86:	7cbb      	ldrb	r3, [r7, #18]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <standing_on+0xa8>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <standing_on+0xaa>
 8001a90:	2300      	movs	r3, #0
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3728      	adds	r7, #40	@ 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc90      	pop	{r4, r7}
 8001aa0:	4770      	bx	lr
	...

08001aa4 <isTouchingGround>:

bool isTouchingGround() {
 8001aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aa6:	b089      	sub	sp, #36	@ 0x24
 8001aa8:	af06      	add	r7, sp, #24
    bool onGround = false;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	71fb      	strb	r3, [r7, #7]
    bool collision_detected = false;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	70fb      	strb	r3, [r7, #3]

    for (uint8_t i = 0; i < num_objects; i++) {
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	71bb      	strb	r3, [r7, #6]
 8001ab6:	e1d3      	b.n	8001e60 <isTouchingGround+0x3bc>
        if (!objects[i].collidable) {
 8001ab8:	79ba      	ldrb	r2, [r7, #6]
 8001aba:	49b0      	ldr	r1, [pc, #704]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3310      	adds	r3, #16
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	f083 0301 	eor.w	r3, r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80be 	beq.w	8001c52 <isTouchingGround+0x1ae>
			if (collision_detection(prev_mario, objects[i]) || collision_detection(mario, objects[i])) {
 8001ad6:	79ba      	ldrb	r2, [r7, #6]
 8001ad8:	4ea9      	ldr	r6, [pc, #676]	@ (8001d80 <isTouchingGround+0x2dc>)
 8001ada:	49a8      	ldr	r1, [pc, #672]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	466c      	mov	r4, sp
 8001ae8:	461d      	mov	r5, r3
 8001aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aee:	682b      	ldr	r3, [r5, #0]
 8001af0:	6023      	str	r3, [r4, #0]
 8001af2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001af6:	f7ff fddb 	bl	80016b0 <collision_detection>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d114      	bne.n	8001b2a <isTouchingGround+0x86>
 8001b00:	79ba      	ldrb	r2, [r7, #6]
 8001b02:	4ea0      	ldr	r6, [pc, #640]	@ (8001d84 <isTouchingGround+0x2e0>)
 8001b04:	499d      	ldr	r1, [pc, #628]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	466c      	mov	r4, sp
 8001b12:	461d      	mov	r5, r3
 8001b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b18:	682b      	ldr	r3, [r5, #0]
 8001b1a:	6023      	str	r3, [r4, #0]
 8001b1c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b20:	f7ff fdc6 	bl	80016b0 <collision_detection>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d043      	beq.n	8001bb2 <isTouchingGround+0x10e>
				ILI9341_DrawImage(objects[i].x, objects[i].y, objects[i].width, objects[i].height, objects[i].frame);
 8001b2a:	79ba      	ldrb	r2, [r7, #6]
 8001b2c:	4993      	ldr	r1, [pc, #588]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3c:	b298      	uxth	r0, r3
 8001b3e:	79ba      	ldrb	r2, [r7, #6]
 8001b40:	498e      	ldr	r1, [pc, #568]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b52:	b299      	uxth	r1, r3
 8001b54:	79ba      	ldrb	r2, [r7, #6]
 8001b56:	4c89      	ldr	r4, [pc, #548]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4423      	add	r3, r4
 8001b62:	3308      	adds	r3, #8
 8001b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b68:	b29c      	uxth	r4, r3
 8001b6a:	79ba      	ldrb	r2, [r7, #6]
 8001b6c:	4d83      	ldr	r5, [pc, #524]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	442b      	add	r3, r5
 8001b78:	330a      	adds	r3, #10
 8001b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7e:	b29d      	uxth	r5, r3
 8001b80:	79ba      	ldrb	r2, [r7, #6]
 8001b82:	4e7e      	ldr	r6, [pc, #504]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4433      	add	r3, r6
 8001b8e:	330c      	adds	r3, #12
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	462b      	mov	r3, r5
 8001b96:	4622      	mov	r2, r4
 8001b98:	f7ff fbd0 	bl	800133c <ILI9341_DrawImage>
				objects[i].redraw = true;
 8001b9c:	79ba      	ldrb	r2, [r7, #6]
 8001b9e:	4977      	ldr	r1, [pc, #476]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3311      	adds	r3, #17
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
				break;
 8001bb0:	e15e      	b.n	8001e70 <isTouchingGround+0x3cc>
			} else if (objects[i].redraw) {
 8001bb2:	79ba      	ldrb	r2, [r7, #6]
 8001bb4:	4971      	ldr	r1, [pc, #452]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3311      	adds	r3, #17
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8145 	beq.w	8001e54 <isTouchingGround+0x3b0>
				ILI9341_DrawImage(objects[i].x, objects[i].y, objects[i].width, objects[i].height, objects[i].frame);
 8001bca:	79ba      	ldrb	r2, [r7, #6]
 8001bcc:	496b      	ldr	r1, [pc, #428]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bdc:	b298      	uxth	r0, r3
 8001bde:	79ba      	ldrb	r2, [r7, #6]
 8001be0:	4966      	ldr	r1, [pc, #408]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	3302      	adds	r3, #2
 8001bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf2:	b299      	uxth	r1, r3
 8001bf4:	79ba      	ldrb	r2, [r7, #6]
 8001bf6:	4c61      	ldr	r4, [pc, #388]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4423      	add	r3, r4
 8001c02:	3308      	adds	r3, #8
 8001c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c08:	b29c      	uxth	r4, r3
 8001c0a:	79ba      	ldrb	r2, [r7, #6]
 8001c0c:	4d5b      	ldr	r5, [pc, #364]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	442b      	add	r3, r5
 8001c18:	330a      	adds	r3, #10
 8001c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1e:	b29d      	uxth	r5, r3
 8001c20:	79ba      	ldrb	r2, [r7, #6]
 8001c22:	4e56      	ldr	r6, [pc, #344]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4433      	add	r3, r6
 8001c2e:	330c      	adds	r3, #12
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	462b      	mov	r3, r5
 8001c36:	4622      	mov	r2, r4
 8001c38:	f7ff fb80 	bl	800133c <ILI9341_DrawImage>
				objects[i].redraw = false;
 8001c3c:	79ba      	ldrb	r2, [r7, #6]
 8001c3e:	494f      	ldr	r1, [pc, #316]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3311      	adds	r3, #17
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
			}
        continue;
 8001c50:	e100      	b.n	8001e54 <isTouchingGround+0x3b0>
        }

        if (!collision_detection(mario, objects[i]))
 8001c52:	79ba      	ldrb	r2, [r7, #6]
 8001c54:	4e4b      	ldr	r6, [pc, #300]	@ (8001d84 <isTouchingGround+0x2e0>)
 8001c56:	4949      	ldr	r1, [pc, #292]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	466c      	mov	r4, sp
 8001c64:	461d      	mov	r5, r3
 8001c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c6a:	682b      	ldr	r3, [r5, #0]
 8001c6c:	6023      	str	r3, [r4, #0]
 8001c6e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001c72:	f7ff fd1d 	bl	80016b0 <collision_detection>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f083 0301 	eor.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f040 80ea 	bne.w	8001e58 <isTouchingGround+0x3b4>
            continue;

        collision_detected = true;
 8001c84:	2301      	movs	r3, #1
 8001c86:	70fb      	strb	r3, [r7, #3]

        // Landing from above (moving downward)
        if (mario.y_velocity > 0 &&
 8001c88:	4b3e      	ldr	r3, [pc, #248]	@ (8001d84 <isTouchingGround+0x2e0>)
 8001c8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c96:	dd2e      	ble.n	8001cf6 <isTouchingGround+0x252>
            prev_mario.y + prev_mario.height <= objects[i].y) {
 8001c98:	4b39      	ldr	r3, [pc, #228]	@ (8001d80 <isTouchingGround+0x2dc>)
 8001c9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b37      	ldr	r3, [pc, #220]	@ (8001d80 <isTouchingGround+0x2dc>)
 8001ca2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ca6:	18d1      	adds	r1, r2, r3
 8001ca8:	79ba      	ldrb	r2, [r7, #6]
 8001caa:	4834      	ldr	r0, [pc, #208]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4403      	add	r3, r0
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
        if (mario.y_velocity > 0 &&
 8001cbc:	4299      	cmp	r1, r3
 8001cbe:	dc1a      	bgt.n	8001cf6 <isTouchingGround+0x252>

            mario.y = objects[i].y - mario.height;
 8001cc0:	79ba      	ldrb	r2, [r7, #6]
 8001cc2:	492e      	ldr	r1, [pc, #184]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	3302      	adds	r3, #2
 8001cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001d84 <isTouchingGround+0x2e0>)
 8001cd8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	b21a      	sxth	r2, r3
 8001ce4:	4b27      	ldr	r3, [pc, #156]	@ (8001d84 <isTouchingGround+0x2e0>)
 8001ce6:	805a      	strh	r2, [r3, #2]
            mario.y_velocity = 0;
 8001ce8:	4b26      	ldr	r3, [pc, #152]	@ (8001d84 <isTouchingGround+0x2e0>)
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	60da      	str	r2, [r3, #12]
            onGround = true;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	e0ad      	b.n	8001e52 <isTouchingGround+0x3ae>
        }
        // Hit head from below (moving upward)
        else if (mario.y_velocity < 0 &&
 8001cf6:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <isTouchingGround+0x2e0>)
 8001cf8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	d542      	bpl.n	8001d8c <isTouchingGround+0x2e8>
                 prev_mario.y >= objects[i].y + objects[i].height) {
 8001d06:	4b1e      	ldr	r3, [pc, #120]	@ (8001d80 <isTouchingGround+0x2dc>)
 8001d08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	79ba      	ldrb	r2, [r7, #6]
 8001d10:	491a      	ldr	r1, [pc, #104]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d22:	461c      	mov	r4, r3
 8001d24:	79ba      	ldrb	r2, [r7, #6]
 8001d26:	4915      	ldr	r1, [pc, #84]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	330a      	adds	r3, #10
 8001d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d38:	4423      	add	r3, r4
        else if (mario.y_velocity < 0 &&
 8001d3a:	4298      	cmp	r0, r3
 8001d3c:	db26      	blt.n	8001d8c <isTouchingGround+0x2e8>

            mario.y = objects[i].y + objects[i].height;
 8001d3e:	79ba      	ldrb	r2, [r7, #6]
 8001d40:	490e      	ldr	r1, [pc, #56]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d52:	b299      	uxth	r1, r3
 8001d54:	79ba      	ldrb	r2, [r7, #6]
 8001d56:	4809      	ldr	r0, [pc, #36]	@ (8001d7c <isTouchingGround+0x2d8>)
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4403      	add	r3, r0
 8001d62:	330a      	adds	r3, #10
 8001d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	440b      	add	r3, r1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <isTouchingGround+0x2e0>)
 8001d72:	805a      	strh	r2, [r3, #2]
            mario.y_velocity = 0.1;  // Start falling
 8001d74:	4b03      	ldr	r3, [pc, #12]	@ (8001d84 <isTouchingGround+0x2e0>)
 8001d76:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <isTouchingGround+0x2e4>)
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	e06a      	b.n	8001e52 <isTouchingGround+0x3ae>
 8001d7c:	20000294 	.word	0x20000294
 8001d80:	2000000c 	.word	0x2000000c
 8001d84:	2000001c 	.word	0x2000001c
 8001d88:	3dcccccd 	.word	0x3dcccccd
        }
        // Hit from left
        else if (prev_mario.x + prev_mario.width <= objects[i].x) {
 8001d8c:	4b61      	ldr	r3, [pc, #388]	@ (8001f14 <isTouchingGround+0x470>)
 8001d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b5f      	ldr	r3, [pc, #380]	@ (8001f14 <isTouchingGround+0x470>)
 8001d96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d9a:	18d1      	adds	r1, r2, r3
 8001d9c:	79ba      	ldrb	r2, [r7, #6]
 8001d9e:	485e      	ldr	r0, [pc, #376]	@ (8001f18 <isTouchingGround+0x474>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4403      	add	r3, r0
 8001daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dae:	4299      	cmp	r1, r3
 8001db0:	dc16      	bgt.n	8001de0 <isTouchingGround+0x33c>
            mario.x = objects[i].x - mario.width;
 8001db2:	79ba      	ldrb	r2, [r7, #6]
 8001db4:	4958      	ldr	r1, [pc, #352]	@ (8001f18 <isTouchingGround+0x474>)
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b55      	ldr	r3, [pc, #340]	@ (8001f1c <isTouchingGround+0x478>)
 8001dc8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b21a      	sxth	r2, r3
 8001dd4:	4b51      	ldr	r3, [pc, #324]	@ (8001f1c <isTouchingGround+0x478>)
 8001dd6:	801a      	strh	r2, [r3, #0]
            mario.x_distance_between_frame = 0;
 8001dd8:	4b50      	ldr	r3, [pc, #320]	@ (8001f1c <isTouchingGround+0x478>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	811a      	strh	r2, [r3, #8]
        else if (prev_mario.x >= objects[i].x + objects[i].width) {
            mario.x = objects[i].x + objects[i].width;
            mario.x_distance_between_frame = 0;
        }

        break;  // Handle only one collision per frame
 8001dde:	e046      	b.n	8001e6e <isTouchingGround+0x3ca>
        else if (prev_mario.x >= objects[i].x + objects[i].width) {
 8001de0:	4b4c      	ldr	r3, [pc, #304]	@ (8001f14 <isTouchingGround+0x470>)
 8001de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de6:	4618      	mov	r0, r3
 8001de8:	79ba      	ldrb	r2, [r7, #6]
 8001dea:	494b      	ldr	r1, [pc, #300]	@ (8001f18 <isTouchingGround+0x474>)
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfa:	461c      	mov	r4, r3
 8001dfc:	79ba      	ldrb	r2, [r7, #6]
 8001dfe:	4946      	ldr	r1, [pc, #280]	@ (8001f18 <isTouchingGround+0x474>)
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	3308      	adds	r3, #8
 8001e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e10:	4423      	add	r3, r4
 8001e12:	4298      	cmp	r0, r3
 8001e14:	db2b      	blt.n	8001e6e <isTouchingGround+0x3ca>
            mario.x = objects[i].x + objects[i].width;
 8001e16:	79ba      	ldrb	r2, [r7, #6]
 8001e18:	493f      	ldr	r1, [pc, #252]	@ (8001f18 <isTouchingGround+0x474>)
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e28:	b299      	uxth	r1, r3
 8001e2a:	79ba      	ldrb	r2, [r7, #6]
 8001e2c:	483a      	ldr	r0, [pc, #232]	@ (8001f18 <isTouchingGround+0x474>)
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4403      	add	r3, r0
 8001e38:	3308      	adds	r3, #8
 8001e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	440b      	add	r3, r1
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	b21a      	sxth	r2, r3
 8001e46:	4b35      	ldr	r3, [pc, #212]	@ (8001f1c <isTouchingGround+0x478>)
 8001e48:	801a      	strh	r2, [r3, #0]
            mario.x_distance_between_frame = 0;
 8001e4a:	4b34      	ldr	r3, [pc, #208]	@ (8001f1c <isTouchingGround+0x478>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	811a      	strh	r2, [r3, #8]
        break;  // Handle only one collision per frame
 8001e50:	e00d      	b.n	8001e6e <isTouchingGround+0x3ca>
 8001e52:	e00c      	b.n	8001e6e <isTouchingGround+0x3ca>
        continue;
 8001e54:	bf00      	nop
 8001e56:	e000      	b.n	8001e5a <isTouchingGround+0x3b6>
            continue;
 8001e58:	bf00      	nop
    for (uint8_t i = 0; i < num_objects; i++) {
 8001e5a:	79bb      	ldrb	r3, [r7, #6]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	71bb      	strb	r3, [r7, #6]
 8001e60:	4b2f      	ldr	r3, [pc, #188]	@ (8001f20 <isTouchingGround+0x47c>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	79ba      	ldrb	r2, [r7, #6]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	f4ff ae26 	bcc.w	8001ab8 <isTouchingGround+0x14>
 8001e6c:	e000      	b.n	8001e70 <isTouchingGround+0x3cc>
        break;  // Handle only one collision per frame
 8001e6e:	bf00      	nop
    // 1. Mario is not currently on ground from collision detection
    // 2. Mario is not standing on any platform
    // 3. Mario has zero velocity (not already falling/jumping)
    // 4. Mario is not at the bottom boundary

    if (!onGround && mario.y_velocity == 0 && mario.y < 176) {
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f083 0301 	eor.w	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d045      	beq.n	8001f08 <isTouchingGround+0x464>
 8001e7c:	4b27      	ldr	r3, [pc, #156]	@ (8001f1c <isTouchingGround+0x478>)
 8001e7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8a:	d13d      	bne.n	8001f08 <isTouchingGround+0x464>
 8001e8c:	4b23      	ldr	r3, [pc, #140]	@ (8001f1c <isTouchingGround+0x478>)
 8001e8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e92:	2baf      	cmp	r3, #175	@ 0xaf
 8001e94:	dc38      	bgt.n	8001f08 <isTouchingGround+0x464>
        bool is_standing_on_something = false;
 8001e96:	2300      	movs	r3, #0
 8001e98:	717b      	strb	r3, [r7, #5]

        for (uint8_t i = 0; i < num_objects; i++) {
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	713b      	strb	r3, [r7, #4]
 8001e9e:	e025      	b.n	8001eec <isTouchingGround+0x448>
            if (objects[i].collidable && standing_on(mario, objects[i])) {
 8001ea0:	793a      	ldrb	r2, [r7, #4]
 8001ea2:	491d      	ldr	r1, [pc, #116]	@ (8001f18 <isTouchingGround+0x474>)
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	3310      	adds	r3, #16
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d017      	beq.n	8001ee6 <isTouchingGround+0x442>
 8001eb6:	793a      	ldrb	r2, [r7, #4]
 8001eb8:	4e18      	ldr	r6, [pc, #96]	@ (8001f1c <isTouchingGround+0x478>)
 8001eba:	4917      	ldr	r1, [pc, #92]	@ (8001f18 <isTouchingGround+0x474>)
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	466c      	mov	r4, sp
 8001ec8:	461d      	mov	r5, r3
 8001eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ece:	682b      	ldr	r3, [r5, #0]
 8001ed0:	6023      	str	r3, [r4, #0]
 8001ed2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ed6:	f7ff fd87 	bl	80019e8 <standing_on>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <isTouchingGround+0x442>
                is_standing_on_something = true;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	717b      	strb	r3, [r7, #5]
                break;
 8001ee4:	e007      	b.n	8001ef6 <isTouchingGround+0x452>
        for (uint8_t i = 0; i < num_objects; i++) {
 8001ee6:	793b      	ldrb	r3, [r7, #4]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	713b      	strb	r3, [r7, #4]
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <isTouchingGround+0x47c>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	793a      	ldrb	r2, [r7, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d3d4      	bcc.n	8001ea0 <isTouchingGround+0x3fc>
            }
        }

        // Only apply gravity if not standing on anything
        if (!is_standing_on_something) {
 8001ef6:	797b      	ldrb	r3, [r7, #5]
 8001ef8:	f083 0301 	eor.w	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <isTouchingGround+0x464>
            mario.y_velocity = 0.1;
 8001f02:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <isTouchingGround+0x478>)
 8001f04:	4a07      	ldr	r2, [pc, #28]	@ (8001f24 <isTouchingGround+0x480>)
 8001f06:	60da      	str	r2, [r3, #12]
        }
    }

    return onGround;
 8001f08:	79fb      	ldrb	r3, [r7, #7]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000000c 	.word	0x2000000c
 8001f18:	20000294 	.word	0x20000294
 8001f1c:	2000001c 	.word	0x2000001c
 8001f20:	20002ca4 	.word	0x20002ca4
 8001f24:	3dcccccd 	.word	0x3dcccccd

08001f28 <cleanMarioBackground>:



void cleanMarioBackground(uint16_t* frame, uint16_t* buffer, uint16_t width, uint16_t height, uint16_t buffsize) {
 8001f28:	b480      	push	{r7}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	4611      	mov	r1, r2
 8001f34:	461a      	mov	r2, r3
 8001f36:	460b      	mov	r3, r1
 8001f38:	80fb      	strh	r3, [r7, #6]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	80bb      	strh	r3, [r7, #4]
    for (uint16_t i = 0; i < buffsize; i++) {
 8001f3e:	2300      	movs	r3, #0
 8001f40:	82fb      	strh	r3, [r7, #22]
 8001f42:	e009      	b.n	8001f58 <cleanMarioBackground+0x30>
        buffer[i] = ILI9341_CYAN;  // Initialize everything to cyan
 8001f44:	8afb      	ldrh	r3, [r7, #22]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001f50:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < buffsize; i++) {
 8001f52:	8afb      	ldrh	r3, [r7, #22]
 8001f54:	3301      	adds	r3, #1
 8001f56:	82fb      	strh	r3, [r7, #22]
 8001f58:	8afa      	ldrh	r2, [r7, #22]
 8001f5a:	8c3b      	ldrh	r3, [r7, #32]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d3f1      	bcc.n	8001f44 <cleanMarioBackground+0x1c>
    }
	for (uint16_t i = 0; i < width * height; i++) {
 8001f60:	2300      	movs	r3, #0
 8001f62:	82bb      	strh	r3, [r7, #20]
 8001f64:	e013      	b.n	8001f8e <cleanMarioBackground+0x66>
		if (frame[i] != 0){
 8001f66:	8abb      	ldrh	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d009      	beq.n	8001f88 <cleanMarioBackground+0x60>
			buffer[i] = frame[i];
 8001f74:	8abb      	ldrh	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	441a      	add	r2, r3
 8001f7c:	8abb      	ldrh	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	440b      	add	r3, r1
 8001f84:	8812      	ldrh	r2, [r2, #0]
 8001f86:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < width * height; i++) {
 8001f88:	8abb      	ldrh	r3, [r7, #20]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	82bb      	strh	r3, [r7, #20]
 8001f8e:	8aba      	ldrh	r2, [r7, #20]
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	88b9      	ldrh	r1, [r7, #4]
 8001f94:	fb01 f303 	mul.w	r3, r1, r3
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	dbe4      	blt.n	8001f66 <cleanMarioBackground+0x3e>
		}
	}
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <draw_map_1>:
}


uint8_t map = 1;

void draw_map_1() {
 8001fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fae:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af02      	add	r7, sp, #8
	ILI9341_FillScreen(ILI9341_CYAN);
 8001fb6:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001fba:	f7ff f9ad 	bl	8001318 <ILI9341_FillScreen>
	for (int i = 0; i < 10; i++) {
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8001fc4:	f102 0204 	add.w	r2, r2, #4
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	e0d8      	b.n	800217e <draw_map_1+0x1d2>
		objects[i].x = i * 32;
 8001fcc:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001fd0:	f103 0304 	add.w	r3, r3, #4
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	015b      	lsls	r3, r3, #5
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	b218      	sxth	r0, r3
 8001fde:	49bd      	ldr	r1, [pc, #756]	@ (80022d4 <draw_map_1+0x328>)
 8001fe0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001fe4:	f103 0304 	add.w	r3, r3, #4
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	801a      	strh	r2, [r3, #0]
		objects[i].prev_x = i * 32;
 8001ff8:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8001ffc:	f103 0304 	add.w	r3, r3, #4
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	015b      	lsls	r3, r3, #5
 8002006:	b29b      	uxth	r3, r3
 8002008:	b218      	sxth	r0, r3
 800200a:	49b2      	ldr	r1, [pc, #712]	@ (80022d4 <draw_map_1+0x328>)
 800200c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002010:	f103 0304 	add.w	r3, r3, #4
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3304      	adds	r3, #4
 8002022:	4602      	mov	r2, r0
 8002024:	801a      	strh	r2, [r3, #0]
		objects[i].y = 208;
 8002026:	49ab      	ldr	r1, [pc, #684]	@ (80022d4 <draw_map_1+0x328>)
 8002028:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800202c:	f103 0304 	add.w	r3, r3, #4
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	3302      	adds	r3, #2
 800203e:	22d0      	movs	r2, #208	@ 0xd0
 8002040:	801a      	strh	r2, [r3, #0]
		objects[i].prev_y = 208;
 8002042:	49a4      	ldr	r1, [pc, #656]	@ (80022d4 <draw_map_1+0x328>)
 8002044:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002048:	f103 0304 	add.w	r3, r3, #4
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	3306      	adds	r3, #6
 800205a:	22d0      	movs	r2, #208	@ 0xd0
 800205c:	801a      	strh	r2, [r3, #0]
		objects[i].width = 32;
 800205e:	499d      	ldr	r1, [pc, #628]	@ (80022d4 <draw_map_1+0x328>)
 8002060:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002064:	f103 0304 	add.w	r3, r3, #4
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	3308      	adds	r3, #8
 8002076:	2220      	movs	r2, #32
 8002078:	801a      	strh	r2, [r3, #0]
		objects[i].height = 32;
 800207a:	4996      	ldr	r1, [pc, #600]	@ (80022d4 <draw_map_1+0x328>)
 800207c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002080:	f103 0304 	add.w	r3, r3, #4
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	330a      	adds	r3, #10
 8002092:	2220      	movs	r2, #32
 8002094:	801a      	strh	r2, [r3, #0]
		objects[i].frame = ground;
 8002096:	498f      	ldr	r1, [pc, #572]	@ (80022d4 <draw_map_1+0x328>)
 8002098:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800209c:	f103 0304 	add.w	r3, r3, #4
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	330c      	adds	r3, #12
 80020ae:	4a8a      	ldr	r2, [pc, #552]	@ (80022d8 <draw_map_1+0x32c>)
 80020b0:	601a      	str	r2, [r3, #0]
		objects[i].collidable = true;
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <draw_map_1+0x328>)
 80020b4:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80020b8:	f103 0304 	add.w	r3, r3, #4
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3310      	adds	r3, #16
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]


		ILI9341_DrawImage(objects[i].x, objects[i].y, objects[i].width, objects[i].height, objects[i].frame);
 80020ce:	4981      	ldr	r1, [pc, #516]	@ (80022d4 <draw_map_1+0x328>)
 80020d0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80020d4:	f103 0304 	add.w	r3, r3, #4
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e8:	b298      	uxth	r0, r3
 80020ea:	497a      	ldr	r1, [pc, #488]	@ (80022d4 <draw_map_1+0x328>)
 80020ec:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80020f0:	f103 0304 	add.w	r3, r3, #4
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3302      	adds	r3, #2
 8002102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002106:	b299      	uxth	r1, r3
 8002108:	4c72      	ldr	r4, [pc, #456]	@ (80022d4 <draw_map_1+0x328>)
 800210a:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800210e:	f103 0304 	add.w	r3, r3, #4
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4423      	add	r3, r4
 800211e:	3308      	adds	r3, #8
 8002120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002124:	b29c      	uxth	r4, r3
 8002126:	4d6b      	ldr	r5, [pc, #428]	@ (80022d4 <draw_map_1+0x328>)
 8002128:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800212c:	f103 0304 	add.w	r3, r3, #4
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	442b      	add	r3, r5
 800213c:	330a      	adds	r3, #10
 800213e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002142:	b29d      	uxth	r5, r3
 8002144:	4e63      	ldr	r6, [pc, #396]	@ (80022d4 <draw_map_1+0x328>)
 8002146:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800214a:	f103 0304 	add.w	r3, r3, #4
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4433      	add	r3, r6
 800215a:	330c      	adds	r3, #12
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	462b      	mov	r3, r5
 8002162:	4622      	mov	r2, r4
 8002164:	f7ff f8ea 	bl	800133c <ILI9341_DrawImage>
	for (int i = 0; i < 10; i++) {
 8002168:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800216c:	f103 0304 	add.w	r3, r3, #4
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8002178:	f102 0204 	add.w	r2, r2, #4
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002182:	f103 0304 	add.w	r3, r3, #4
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b09      	cmp	r3, #9
 800218a:	f77f af1f 	ble.w	8001fcc <draw_map_1+0x20>
	}

	objects[10].x = 160;
 800218e:	4b51      	ldr	r3, [pc, #324]	@ (80022d4 <draw_map_1+0x328>)
 8002190:	22a0      	movs	r2, #160	@ 0xa0
 8002192:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
	objects[10].prev_x = 160;
 8002196:	4b4f      	ldr	r3, [pc, #316]	@ (80022d4 <draw_map_1+0x328>)
 8002198:	22a0      	movs	r2, #160	@ 0xa0
 800219a:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
	objects[10].y = 100;
 800219e:	4b4d      	ldr	r3, [pc, #308]	@ (80022d4 <draw_map_1+0x328>)
 80021a0:	2264      	movs	r2, #100	@ 0x64
 80021a2:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
	objects[10].prev_y = 160;
 80021a6:	4b4b      	ldr	r3, [pc, #300]	@ (80022d4 <draw_map_1+0x328>)
 80021a8:	22a0      	movs	r2, #160	@ 0xa0
 80021aa:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
	objects[10].width = 32;
 80021ae:	4b49      	ldr	r3, [pc, #292]	@ (80022d4 <draw_map_1+0x328>)
 80021b0:	2220      	movs	r2, #32
 80021b2:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
	objects[10].height = 32;
 80021b6:	4b47      	ldr	r3, [pc, #284]	@ (80022d4 <draw_map_1+0x328>)
 80021b8:	2220      	movs	r2, #32
 80021ba:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
	objects[10].frame = brick;
 80021be:	4b45      	ldr	r3, [pc, #276]	@ (80022d4 <draw_map_1+0x328>)
 80021c0:	4a46      	ldr	r2, [pc, #280]	@ (80022dc <draw_map_1+0x330>)
 80021c2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	objects[10].collidable = true;
 80021c6:	4b43      	ldr	r3, [pc, #268]	@ (80022d4 <draw_map_1+0x328>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
	objects[10].redraw = false;
 80021ce:	4b41      	ldr	r3, [pc, #260]	@ (80022d4 <draw_map_1+0x328>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9


	objects[11].x = 128;
 80021d6:	4b3f      	ldr	r3, [pc, #252]	@ (80022d4 <draw_map_1+0x328>)
 80021d8:	2280      	movs	r2, #128	@ 0x80
 80021da:	f8a3 20dc 	strh.w	r2, [r3, #220]	@ 0xdc
	objects[11].prev_x = 160;
 80021de:	4b3d      	ldr	r3, [pc, #244]	@ (80022d4 <draw_map_1+0x328>)
 80021e0:	22a0      	movs	r2, #160	@ 0xa0
 80021e2:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
	objects[11].y = 100;
 80021e6:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <draw_map_1+0x328>)
 80021e8:	2264      	movs	r2, #100	@ 0x64
 80021ea:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
	objects[11].prev_y = 160;
 80021ee:	4b39      	ldr	r3, [pc, #228]	@ (80022d4 <draw_map_1+0x328>)
 80021f0:	22a0      	movs	r2, #160	@ 0xa0
 80021f2:	f8a3 20e2 	strh.w	r2, [r3, #226]	@ 0xe2
	objects[11].width = 32;
 80021f6:	4b37      	ldr	r3, [pc, #220]	@ (80022d4 <draw_map_1+0x328>)
 80021f8:	2220      	movs	r2, #32
 80021fa:	f8a3 20e4 	strh.w	r2, [r3, #228]	@ 0xe4
	objects[11].height = 32;
 80021fe:	4b35      	ldr	r3, [pc, #212]	@ (80022d4 <draw_map_1+0x328>)
 8002200:	2220      	movs	r2, #32
 8002202:	f8a3 20e6 	strh.w	r2, [r3, #230]	@ 0xe6
	objects[11].frame = brick;
 8002206:	4b33      	ldr	r3, [pc, #204]	@ (80022d4 <draw_map_1+0x328>)
 8002208:	4a34      	ldr	r2, [pc, #208]	@ (80022dc <draw_map_1+0x330>)
 800220a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	objects[11].collidable = true;
 800220e:	4b31      	ldr	r3, [pc, #196]	@ (80022d4 <draw_map_1+0x328>)
 8002210:	2201      	movs	r2, #1
 8002212:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	objects[11].redraw = false;
 8002216:	4b2f      	ldr	r3, [pc, #188]	@ (80022d4 <draw_map_1+0x328>)
 8002218:	2200      	movs	r2, #0
 800221a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed

	objects[12].x = 230;
 800221e:	4b2d      	ldr	r3, [pc, #180]	@ (80022d4 <draw_map_1+0x328>)
 8002220:	22e6      	movs	r2, #230	@ 0xe6
 8002222:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
	objects[12].prev_x = 230;
 8002226:	4b2b      	ldr	r3, [pc, #172]	@ (80022d4 <draw_map_1+0x328>)
 8002228:	22e6      	movs	r2, #230	@ 0xe6
 800222a:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
	objects[12].y = 40;
 800222e:	4b29      	ldr	r3, [pc, #164]	@ (80022d4 <draw_map_1+0x328>)
 8002230:	2228      	movs	r2, #40	@ 0x28
 8002232:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	objects[12].prev_y = 230;
 8002236:	4b27      	ldr	r3, [pc, #156]	@ (80022d4 <draw_map_1+0x328>)
 8002238:	22e6      	movs	r2, #230	@ 0xe6
 800223a:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
	objects[12].width = 64;
 800223e:	4b25      	ldr	r3, [pc, #148]	@ (80022d4 <draw_map_1+0x328>)
 8002240:	2240      	movs	r2, #64	@ 0x40
 8002242:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
	objects[12].height = 48;
 8002246:	4b23      	ldr	r3, [pc, #140]	@ (80022d4 <draw_map_1+0x328>)
 8002248:	2230      	movs	r2, #48	@ 0x30
 800224a:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
	objects[12].frame = cloud;
 800224e:	4b21      	ldr	r3, [pc, #132]	@ (80022d4 <draw_map_1+0x328>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <draw_map_1+0x334>)
 8002252:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
	objects[12].collidable = false;
 8002256:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <draw_map_1+0x328>)
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2100 	strb.w	r2, [r3, #256]	@ 0x100
	objects[12].redraw = false;
 800225e:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <draw_map_1+0x328>)
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101


	objects[13].x = 256;
 8002266:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <draw_map_1+0x328>)
 8002268:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800226c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
	objects[13].prev_x = 256;
 8002270:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <draw_map_1+0x328>)
 8002272:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002276:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
	objects[13].y = 144;
 800227a:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <draw_map_1+0x328>)
 800227c:	2290      	movs	r2, #144	@ 0x90
 800227e:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	objects[13].prev_y = 144;
 8002282:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <draw_map_1+0x328>)
 8002284:	2290      	movs	r2, #144	@ 0x90
 8002286:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a
	objects[13].width = 64;
 800228a:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <draw_map_1+0x328>)
 800228c:	2240      	movs	r2, #64	@ 0x40
 800228e:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
	objects[13].height = 64;
 8002292:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <draw_map_1+0x328>)
 8002294:	2240      	movs	r2, #64	@ 0x40
 8002296:	f8a3 210e 	strh.w	r2, [r3, #270]	@ 0x10e
	objects[13].frame = pipe;
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <draw_map_1+0x328>)
 800229c:	4a11      	ldr	r2, [pc, #68]	@ (80022e4 <draw_map_1+0x338>)
 800229e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
	objects[13].collidable = true;
 80022a2:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <draw_map_1+0x328>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
	objects[13].redraw = false;
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <draw_map_1+0x328>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	uint16_t pipe_final[64*64];

	cleanMarioBackground(pipe, pipe_final, 64, 64, 64*64);
 80022b2:	f107 0108 	add.w	r1, r7, #8
 80022b6:	3908      	subs	r1, #8
 80022b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2340      	movs	r3, #64	@ 0x40
 80022c0:	2240      	movs	r2, #64	@ 0x40
 80022c2:	4808      	ldr	r0, [pc, #32]	@ (80022e4 <draw_map_1+0x338>)
 80022c4:	f7ff fe30 	bl	8001f28 <cleanMarioBackground>

	for (int i = 10; i < 13; i++)
 80022c8:	230a      	movs	r3, #10
 80022ca:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	e054      	b.n	800237c <draw_map_1+0x3d0>
 80022d2:	bf00      	nop
 80022d4:	20000294 	.word	0x20000294
 80022d8:	0800e114 	.word	0x0800e114
 80022dc:	0800d914 	.word	0x0800d914
 80022e0:	0800e914 	.word	0x0800e914
 80022e4:	08019514 	.word	0x08019514
		ILI9341_DrawImage(objects[i].x, objects[i].y, objects[i].width, objects[i].height, objects[i].frame);
 80022e8:	4939      	ldr	r1, [pc, #228]	@ (80023d0 <draw_map_1+0x424>)
 80022ea:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022fe:	b298      	uxth	r0, r3
 8002300:	4933      	ldr	r1, [pc, #204]	@ (80023d0 <draw_map_1+0x424>)
 8002302:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	3302      	adds	r3, #2
 8002314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002318:	b299      	uxth	r1, r3
 800231a:	4c2d      	ldr	r4, [pc, #180]	@ (80023d0 <draw_map_1+0x424>)
 800231c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4423      	add	r3, r4
 800232c:	3308      	adds	r3, #8
 800232e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002332:	b29c      	uxth	r4, r3
 8002334:	4d26      	ldr	r5, [pc, #152]	@ (80023d0 <draw_map_1+0x424>)
 8002336:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	442b      	add	r3, r5
 8002346:	330a      	adds	r3, #10
 8002348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234c:	b29d      	uxth	r5, r3
 800234e:	4e20      	ldr	r6, [pc, #128]	@ (80023d0 <draw_map_1+0x424>)
 8002350:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4433      	add	r3, r6
 8002360:	330c      	adds	r3, #12
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	462b      	mov	r3, r5
 8002368:	4622      	mov	r2, r4
 800236a:	f7fe ffe7 	bl	800133c <ILI9341_DrawImage>
	for (int i = 10; i < 13; i++)
 800236e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3301      	adds	r3, #1
 8002376:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b0c      	cmp	r3, #12
 8002384:	ddb0      	ble.n	80022e8 <draw_map_1+0x33c>

	ILI9341_DrawImage(objects[13].x, objects[13].y, objects[13].width, objects[13].height, pipe_final);
 8002386:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <draw_map_1+0x424>)
 8002388:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	@ 0x104
 800238c:	b298      	uxth	r0, r3
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <draw_map_1+0x424>)
 8002390:	f9b3 3106 	ldrsh.w	r3, [r3, #262]	@ 0x106
 8002394:	b299      	uxth	r1, r3
 8002396:	4b0e      	ldr	r3, [pc, #56]	@ (80023d0 <draw_map_1+0x424>)
 8002398:	f9b3 310c 	ldrsh.w	r3, [r3, #268]	@ 0x10c
 800239c:	b29a      	uxth	r2, r3
 800239e:	4b0c      	ldr	r3, [pc, #48]	@ (80023d0 <draw_map_1+0x424>)
 80023a0:	f9b3 310e 	ldrsh.w	r3, [r3, #270]	@ 0x10e
 80023a4:	b29c      	uxth	r4, r3
 80023a6:	f107 0308 	add.w	r3, r7, #8
 80023aa:	3b08      	subs	r3, #8
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	4623      	mov	r3, r4
 80023b0:	f7fe ffc4 	bl	800133c <ILI9341_DrawImage>
	num_objects = 15;
 80023b4:	4b07      	ldr	r3, [pc, #28]	@ (80023d4 <draw_map_1+0x428>)
 80023b6:	220f      	movs	r2, #15
 80023b8:	701a      	strb	r2, [r3, #0]
//		HAL_StatusTypeDef spi_status = HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &test_data, &received, 1, 1000);
//		snprintf(debug_msg, sizeof(debug_msg), "SPI Test: %d, RX: 0x%02X", spi_status, received);
//		ILI9341_WriteString(40, 80, debug_msg, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);

	// test
	HAL_Delay(2000); // Give time to read debug info
 80023ba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80023be:	f001 fb2f 	bl	8003a20 <HAL_Delay>

}
 80023c2:	bf00      	nop
 80023c4:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000294 	.word	0x20000294
 80023d4:	20002ca4 	.word	0x20002ca4

080023d8 <draw_bowser>:


void draw_bowser() {
 80023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023da:	b08b      	sub	sp, #44	@ 0x2c
 80023dc:	af06      	add	r7, sp, #24
	static uint32_t mario_last_hit = 0;
	static uint32_t flame_timer = 0;
	static struct Object fireballs[10];
	static fireball_final[48 * 16];
	static flames = 10;
	if (bowser_last_moved == 0) {
 80023de:	4b97      	ldr	r3, [pc, #604]	@ (800263c <draw_bowser+0x264>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d110      	bne.n	8002408 <draw_bowser+0x30>
		bowser_last_moved = HAL_GetTick();
 80023e6:	f001 fb0f 	bl	8003a08 <HAL_GetTick>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4a93      	ldr	r2, [pc, #588]	@ (800263c <draw_bowser+0x264>)
 80023ee:	6013      	str	r3, [r2, #0]
		bowser_last_updated = bowser_last_moved;
 80023f0:	4b92      	ldr	r3, [pc, #584]	@ (800263c <draw_bowser+0x264>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a92      	ldr	r2, [pc, #584]	@ (8002640 <draw_bowser+0x268>)
 80023f6:	6013      	str	r3, [r2, #0]
		flame_timer = bowser_last_moved;
 80023f8:	4b90      	ldr	r3, [pc, #576]	@ (800263c <draw_bowser+0x264>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a91      	ldr	r2, [pc, #580]	@ (8002644 <draw_bowser+0x26c>)
 80023fe:	6013      	str	r3, [r2, #0]
		mario_last_hit = flame_timer;
 8002400:	4b90      	ldr	r3, [pc, #576]	@ (8002644 <draw_bowser+0x26c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a90      	ldr	r2, [pc, #576]	@ (8002648 <draw_bowser+0x270>)
 8002406:	6013      	str	r3, [r2, #0]
	}
	static uint8_t frame_num = 0;
	static uint16_t* frames[4] = { bowser_1, bowser_2, bowser_3, bowser_4 };
	if (frame_num > 3)
 8002408:	4b90      	ldr	r3, [pc, #576]	@ (800264c <draw_bowser+0x274>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d902      	bls.n	8002416 <draw_bowser+0x3e>
		frame_num = 0;
 8002410:	4b8e      	ldr	r3, [pc, #568]	@ (800264c <draw_bowser+0x274>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
	uint16_t* bowser_frame =  frames[frame_num];
 8002416:	4b8d      	ldr	r3, [pc, #564]	@ (800264c <draw_bowser+0x274>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	4b8c      	ldr	r3, [pc, #560]	@ (8002650 <draw_bowser+0x278>)
 800241e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002422:	60bb      	str	r3, [r7, #8]

	uint32_t now = HAL_GetTick();
 8002424:	f001 faf0 	bl	8003a08 <HAL_GetTick>
 8002428:	6078      	str	r0, [r7, #4]

	if (now - bowser_last_updated > 100) {
 800242a:	4b85      	ldr	r3, [pc, #532]	@ (8002640 <draw_bowser+0x268>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	@ 0x64
 8002434:	f240 80d7 	bls.w	80025e6 <draw_bowser+0x20e>
		if (flames != 0) {
 8002438:	4b86      	ldr	r3, [pc, #536]	@ (8002654 <draw_bowser+0x27c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 808d 	beq.w	800255c <draw_bowser+0x184>
			if (now - flame_timer > 1700) {
 8002442:	4b80      	ldr	r3, [pc, #512]	@ (8002644 <draw_bowser+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 800244e:	4293      	cmp	r3, r2
 8002450:	f240 80c6 	bls.w	80025e0 <draw_bowser+0x208>
				fireballs[10 - flames].x = bowser.x;
 8002454:	4b7f      	ldr	r3, [pc, #508]	@ (8002654 <draw_bowser+0x27c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1c3 020a 	rsb	r2, r3, #10
 800245c:	4b7e      	ldr	r3, [pc, #504]	@ (8002658 <draw_bowser+0x280>)
 800245e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002462:	497e      	ldr	r1, [pc, #504]	@ (800265c <draw_bowser+0x284>)
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	4602      	mov	r2, r0
 8002470:	801a      	strh	r2, [r3, #0]
				fireballs[10 - flames].y = bowser.y + 35;
 8002472:	4b79      	ldr	r3, [pc, #484]	@ (8002658 <draw_bowser+0x280>)
 8002474:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002478:	b29b      	uxth	r3, r3
 800247a:	3323      	adds	r3, #35	@ 0x23
 800247c:	b299      	uxth	r1, r3
 800247e:	4b75      	ldr	r3, [pc, #468]	@ (8002654 <draw_bowser+0x27c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f1c3 020a 	rsb	r2, r3, #10
 8002486:	b208      	sxth	r0, r1
 8002488:	4974      	ldr	r1, [pc, #464]	@ (800265c <draw_bowser+0x284>)
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	3302      	adds	r3, #2
 8002496:	4602      	mov	r2, r0
 8002498:	801a      	strh	r2, [r3, #0]
				fireballs[10 - flames].width = 48;
 800249a:	4b6e      	ldr	r3, [pc, #440]	@ (8002654 <draw_bowser+0x27c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f1c3 020a 	rsb	r2, r3, #10
 80024a2:	496e      	ldr	r1, [pc, #440]	@ (800265c <draw_bowser+0x284>)
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3308      	adds	r3, #8
 80024b0:	2230      	movs	r2, #48	@ 0x30
 80024b2:	801a      	strh	r2, [r3, #0]
				fireballs[10 - flames].height = 16;
 80024b4:	4b67      	ldr	r3, [pc, #412]	@ (8002654 <draw_bowser+0x27c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f1c3 020a 	rsb	r2, r3, #10
 80024bc:	4967      	ldr	r1, [pc, #412]	@ (800265c <draw_bowser+0x284>)
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	330a      	adds	r3, #10
 80024ca:	2210      	movs	r2, #16
 80024cc:	801a      	strh	r2, [r3, #0]
				fireballs[10 - flames].prev_x = bowser.x;
 80024ce:	4b61      	ldr	r3, [pc, #388]	@ (8002654 <draw_bowser+0x27c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f1c3 020a 	rsb	r2, r3, #10
 80024d6:	4b60      	ldr	r3, [pc, #384]	@ (8002658 <draw_bowser+0x280>)
 80024d8:	f9b3 0000 	ldrsh.w	r0, [r3]
 80024dc:	495f      	ldr	r1, [pc, #380]	@ (800265c <draw_bowser+0x284>)
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	3304      	adds	r3, #4
 80024ea:	4602      	mov	r2, r0
 80024ec:	801a      	strh	r2, [r3, #0]
				fireballs[10 - flames].prev_y = bowser.y + 35;
 80024ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002658 <draw_bowser+0x280>)
 80024f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3323      	adds	r3, #35	@ 0x23
 80024f8:	b299      	uxth	r1, r3
 80024fa:	4b56      	ldr	r3, [pc, #344]	@ (8002654 <draw_bowser+0x27c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f1c3 020a 	rsb	r2, r3, #10
 8002502:	b208      	sxth	r0, r1
 8002504:	4955      	ldr	r1, [pc, #340]	@ (800265c <draw_bowser+0x284>)
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3306      	adds	r3, #6
 8002512:	4602      	mov	r2, r0
 8002514:	801a      	strh	r2, [r3, #0]
				fireballs[10 - flames].frame = fireball_1;
 8002516:	4b4f      	ldr	r3, [pc, #316]	@ (8002654 <draw_bowser+0x27c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f1c3 020a 	rsb	r2, r3, #10
 800251e:	494f      	ldr	r1, [pc, #316]	@ (800265c <draw_bowser+0x284>)
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	330c      	adds	r3, #12
 800252c:	4a4c      	ldr	r2, [pc, #304]	@ (8002660 <draw_bowser+0x288>)
 800252e:	601a      	str	r2, [r3, #0]
				fireballs[10 - flames].redraw = false;
 8002530:	4b48      	ldr	r3, [pc, #288]	@ (8002654 <draw_bowser+0x27c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1c3 020a 	rsb	r2, r3, #10
 8002538:	4948      	ldr	r1, [pc, #288]	@ (800265c <draw_bowser+0x284>)
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	3311      	adds	r3, #17
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
				flames--;
 800254a:	4b42      	ldr	r3, [pc, #264]	@ (8002654 <draw_bowser+0x27c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3b01      	subs	r3, #1
 8002550:	4a40      	ldr	r2, [pc, #256]	@ (8002654 <draw_bowser+0x27c>)
 8002552:	6013      	str	r3, [r2, #0]
				flame_timer = now;
 8002554:	4a3b      	ldr	r2, [pc, #236]	@ (8002644 <draw_bowser+0x26c>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e041      	b.n	80025e0 <draw_bowser+0x208>
			}

		}
		else if (prev_bowser.x >= bowser.x) {
 800255c:	4b41      	ldr	r3, [pc, #260]	@ (8002664 <draw_bowser+0x28c>)
 800255e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002562:	4b3d      	ldr	r3, [pc, #244]	@ (8002658 <draw_bowser+0x280>)
 8002564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002568:	429a      	cmp	r2, r3
 800256a:	db1b      	blt.n	80025a4 <draw_bowser+0x1cc>
			prev_bowser = bowser;
 800256c:	4a3d      	ldr	r2, [pc, #244]	@ (8002664 <draw_bowser+0x28c>)
 800256e:	4b3a      	ldr	r3, [pc, #232]	@ (8002658 <draw_bowser+0x280>)
 8002570:	4614      	mov	r4, r2
 8002572:	461d      	mov	r5, r3
 8002574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002578:	e895 0003 	ldmia.w	r5, {r0, r1}
 800257c:	e884 0003 	stmia.w	r4, {r0, r1}
			bowser.x -= 5;
 8002580:	4b35      	ldr	r3, [pc, #212]	@ (8002658 <draw_bowser+0x280>)
 8002582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b05      	subs	r3, #5
 800258a:	b29b      	uxth	r3, r3
 800258c:	b21a      	sxth	r2, r3
 800258e:	4b32      	ldr	r3, [pc, #200]	@ (8002658 <draw_bowser+0x280>)
 8002590:	801a      	strh	r2, [r3, #0]
			if (bowser.x <= 0) {
 8002592:	4b31      	ldr	r3, [pc, #196]	@ (8002658 <draw_bowser+0x280>)
 8002594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002598:	2b00      	cmp	r3, #0
 800259a:	dc21      	bgt.n	80025e0 <draw_bowser+0x208>
				bowser.x = 6;
 800259c:	4b2e      	ldr	r3, [pc, #184]	@ (8002658 <draw_bowser+0x280>)
 800259e:	2206      	movs	r2, #6
 80025a0:	801a      	strh	r2, [r3, #0]
 80025a2:	e01d      	b.n	80025e0 <draw_bowser+0x208>
			}
		} else {
			prev_bowser = bowser;
 80025a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002664 <draw_bowser+0x28c>)
 80025a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002658 <draw_bowser+0x280>)
 80025a8:	4614      	mov	r4, r2
 80025aa:	461d      	mov	r5, r3
 80025ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025b4:	e884 0003 	stmia.w	r4, {r0, r1}
			bowser.x += 5;
 80025b8:	4b27      	ldr	r3, [pc, #156]	@ (8002658 <draw_bowser+0x280>)
 80025ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3305      	adds	r3, #5
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	b21a      	sxth	r2, r3
 80025c6:	4b24      	ldr	r3, [pc, #144]	@ (8002658 <draw_bowser+0x280>)
 80025c8:	801a      	strh	r2, [r3, #0]
			if (bowser.x >= 256) {
 80025ca:	4b23      	ldr	r3, [pc, #140]	@ (8002658 <draw_bowser+0x280>)
 80025cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d0:	2bff      	cmp	r3, #255	@ 0xff
 80025d2:	dd05      	ble.n	80025e0 <draw_bowser+0x208>
				bowser.x = 250;
 80025d4:	4b20      	ldr	r3, [pc, #128]	@ (8002658 <draw_bowser+0x280>)
 80025d6:	22fa      	movs	r2, #250	@ 0xfa
 80025d8:	801a      	strh	r2, [r3, #0]
				flames = 10;
 80025da:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <draw_bowser+0x27c>)
 80025dc:	220a      	movs	r2, #10
 80025de:	601a      	str	r2, [r3, #0]
			}
		}
		bowser_last_updated = now;
 80025e0:	4a17      	ldr	r2, [pc, #92]	@ (8002640 <draw_bowser+0x268>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6013      	str	r3, [r2, #0]
	}
	if (now - bowser_last_moved > 300) {
 80025e6:	4b15      	ldr	r3, [pc, #84]	@ (800263c <draw_bowser+0x264>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80025f2:	d908      	bls.n	8002606 <draw_bowser+0x22e>
		frame_num++;
 80025f4:	4b15      	ldr	r3, [pc, #84]	@ (800264c <draw_bowser+0x274>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	3301      	adds	r3, #1
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	4b13      	ldr	r3, [pc, #76]	@ (800264c <draw_bowser+0x274>)
 80025fe:	701a      	strb	r2, [r3, #0]
		bowser_last_moved = now;
 8002600:	4a0e      	ldr	r2, [pc, #56]	@ (800263c <draw_bowser+0x264>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6013      	str	r3, [r2, #0]
	}
	uint16_t* frame = fireball_2;
 8002606:	4b18      	ldr	r3, [pc, #96]	@ (8002668 <draw_bowser+0x290>)
 8002608:	603b      	str	r3, [r7, #0]
	if (10 - flames) {
 800260a:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <draw_bowser+0x27c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b0a      	cmp	r3, #10
 8002610:	d010      	beq.n	8002634 <draw_bowser+0x25c>
		frame = (frame == fireball_1) ? fireball_2 : fireball_1;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	4a12      	ldr	r2, [pc, #72]	@ (8002660 <draw_bowser+0x288>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <draw_bowser+0x246>
 800261a:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <draw_bowser+0x290>)
 800261c:	e000      	b.n	8002620 <draw_bowser+0x248>
 800261e:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <draw_bowser+0x288>)
 8002620:	603b      	str	r3, [r7, #0]
		cleanMarioBackground(frame, fireball_final, 48, 16, 48 * 16);
 8002622:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2310      	movs	r3, #16
 800262a:	2230      	movs	r2, #48	@ 0x30
 800262c:	490f      	ldr	r1, [pc, #60]	@ (800266c <draw_bowser+0x294>)
 800262e:	6838      	ldr	r0, [r7, #0]
 8002630:	f7ff fc7a 	bl	8001f28 <cleanMarioBackground>
	}
	for (uint8_t i = 0; i < 10 - flames; i++) {
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e0f9      	b.n	800282e <draw_bowser+0x456>
 800263a:	bf00      	nop
 800263c:	20005354 	.word	0x20005354
 8002640:	20005358 	.word	0x20005358
 8002644:	2000535c 	.word	0x2000535c
 8002648:	20005360 	.word	0x20005360
 800264c:	20005364 	.word	0x20005364
 8002650:	20000068 	.word	0x20000068
 8002654:	20000078 	.word	0x20000078
 8002658:	20000044 	.word	0x20000044
 800265c:	20005368 	.word	0x20005368
 8002660:	08018914 	.word	0x08018914
 8002664:	2000002c 	.word	0x2000002c
 8002668:	08018f14 	.word	0x08018f14
 800266c:	20005430 	.word	0x20005430
		// update fireball
		// update its frame
		if (collision_detection(mario, fireballs[i])) {
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	4eac      	ldr	r6, [pc, #688]	@ (8002924 <draw_bowser+0x54c>)
 8002674:	49ac      	ldr	r1, [pc, #688]	@ (8002928 <draw_bowser+0x550>)
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	466c      	mov	r4, sp
 8002682:	461d      	mov	r5, r3
 8002684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002688:	682b      	ldr	r3, [r5, #0]
 800268a:	6023      	str	r3, [r4, #0]
 800268c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002690:	f7ff f80e 	bl	80016b0 <collision_detection>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00f      	beq.n	80026ba <draw_bowser+0x2e2>
			if (now - mario_last_hit > 1000) {
 800269a:	4ba4      	ldr	r3, [pc, #656]	@ (800292c <draw_bowser+0x554>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026a6:	d908      	bls.n	80026ba <draw_bowser+0x2e2>
				mario_lives--;
 80026a8:	4ba1      	ldr	r3, [pc, #644]	@ (8002930 <draw_bowser+0x558>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	4b9f      	ldr	r3, [pc, #636]	@ (8002930 <draw_bowser+0x558>)
 80026b2:	701a      	strb	r2, [r3, #0]
				mario_last_hit = now;
 80026b4:	4a9d      	ldr	r2, [pc, #628]	@ (800292c <draw_bowser+0x554>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6013      	str	r3, [r2, #0]
			}
		}
		if (fireballs[i].x > 0 || fireballs[i].prev_x >= 0) {
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	499a      	ldr	r1, [pc, #616]	@ (8002928 <draw_bowser+0x550>)
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	dc0c      	bgt.n	80026ea <draw_bowser+0x312>
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	4995      	ldr	r1, [pc, #596]	@ (8002928 <draw_bowser+0x550>)
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	3304      	adds	r3, #4
 80026e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f2c0 809f 	blt.w	8002828 <draw_bowser+0x450>
			fireballs[i].prev_x = fireballs[i].x;
 80026ea:	7bf9      	ldrb	r1, [r7, #15]
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	488e      	ldr	r0, [pc, #568]	@ (8002928 <draw_bowser+0x550>)
 80026f0:	460b      	mov	r3, r1
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4403      	add	r3, r0
 80026fa:	f9b3 0000 	ldrsh.w	r0, [r3]
 80026fe:	498a      	ldr	r1, [pc, #552]	@ (8002928 <draw_bowser+0x550>)
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	3304      	adds	r3, #4
 800270c:	4602      	mov	r2, r0
 800270e:	801a      	strh	r2, [r3, #0]
			fireballs[i].prev_y = fireballs[i].y;
 8002710:	7bf9      	ldrb	r1, [r7, #15]
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	4884      	ldr	r0, [pc, #528]	@ (8002928 <draw_bowser+0x550>)
 8002716:	460b      	mov	r3, r1
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4403      	add	r3, r0
 8002720:	3302      	adds	r3, #2
 8002722:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002726:	4980      	ldr	r1, [pc, #512]	@ (8002928 <draw_bowser+0x550>)
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	3306      	adds	r3, #6
 8002734:	4602      	mov	r2, r0
 8002736:	801a      	strh	r2, [r3, #0]
			fireballs[i].x -= 10;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	497b      	ldr	r1, [pc, #492]	@ (8002928 <draw_bowser+0x550>)
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b0a      	subs	r3, #10
 800274e:	b29b      	uxth	r3, r3
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	b218      	sxth	r0, r3
 8002754:	4974      	ldr	r1, [pc, #464]	@ (8002928 <draw_bowser+0x550>)
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	4602      	mov	r2, r0
 8002762:	801a      	strh	r2, [r3, #0]

			ILI9341_FillRectangle(fireballs[i].prev_x, fireballs[i].prev_y, fireballs[i].width, fireballs[i].height, ILI9341_CYAN);
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	4970      	ldr	r1, [pc, #448]	@ (8002928 <draw_bowser+0x550>)
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3304      	adds	r3, #4
 8002774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002778:	b298      	uxth	r0, r3
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	496a      	ldr	r1, [pc, #424]	@ (8002928 <draw_bowser+0x550>)
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	3306      	adds	r3, #6
 800278a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800278e:	b299      	uxth	r1, r3
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	4c65      	ldr	r4, [pc, #404]	@ (8002928 <draw_bowser+0x550>)
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4423      	add	r3, r4
 800279e:	3308      	adds	r3, #8
 80027a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a4:	b29c      	uxth	r4, r3
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	4d5f      	ldr	r5, [pc, #380]	@ (8002928 <draw_bowser+0x550>)
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	442b      	add	r3, r5
 80027b4:	330a      	adds	r3, #10
 80027b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80027c0:	9200      	str	r2, [sp, #0]
 80027c2:	4622      	mov	r2, r4
 80027c4:	f7fe fd3a 	bl	800123c <ILI9341_FillRectangle>
			ILI9341_DrawImage(fireballs[i].x, fireballs[i].y, fireballs[i].width, fireballs[i].height, fireball_final);
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	4957      	ldr	r1, [pc, #348]	@ (8002928 <draw_bowser+0x550>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027da:	b298      	uxth	r0, r3
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	4952      	ldr	r1, [pc, #328]	@ (8002928 <draw_bowser+0x550>)
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3302      	adds	r3, #2
 80027ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f0:	b299      	uxth	r1, r3
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	4c4c      	ldr	r4, [pc, #304]	@ (8002928 <draw_bowser+0x550>)
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4423      	add	r3, r4
 8002800:	3308      	adds	r3, #8
 8002802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002806:	b29c      	uxth	r4, r3
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	4d47      	ldr	r5, [pc, #284]	@ (8002928 <draw_bowser+0x550>)
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	442b      	add	r3, r5
 8002816:	330a      	adds	r3, #10
 8002818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800281c:	b29b      	uxth	r3, r3
 800281e:	4a45      	ldr	r2, [pc, #276]	@ (8002934 <draw_bowser+0x55c>)
 8002820:	9200      	str	r2, [sp, #0]
 8002822:	4622      	mov	r2, r4
 8002824:	f7fe fd8a 	bl	800133c <ILI9341_DrawImage>
	for (uint8_t i = 0; i < 10 - flames; i++) {
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	3301      	adds	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	4b41      	ldr	r3, [pc, #260]	@ (8002938 <draw_bowser+0x560>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f1c3 030a 	rsb	r3, r3, #10
 8002838:	429a      	cmp	r2, r3
 800283a:	f6ff af19 	blt.w	8002670 <draw_bowser+0x298>
		}
	}


	cleanMarioBackground(bowser_frame, bowser_final, 64, 64, 64*64);
 800283e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2340      	movs	r3, #64	@ 0x40
 8002846:	2240      	movs	r2, #64	@ 0x40
 8002848:	493c      	ldr	r1, [pc, #240]	@ (800293c <draw_bowser+0x564>)
 800284a:	68b8      	ldr	r0, [r7, #8]
 800284c:	f7ff fb6c 	bl	8001f28 <cleanMarioBackground>
	if (bowser.x > prev_bowser.x) {
 8002850:	4b3b      	ldr	r3, [pc, #236]	@ (8002940 <draw_bowser+0x568>)
 8002852:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002856:	4b3b      	ldr	r3, [pc, #236]	@ (8002944 <draw_bowser+0x56c>)
 8002858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800285c:	429a      	cmp	r2, r3
 800285e:	dd73      	ble.n	8002948 <draw_bowser+0x570>
		ILI9341_FillRectangle(prev_bowser.x, prev_bowser.y, bowser.x - prev_bowser.x, prev_bowser.height, ILI9341_CYAN);
 8002860:	4b38      	ldr	r3, [pc, #224]	@ (8002944 <draw_bowser+0x56c>)
 8002862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002866:	b298      	uxth	r0, r3
 8002868:	4b36      	ldr	r3, [pc, #216]	@ (8002944 <draw_bowser+0x56c>)
 800286a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800286e:	b299      	uxth	r1, r3
 8002870:	4b33      	ldr	r3, [pc, #204]	@ (8002940 <draw_bowser+0x568>)
 8002872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002876:	b29a      	uxth	r2, r3
 8002878:	4b32      	ldr	r3, [pc, #200]	@ (8002944 <draw_bowser+0x56c>)
 800287a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287e:	b29b      	uxth	r3, r3
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b2f      	ldr	r3, [pc, #188]	@ (8002944 <draw_bowser+0x56c>)
 8002886:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800288a:	b29b      	uxth	r3, r3
 800288c:	f240 74ff 	movw	r4, #2047	@ 0x7ff
 8002890:	9400      	str	r4, [sp, #0]
 8002892:	f7fe fcd3 	bl	800123c <ILI9341_FillRectangle>
		turn_enemy(bowser.width, bowser.height, bowser_final, bowser);
 8002896:	4b2a      	ldr	r3, [pc, #168]	@ (8002940 <draw_bowser+0x568>)
 8002898:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800289c:	fa5f fc83 	uxtb.w	ip, r3
 80028a0:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <draw_bowser+0x568>)
 80028a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80028a6:	fa5f fe83 	uxtb.w	lr, r3
 80028aa:	4e25      	ldr	r6, [pc, #148]	@ (8002940 <draw_bowser+0x568>)
 80028ac:	466d      	mov	r5, sp
 80028ae:	1d34      	adds	r4, r6, #4
 80028b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	602b      	str	r3, [r5, #0]
 80028b8:	6833      	ldr	r3, [r6, #0]
 80028ba:	4a20      	ldr	r2, [pc, #128]	@ (800293c <draw_bowser+0x564>)
 80028bc:	4671      	mov	r1, lr
 80028be:	4660      	mov	r0, ip
 80028c0:	f7fe fea6 	bl	8001610 <turn_enemy>
		ILI9341_FillRectangle(bowser.x + bowser.width, prev_bowser.y, prev_bowser.x + prev_bowser.width - (bowser.x + bowser.width), prev_bowser.height, ILI9341_RED);
 80028c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <draw_bowser+0x568>)
 80028c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <draw_bowser+0x568>)
 80028ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	b298      	uxth	r0, r3
 80028d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002944 <draw_bowser+0x56c>)
 80028da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028de:	b29c      	uxth	r4, r3
 80028e0:	4b18      	ldr	r3, [pc, #96]	@ (8002944 <draw_bowser+0x56c>)
 80028e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	4b16      	ldr	r3, [pc, #88]	@ (8002944 <draw_bowser+0x56c>)
 80028ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <draw_bowser+0x568>)
 80028f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028fa:	b299      	uxth	r1, r3
 80028fc:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <draw_bowser+0x568>)
 80028fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002902:	b29b      	uxth	r3, r3
 8002904:	440b      	add	r3, r1
 8002906:	b29b      	uxth	r3, r3
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	b29a      	uxth	r2, r3
 800290c:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <draw_bowser+0x56c>)
 800290e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002912:	b29b      	uxth	r3, r3
 8002914:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8002918:	9100      	str	r1, [sp, #0]
 800291a:	4621      	mov	r1, r4
 800291c:	f7fe fc8e 	bl	800123c <ILI9341_FillRectangle>
 8002920:	e048      	b.n	80029b4 <draw_bowser+0x5dc>
 8002922:	bf00      	nop
 8002924:	2000001c 	.word	0x2000001c
 8002928:	20005368 	.word	0x20005368
 800292c:	20005360 	.word	0x20005360
 8002930:	20000008 	.word	0x20000008
 8002934:	20005430 	.word	0x20005430
 8002938:	20000078 	.word	0x20000078
 800293c:	20000ca4 	.word	0x20000ca4
 8002940:	20000044 	.word	0x20000044
 8002944:	2000002c 	.word	0x2000002c
	} else if (prev_bowser.x > bowser.x) {
 8002948:	4b26      	ldr	r3, [pc, #152]	@ (80029e4 <draw_bowser+0x60c>)
 800294a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800294e:	4b26      	ldr	r3, [pc, #152]	@ (80029e8 <draw_bowser+0x610>)
 8002950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002954:	429a      	cmp	r2, r3
 8002956:	dd2d      	ble.n	80029b4 <draw_bowser+0x5dc>
		ILI9341_FillRectangle(bowser.x + bowser.width, prev_bowser.y, prev_bowser.x + prev_bowser.width - (bowser.x + bowser.width), prev_bowser.height, ILI9341_CYAN);
 8002958:	4b23      	ldr	r3, [pc, #140]	@ (80029e8 <draw_bowser+0x610>)
 800295a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800295e:	b29a      	uxth	r2, r3
 8002960:	4b21      	ldr	r3, [pc, #132]	@ (80029e8 <draw_bowser+0x610>)
 8002962:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002966:	b29b      	uxth	r3, r3
 8002968:	4413      	add	r3, r2
 800296a:	b298      	uxth	r0, r3
 800296c:	4b1d      	ldr	r3, [pc, #116]	@ (80029e4 <draw_bowser+0x60c>)
 800296e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002972:	b29c      	uxth	r4, r3
 8002974:	4b1b      	ldr	r3, [pc, #108]	@ (80029e4 <draw_bowser+0x60c>)
 8002976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297a:	b29a      	uxth	r2, r3
 800297c:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <draw_bowser+0x60c>)
 800297e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002982:	b29b      	uxth	r3, r3
 8002984:	4413      	add	r3, r2
 8002986:	b29a      	uxth	r2, r3
 8002988:	4b17      	ldr	r3, [pc, #92]	@ (80029e8 <draw_bowser+0x610>)
 800298a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800298e:	b299      	uxth	r1, r3
 8002990:	4b15      	ldr	r3, [pc, #84]	@ (80029e8 <draw_bowser+0x610>)
 8002992:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002996:	b29b      	uxth	r3, r3
 8002998:	440b      	add	r3, r1
 800299a:	b29b      	uxth	r3, r3
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	b29a      	uxth	r2, r3
 80029a0:	4b10      	ldr	r3, [pc, #64]	@ (80029e4 <draw_bowser+0x60c>)
 80029a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 80029ac:	9100      	str	r1, [sp, #0]
 80029ae:	4621      	mov	r1, r4
 80029b0:	f7fe fc44 	bl	800123c <ILI9341_FillRectangle>
	}


	ILI9341_DrawImage(bowser.x, bowser.y, bowser.width, bowser.height, bowser_final);
 80029b4:	4b0c      	ldr	r3, [pc, #48]	@ (80029e8 <draw_bowser+0x610>)
 80029b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ba:	b298      	uxth	r0, r3
 80029bc:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <draw_bowser+0x610>)
 80029be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029c2:	b299      	uxth	r1, r3
 80029c4:	4b08      	ldr	r3, [pc, #32]	@ (80029e8 <draw_bowser+0x610>)
 80029c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <draw_bowser+0x610>)
 80029ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	4c05      	ldr	r4, [pc, #20]	@ (80029ec <draw_bowser+0x614>)
 80029d6:	9400      	str	r4, [sp, #0]
 80029d8:	f7fe fcb0 	bl	800133c <ILI9341_DrawImage>
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e4:	2000002c 	.word	0x2000002c
 80029e8:	20000044 	.word	0x20000044
 80029ec:	20000ca4 	.word	0x20000ca4

080029f0 <drawScene>:

void drawScene(uint8_t map_num) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
	if (map_num == 1) {
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <drawScene+0x14>

		draw_map_1();
 8002a00:	f7ff fad4 	bl	8001fac <draw_map_1>
	}
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	0000      	movs	r0, r0
	...

08002a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b0a3      	sub	sp, #140	@ 0x8c
 8002a14:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a16:	f000 ff91 	bl	800393c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a1a:	f000 fb29 	bl	8003070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a1e:	f000 fcd3 	bl	80033c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002a22:	f000 fca7 	bl	8003374 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002a26:	f000 fb8b 	bl	8003140 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002a2a:	f000 fbbf 	bl	80031ac <MX_SPI2_Init>
  MX_FATFS_Init();
 8002a2e:	f003 fcf1 	bl	8006414 <MX_FATFS_Init>
  MX_TIM3_Init();
 8002a32:	f000 fbf1 	bl	8003218 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002a36:	f000 fc45 	bl	80032c4 <MX_TIM4_Init>
//  HAL_GPIO_WritePin(SD_Power_GPIO_Port, SD_Power_Pin, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 8002a3a:	f7fe fd79 	bl	8001530 <init>

//  ILI9341_FillScreen(ILI9341_CYAN);


  uint32_t last_tick = HAL_GetTick();
 8002a3e:	f000 ffe3 	bl	8003a08 <HAL_GetTick>
 8002a42:	6638      	str	r0, [r7, #96]	@ 0x60
  uint32_t move_tick = HAL_GetTick();
 8002a44:	f000 ffe0 	bl	8003a08 <HAL_GetTick>
 8002a48:	65f8      	str	r0, [r7, #92]	@ 0x5c
  uint32_t walk_tick = HAL_GetTick();
 8002a4a:	f000 ffdd 	bl	8003a08 <HAL_GetTick>
 8002a4e:	6778      	str	r0, [r7, #116]	@ 0x74
  uint32_t read_pin_tick = HAL_GetTick();
 8002a50:	f000 ffda 	bl	8003a08 <HAL_GetTick>
 8002a54:	6738      	str	r0, [r7, #112]	@ 0x70
  uint8_t curr_walk_frame = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t* walk_frames[] = { mario_walk_1, mario_walk_2, mario_walk_3 };
 8002a5c:	4aa2      	ldr	r2, [pc, #648]	@ (8002ce8 <main+0x2d8>)
 8002a5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a62:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t walk_frames_size[] = { 32, 32, 24, 32, 28, 32 };
 8002a68:	4aa0      	ldr	r2, [pc, #640]	@ (8002cec <main+0x2dc>)
 8002a6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a72:	6018      	str	r0, [r3, #0]
 8002a74:	3304      	adds	r3, #4
 8002a76:	8019      	strh	r1, [r3, #0]
  uint8_t text_height = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  bool idle = false;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

  uint32_t now = HAL_GetTick();
 8002a84:	f000 ffc0 	bl	8003a08 <HAL_GetTick>
 8002a88:	6578      	str	r0, [r7, #84]	@ 0x54
  uint32_t frame_count = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	66bb      	str	r3, [r7, #104]	@ 0x68

//  hard_reset_system();
  HAL_Delay(50);
 8002a8e:	2032      	movs	r0, #50	@ 0x32
 8002a90:	f000 ffc6 	bl	8003a20 <HAL_Delay>
  ILI9341_WriteString(40, 20, "Starting Mount!", Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002a94:	4b96      	ldr	r3, [pc, #600]	@ (8002cf0 <main+0x2e0>)
 8002a96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a9a:	9202      	str	r2, [sp, #8]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	9201      	str	r2, [sp, #4]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	9200      	str	r2, [sp, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a93      	ldr	r2, [pc, #588]	@ (8002cf4 <main+0x2e4>)
 8002aa8:	2114      	movs	r1, #20
 8002aaa:	2028      	movs	r0, #40	@ 0x28
 8002aac:	f7fe fb7a 	bl	80011a4 <ILI9341_WriteString>
  HAL_Delay(50);
 8002ab0:	2032      	movs	r0, #50	@ 0x32
 8002ab2:	f000 ffb5 	bl	8003a20 <HAL_Delay>


//	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, SET);
	// Now try mount
	  //Open the file system
	  fres = f_mount(&FatFs, "", 1); //1=mount now
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	498f      	ldr	r1, [pc, #572]	@ (8002cf8 <main+0x2e8>)
 8002aba:	4890      	ldr	r0, [pc, #576]	@ (8002cfc <main+0x2ec>)
 8002abc:	f006 fa4c 	bl	8008f58 <f_mount>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b8e      	ldr	r3, [pc, #568]	@ (8002d00 <main+0x2f0>)
 8002ac6:	701a      	strb	r2, [r3, #0]
	  while (fres != FR_OK) {
 8002ac8:	e041      	b.n	8002b4e <main+0x13e>
		char msg[32];
		snprintf(msg, sizeof(msg), "mount err %u", (unsigned)fres);
 8002aca:	4b8d      	ldr	r3, [pc, #564]	@ (8002d00 <main+0x2f0>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	4638      	mov	r0, r7
 8002ad0:	4a8c      	ldr	r2, [pc, #560]	@ (8002d04 <main+0x2f4>)
 8002ad2:	2120      	movs	r1, #32
 8002ad4:	f007 f960 	bl	8009d98 <sniprintf>
		HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, RESET);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ade:	488a      	ldr	r0, [pc, #552]	@ (8002d08 <main+0x2f8>)
 8002ae0:	f001 fa70 	bl	8003fc4 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8002ae4:	2064      	movs	r0, #100	@ 0x64
 8002ae6:	f000 ff9b 	bl	8003a20 <HAL_Delay>
		HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, SET);
 8002aea:	2201      	movs	r2, #1
 8002aec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002af0:	4885      	ldr	r0, [pc, #532]	@ (8002d08 <main+0x2f8>)
 8002af2:	f001 fa67 	bl	8003fc4 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8002af6:	200a      	movs	r0, #10
 8002af8:	f000 ff92 	bl	8003a20 <HAL_Delay>
		ILI9341_WriteString(40, 60, msg, Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002afc:	4b7c      	ldr	r3, [pc, #496]	@ (8002cf0 <main+0x2e0>)
 8002afe:	4639      	mov	r1, r7
 8002b00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b04:	9202      	str	r2, [sp, #8]
 8002b06:	2200      	movs	r2, #0
 8002b08:	9201      	str	r2, [sp, #4]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	9200      	str	r2, [sp, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	460a      	mov	r2, r1
 8002b12:	213c      	movs	r1, #60	@ 0x3c
 8002b14:	2028      	movs	r0, #40	@ 0x28
 8002b16:	f7fe fb45 	bl	80011a4 <ILI9341_WriteString>
		HAL_Delay(100);
 8002b1a:	2064      	movs	r0, #100	@ 0x64
 8002b1c:	f000 ff80 	bl	8003a20 <HAL_Delay>
		fres = f_mount(&FatFs, "", 1); //1=mount now
 8002b20:	2201      	movs	r2, #1
 8002b22:	4975      	ldr	r1, [pc, #468]	@ (8002cf8 <main+0x2e8>)
 8002b24:	4875      	ldr	r0, [pc, #468]	@ (8002cfc <main+0x2ec>)
 8002b26:	f006 fa17 	bl	8008f58 <f_mount>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b74      	ldr	r3, [pc, #464]	@ (8002d00 <main+0x2f0>)
 8002b30:	701a      	strb	r2, [r3, #0]
		ILI9341_WriteString(40, 60, "Retrying: please wait!", Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002b32:	4b6f      	ldr	r3, [pc, #444]	@ (8002cf0 <main+0x2e0>)
 8002b34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b38:	9202      	str	r2, [sp, #8]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	9201      	str	r2, [sp, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	9200      	str	r2, [sp, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a71      	ldr	r2, [pc, #452]	@ (8002d0c <main+0x2fc>)
 8002b46:	213c      	movs	r1, #60	@ 0x3c
 8002b48:	2028      	movs	r0, #40	@ 0x28
 8002b4a:	f7fe fb2b 	bl	80011a4 <ILI9341_WriteString>
	  while (fres != FR_OK) {
 8002b4e:	4b6c      	ldr	r3, [pc, #432]	@ (8002d00 <main+0x2f0>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1b9      	bne.n	8002aca <main+0xba>
	  }

	  HAL_Delay(10);
 8002b56:	200a      	movs	r0, #10
 8002b58:	f000 ff62 	bl	8003a20 <HAL_Delay>
	  ILI9341_WriteString(0, 280, "SD Card Mounted", Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002b5c:	4b64      	ldr	r3, [pc, #400]	@ (8002cf0 <main+0x2e0>)
 8002b5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b62:	9202      	str	r2, [sp, #8]
 8002b64:	2200      	movs	r2, #0
 8002b66:	9201      	str	r2, [sp, #4]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	9200      	str	r2, [sp, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a68      	ldr	r2, [pc, #416]	@ (8002d10 <main+0x300>)
 8002b70:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7fe fb15 	bl	80011a4 <ILI9341_WriteString>
	  HAL_Delay(5000);
 8002b7a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002b7e:	f000 ff4f 	bl	8003a20 <HAL_Delay>
	  DWORD free_clusters, free_sectors, total_sectors;

	  FATFS* getFreeFs;

	  fres = f_getfree("", &free_clusters, &getFreeFs);
 8002b82:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002b86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	485a      	ldr	r0, [pc, #360]	@ (8002cf8 <main+0x2e8>)
 8002b8e:	f006 ff2b 	bl	80099e8 <f_getfree>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b5a      	ldr	r3, [pc, #360]	@ (8002d00 <main+0x2f0>)
 8002b98:	701a      	strb	r2, [r3, #0]
	  if (fres != FR_OK) {
 8002b9a:	4b59      	ldr	r3, [pc, #356]	@ (8002d00 <main+0x2f0>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00f      	beq.n	8002bc2 <main+0x1b2>
		  ILI9341_WriteString(40, 40, "step 2", Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002ba2:	4b53      	ldr	r3, [pc, #332]	@ (8002cf0 <main+0x2e0>)
 8002ba4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ba8:	9202      	str	r2, [sp, #8]
 8002baa:	2200      	movs	r2, #0
 8002bac:	9201      	str	r2, [sp, #4]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	9200      	str	r2, [sp, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a57      	ldr	r2, [pc, #348]	@ (8002d14 <main+0x304>)
 8002bb6:	2128      	movs	r1, #40	@ 0x28
 8002bb8:	2028      	movs	r0, #40	@ 0x28
 8002bba:	f7fe faf3 	bl	80011a4 <ILI9341_WriteString>
//			myprintf("f_getfree error (%i)\r\n", fres);
		while(1);
 8002bbe:	bf00      	nop
 8002bc0:	e7fd      	b.n	8002bbe <main+0x1ae>
	  }

	  fres = f_open(&fil, "mario.wav", FA_READ);
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4954      	ldr	r1, [pc, #336]	@ (8002d18 <main+0x308>)
 8002bc6:	4855      	ldr	r0, [pc, #340]	@ (8002d1c <main+0x30c>)
 8002bc8:	f006 fa0c 	bl	8008fe4 <f_open>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4b4b      	ldr	r3, [pc, #300]	@ (8002d00 <main+0x2f0>)
 8002bd2:	701a      	strb	r2, [r3, #0]
	  if (fres != FR_OK) {
 8002bd4:	4b4a      	ldr	r3, [pc, #296]	@ (8002d00 <main+0x2f0>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00d      	beq.n	8002bf8 <main+0x1e8>
		  ILI9341_WriteString(40, 40, "step 3", Font_11x18, ILI9341_BLACK, ILI9341_WHITE);
 8002bdc:	4b44      	ldr	r3, [pc, #272]	@ (8002cf0 <main+0x2e0>)
 8002bde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002be2:	9202      	str	r2, [sp, #8]
 8002be4:	2200      	movs	r2, #0
 8002be6:	9201      	str	r2, [sp, #4]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	9200      	str	r2, [sp, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a4c      	ldr	r2, [pc, #304]	@ (8002d20 <main+0x310>)
 8002bf0:	2128      	movs	r1, #40	@ 0x28
 8002bf2:	2028      	movs	r0, #40	@ 0x28
 8002bf4:	f7fe fad6 	bl	80011a4 <ILI9341_WriteString>
	  }
//			myprintf("f_open error (%i)\r\n");
	  fres = f_open(&fil_yahoo, "yahoo.wav", FA_READ);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	494a      	ldr	r1, [pc, #296]	@ (8002d24 <main+0x314>)
 8002bfc:	484a      	ldr	r0, [pc, #296]	@ (8002d28 <main+0x318>)
 8002bfe:	f006 f9f1 	bl	8008fe4 <f_open>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b3e      	ldr	r3, [pc, #248]	@ (8002d00 <main+0x2f0>)
 8002c08:	701a      	strb	r2, [r3, #0]

	  //Read first 44 bytes of the wav file
//	  BYTE readBuff[44];
//      FRESULT res = f_read(&fil, readBuff, 44, &numRead);
	  f_lseek(&fil, 0x2C);
 8002c0a:	212c      	movs	r1, #44	@ 0x2c
 8002c0c:	4843      	ldr	r0, [pc, #268]	@ (8002d1c <main+0x30c>)
 8002c0e:	f006 fce2 	bl	80095d6 <f_lseek>
	  f_lseek(&fil_yahoo, 0x55);
 8002c12:	2155      	movs	r1, #85	@ 0x55
 8002c14:	4844      	ldr	r0, [pc, #272]	@ (8002d28 <main+0x318>)
 8002c16:	f006 fcde 	bl	80095d6 <f_lseek>
      HAL_Delay(10);
 8002c1a:	200a      	movs	r0, #10
 8002c1c:	f000 ff00 	bl	8003a20 <HAL_Delay>

	  int numRead = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	623b      	str	r3, [r7, #32]
      FRESULT res = f_read(&fil, audio_buff, BUFF_SIZE, &numRead);
 8002c24:	f107 0320 	add.w	r3, r7, #32
 8002c28:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c2c:	493f      	ldr	r1, [pc, #252]	@ (8002d2c <main+0x31c>)
 8002c2e:	483b      	ldr	r0, [pc, #236]	@ (8002d1c <main+0x30c>)
 8002c30:	f006 fb92 	bl	8009358 <f_read>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      res = f_read(&fil_yahoo, yahoo_buff, BUFF_SIZE, &numRead);
 8002c3a:	f107 0320 	add.w	r3, r7, #32
 8002c3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c42:	493b      	ldr	r1, [pc, #236]	@ (8002d30 <main+0x320>)
 8002c44:	4838      	ldr	r0, [pc, #224]	@ (8002d28 <main+0x318>)
 8002c46:	f006 fb87 	bl	8009358 <f_read>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	  HAL_Delay(300);
 8002c50:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002c54:	f000 fee4 	bl	8003a20 <HAL_Delay>
	  drawScene(1);
 8002c58:	2001      	movs	r0, #1
 8002c5a:	f7ff fec9 	bl	80029f0 <drawScene>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);     // PWM out
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4834      	ldr	r0, [pc, #208]	@ (8002d34 <main+0x324>)
 8002c62:	f002 fb73 	bl	800534c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8002c66:	4834      	ldr	r0, [pc, #208]	@ (8002d38 <main+0x328>)
 8002c68:	f002 fa70 	bl	800514c <HAL_TIM_Base_Start_IT>
  uint16_t* curr_goomba = goomba_1;
 8002c6c:	4b33      	ldr	r3, [pc, #204]	@ (8002d3c <main+0x32c>)
 8002c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (mario.x < 0) mario.x = 0;
 8002c70:	4b33      	ldr	r3, [pc, #204]	@ (8002d40 <main+0x330>)
 8002c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	da02      	bge.n	8002c80 <main+0x270>
 8002c7a:	4b31      	ldr	r3, [pc, #196]	@ (8002d40 <main+0x330>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	801a      	strh	r2, [r3, #0]
    if (mario.x > 320 - mario.width) mario.x = 320 - mario.width;
 8002c80:	4b2f      	ldr	r3, [pc, #188]	@ (8002d40 <main+0x330>)
 8002c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c86:	461a      	mov	r2, r3
 8002c88:	4b2d      	ldr	r3, [pc, #180]	@ (8002d40 <main+0x330>)
 8002c8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c8e:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002c92:	429a      	cmp	r2, r3
 8002c94:	dd09      	ble.n	8002caa <main+0x29a>
 8002c96:	4b2a      	ldr	r3, [pc, #168]	@ (8002d40 <main+0x330>)
 8002c98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	b21a      	sxth	r2, r3
 8002ca6:	4b26      	ldr	r3, [pc, #152]	@ (8002d40 <main+0x330>)
 8002ca8:	801a      	strh	r2, [r3, #0]
	uint32_t now = HAL_GetTick();
 8002caa:	f000 fead 	bl	8003a08 <HAL_GetTick>
 8002cae:	64b8      	str	r0, [r7, #72]	@ 0x48
//		idle = true;
//		prev_mario = mario;
//	}

	// DRAW LOOP
	if (now - walk_tick >= 100) {
 8002cb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b63      	cmp	r3, #99	@ 0x63
 8002cb8:	f240 815e 	bls.w	8002f78 <main+0x568>
//			ILI9341_FillRectangle(prev_goomba.x, prev_goomba.y, prev_goomba.width, prev_goomba.height, ILI9341_CYAN);
//		}

		uint16_t* frame;
		// no movement happened
		if (!mario.x_distance_between_frame && (!mario.y_velocity)) {
 8002cbc:	4b20      	ldr	r3, [pc, #128]	@ (8002d40 <main+0x330>)
 8002cbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d140      	bne.n	8002d48 <main+0x338>
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d40 <main+0x330>)
 8002cc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ccc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd4:	d138      	bne.n	8002d48 <main+0x338>
			frame = mario_idle;
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d44 <main+0x334>)
 8002cd8:	667b      	str	r3, [r7, #100]	@ 0x64
			mario.width = 26;
 8002cda:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <main+0x330>)
 8002cdc:	221a      	movs	r2, #26
 8002cde:	809a      	strh	r2, [r3, #4]
			mario.height = 32;
 8002ce0:	4b17      	ldr	r3, [pc, #92]	@ (8002d40 <main+0x330>)
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	80da      	strh	r2, [r3, #6]
 8002ce6:	e0b1      	b.n	8002e4c <main+0x43c>
 8002ce8:	0800a7cc 	.word	0x0800a7cc
 8002cec:	0800a7d8 	.word	0x0800a7d8
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	0800a74c 	.word	0x0800a74c
 8002cf8:	0800a75c 	.word	0x0800a75c
 8002cfc:	20004cac 	.word	0x20004cac
 8002d00:	20005340 	.word	0x20005340
 8002d04:	0800a760 	.word	0x0800a760
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	0800a770 	.word	0x0800a770
 8002d10:	0800a788 	.word	0x0800a788
 8002d14:	0800a798 	.word	0x0800a798
 8002d18:	0800a7a0 	.word	0x0800a7a0
 8002d1c:	20004ee0 	.word	0x20004ee0
 8002d20:	0800a7ac 	.word	0x0800a7ac
 8002d24:	0800a7b4 	.word	0x0800a7b4
 8002d28:	20005110 	.word	0x20005110
 8002d2c:	20002ca8 	.word	0x20002ca8
 8002d30:	20003ca8 	.word	0x20003ca8
 8002d34:	20000204 	.word	0x20000204
 8002d38:	200001bc 	.word	0x200001bc
 8002d3c:	08010114 	.word	0x08010114
 8002d40:	2000001c 	.word	0x2000001c
 8002d44:	0800b584 	.word	0x0800b584
		}
		else {
			mario.x += mario.x_distance_between_frame;
 8002d48:	4b9d      	ldr	r3, [pc, #628]	@ (8002fc0 <main+0x5b0>)
 8002d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	4b9b      	ldr	r3, [pc, #620]	@ (8002fc0 <main+0x5b0>)
 8002d52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	b21a      	sxth	r2, r3
 8002d5e:	4b98      	ldr	r3, [pc, #608]	@ (8002fc0 <main+0x5b0>)
 8002d60:	801a      	strh	r2, [r3, #0]
//			for (int i = 0; i < num_objects; i++) {
//				objects[i].prev_x = objects[i].x;
//				objects[i].x -= mario.x_distance_between_frame;
//			}

			if (mario.y_velocity) {
 8002d62:	4b97      	ldr	r3, [pc, #604]	@ (8002fc0 <main+0x5b0>)
 8002d64:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d70:	d02d      	beq.n	8002dce <main+0x3be>
					mario.y_velocity += 0.10 * 550;
 8002d72:	4b93      	ldr	r3, [pc, #588]	@ (8002fc0 <main+0x5b0>)
 8002d74:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d78:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8002fc4 <main+0x5b4>
 8002d7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d80:	4b8f      	ldr	r3, [pc, #572]	@ (8002fc0 <main+0x5b0>)
 8002d82:	edc3 7a03 	vstr	s15, [r3, #12]
					float y_traveled = mario.y_velocity * 0.10;
 8002d86:	4b8e      	ldr	r3, [pc, #568]	@ (8002fc0 <main+0x5b0>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd fd06 	bl	800079c <__aeabi_f2d>
 8002d90:	a389      	add	r3, pc, #548	@ (adr r3, 8002fb8 <main+0x5a8>)
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	f7fd fa73 	bl	8000280 <__aeabi_dmul>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f7fd fd53 	bl	800084c <__aeabi_d2f>
 8002da6:	4603      	mov	r3, r0
 8002da8:	647b      	str	r3, [r7, #68]	@ 0x44

					mario.y += y_traveled;
 8002daa:	4b85      	ldr	r3, [pc, #532]	@ (8002fc0 <main+0x5b0>)
 8002dac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002db0:	ee07 3a90 	vmov	s15, r3
 8002db4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dc4:	ee17 3a90 	vmov	r3, s15
 8002dc8:	b21a      	sxth	r2, r3
 8002dca:	4b7d      	ldr	r3, [pc, #500]	@ (8002fc0 <main+0x5b0>)
 8002dcc:	805a      	strh	r2, [r3, #2]
//						mario.y = 176;
//						mario.y_velocity = 0;
//					}
			}

			if (mario.y_velocity) {
 8002dce:	4b7c      	ldr	r3, [pc, #496]	@ (8002fc0 <main+0x5b0>)
 8002dd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ddc:	d008      	beq.n	8002df0 <main+0x3e0>
				frame = mario_jump;
 8002dde:	4b7a      	ldr	r3, [pc, #488]	@ (8002fc8 <main+0x5b8>)
 8002de0:	667b      	str	r3, [r7, #100]	@ 0x64
				mario.width = 34;
 8002de2:	4b77      	ldr	r3, [pc, #476]	@ (8002fc0 <main+0x5b0>)
 8002de4:	2222      	movs	r2, #34	@ 0x22
 8002de6:	809a      	strh	r2, [r3, #4]
				mario.height = 32;
 8002de8:	4b75      	ldr	r3, [pc, #468]	@ (8002fc0 <main+0x5b0>)
 8002dea:	2220      	movs	r2, #32
 8002dec:	80da      	strh	r2, [r3, #6]
 8002dee:	e02d      	b.n	8002e4c <main+0x43c>
			}
			else {
				curr_walk_frame++;
 8002df0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002df4:	3301      	adds	r3, #1
 8002df6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				curr_walk_frame %= 3;
 8002dfa:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8002dfe:	4b73      	ldr	r3, [pc, #460]	@ (8002fcc <main+0x5bc>)
 8002e00:	fba3 1302 	umull	r1, r3, r3, r2
 8002e04:	0859      	lsrs	r1, r3, #1
 8002e06:	460b      	mov	r3, r1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	440b      	add	r3, r1
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				frame = walk_frames[curr_walk_frame];
 8002e12:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	3378      	adds	r3, #120	@ 0x78
 8002e1a:	443b      	add	r3, r7
 8002e1c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8002e20:	667b      	str	r3, [r7, #100]	@ 0x64
				mario.width = walk_frames_size[curr_walk_frame * 2];
 8002e22:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	3378      	adds	r3, #120	@ 0x78
 8002e2a:	443b      	add	r3, r7
 8002e2c:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8002e30:	b21a      	sxth	r2, r3
 8002e32:	4b63      	ldr	r3, [pc, #396]	@ (8002fc0 <main+0x5b0>)
 8002e34:	809a      	strh	r2, [r3, #4]
				mario.height = walk_frames_size[curr_walk_frame * 2 + 1];
 8002e36:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	3378      	adds	r3, #120	@ 0x78
 8002e40:	443b      	add	r3, r7
 8002e42:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8002e46:	b21a      	sxth	r2, r3
 8002e48:	4b5d      	ldr	r3, [pc, #372]	@ (8002fc0 <main+0x5b0>)
 8002e4a:	80da      	strh	r2, [r3, #6]

//			sprintf(buf_vel, "%f", mario.y_velocity);
//			ILI9341_WriteString(180, 220, buf_vel, Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
		}

		collision_detection_enemies();
 8002e4c:	f7fe fc94 	bl	8001778 <collision_detection_enemies>
		bool touching_ground = isTouchingGround();
 8002e50:	f7fe fe28 	bl	8001aa4 <isTouchingGround>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		// if mario isn't idle or he is but its the first frame where he is idle, then draw
		// otherwise skip to optimize speed.
		if (frame != mario_idle || (frame == mario_idle && !idle)) {
 8002e5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e5c:	4a5c      	ldr	r2, [pc, #368]	@ (8002fd0 <main+0x5c0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d10a      	bne.n	8002e78 <main+0x468>
 8002e62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e64:	4a5a      	ldr	r2, [pc, #360]	@ (8002fd0 <main+0x5c0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d163      	bne.n	8002f32 <main+0x522>
 8002e6a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002e6e:	f083 0301 	eor.w	r3, r3, #1
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d05c      	beq.n	8002f32 <main+0x522>

			if (!idle && frame == mario_idle) {
 8002e78:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002e7c:	f083 0301 	eor.w	r3, r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <main+0x484>
 8002e86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e88:	4a51      	ldr	r2, [pc, #324]	@ (8002fd0 <main+0x5c0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d102      	bne.n	8002e94 <main+0x484>
				// prevent another print while he's idle
				idle = true;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
			}

			if (idle && frame != mario_idle) {
 8002e94:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d006      	beq.n	8002eaa <main+0x49a>
 8002e9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e9e:	4a4c      	ldr	r2, [pc, #304]	@ (8002fd0 <main+0x5c0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d002      	beq.n	8002eaa <main+0x49a>
				idle = false;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
			}


			ILI9341_FillRectangle(prev_mario.x, prev_mario.y, prev_mario.width, prev_mario.height, ILI9341_CYAN);
 8002eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd4 <main+0x5c4>)
 8002eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb0:	b298      	uxth	r0, r3
 8002eb2:	4b48      	ldr	r3, [pc, #288]	@ (8002fd4 <main+0x5c4>)
 8002eb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002eb8:	b299      	uxth	r1, r3
 8002eba:	4b46      	ldr	r3, [pc, #280]	@ (8002fd4 <main+0x5c4>)
 8002ebc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	4b44      	ldr	r3, [pc, #272]	@ (8002fd4 <main+0x5c4>)
 8002ec4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	f240 74ff 	movw	r4, #2047	@ 0x7ff
 8002ece:	9400      	str	r4, [sp, #0]
 8002ed0:	f7fe f9b4 	bl	800123c <ILI9341_FillRectangle>
	//		ILI9341_DrawImage(mario.x, mario.y, mario.width, mario.height, frame);
			cleanMarioBackground(frame, mario_final, mario.width, mario.height, 34*32);
 8002ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc0 <main+0x5b0>)
 8002ed6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	4b38      	ldr	r3, [pc, #224]	@ (8002fc0 <main+0x5b0>)
 8002ede:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002ee8:	9100      	str	r1, [sp, #0]
 8002eea:	493b      	ldr	r1, [pc, #236]	@ (8002fd8 <main+0x5c8>)
 8002eec:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002eee:	f7ff f81b 	bl	8001f28 <cleanMarioBackground>
//				if (objects[i].redraw) {
//					ILI9341_DrawImage(objects[i].x, objects[i].y, objects[i].width, objects[i].height, objects[i].frame);
//					objects[i].redraw = false;
//				}
//			}
			turn_mario(mario.width, mario.height);
 8002ef2:	4b33      	ldr	r3, [pc, #204]	@ (8002fc0 <main+0x5b0>)
 8002ef4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	4a31      	ldr	r2, [pc, #196]	@ (8002fc0 <main+0x5b0>)
 8002efc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fe fb1b 	bl	8001540 <turn_mario>
//			for (int i = 0; i < num_objects; i++) {
//				if (objects[i].x >= 0 && objects[i].x < 320 || objects[i].y >= 0 || objects[i].y < 240) {
//					ILI9341_DrawImage(objects[i].x, objects[i].y, objects[i].width, objects[i].height, objects[i].frame);
//				}
//			}
			ILI9341_DrawImage(mario.x, mario.y, mario.width, mario.height, mario_final);
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc0 <main+0x5b0>)
 8002f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f10:	b298      	uxth	r0, r3
 8002f12:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc0 <main+0x5b0>)
 8002f14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f18:	b299      	uxth	r1, r3
 8002f1a:	4b29      	ldr	r3, [pc, #164]	@ (8002fc0 <main+0x5b0>)
 8002f1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	4b27      	ldr	r3, [pc, #156]	@ (8002fc0 <main+0x5b0>)
 8002f24:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	4c2b      	ldr	r4, [pc, #172]	@ (8002fd8 <main+0x5c8>)
 8002f2c:	9400      	str	r4, [sp, #0]
 8002f2e:	f7fe fa05 	bl	800133c <ILI9341_DrawImage>
//			cleanMarioBackground(curr_goomba, goomba_final, goomba.width, goomba.height);
//			ILI9341_FillRectangle(prev_goomba.x, prev_goomba.y, prev_goomba.width, prev_goomba.height, ILI9341_CYAN);
//			ILI9341_DrawImage(goomba.x, goomba.y, goomba.width, goomba.height, goomba_final);
//		}

		prev_mario = mario;
 8002f32:	4a28      	ldr	r2, [pc, #160]	@ (8002fd4 <main+0x5c4>)
 8002f34:	4b22      	ldr	r3, [pc, #136]	@ (8002fc0 <main+0x5b0>)
 8002f36:	4614      	mov	r4, r2
 8002f38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		mario.x_distance_between_frame = 0;
 8002f3e:	4b20      	ldr	r3, [pc, #128]	@ (8002fc0 <main+0x5b0>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	811a      	strh	r2, [r3, #8]
		walk_tick = now;
 8002f44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f46:	677b      	str	r3, [r7, #116]	@ 0x74
		char msg[32];
		snprintf(msg, sizeof(msg), "Lives: %d", mario_lives);
 8002f48:	4b24      	ldr	r3, [pc, #144]	@ (8002fdc <main+0x5cc>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	4a24      	ldr	r2, [pc, #144]	@ (8002fe0 <main+0x5d0>)
 8002f50:	2120      	movs	r1, #32
 8002f52:	f006 ff21 	bl	8009d98 <sniprintf>
		ILI9341_WriteString(10, 10, msg, Font_11x18, ILI9341_BLACK, ILI9341_CYAN);
 8002f56:	4b23      	ldr	r3, [pc, #140]	@ (8002fe4 <main+0x5d4>)
 8002f58:	4639      	mov	r1, r7
 8002f5a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002f5e:	9202      	str	r2, [sp, #8]
 8002f60:	2200      	movs	r2, #0
 8002f62:	9201      	str	r2, [sp, #4]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	9200      	str	r2, [sp, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	460a      	mov	r2, r1
 8002f6c:	210a      	movs	r1, #10
 8002f6e:	200a      	movs	r0, #10
 8002f70:	f7fe f918 	bl	80011a4 <ILI9341_WriteString>
		draw_bowser();
 8002f74:	f7ff fa30 	bl	80023d8 <draw_bowser>
	}

	frame_count++;
 8002f78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	66bb      	str	r3, [r7, #104]	@ 0x68

//	if (frame_count > 30) {
//		HAL_Delay(10);
//	}
	// forward
	if (now - read_pin_tick >= 50) {
 8002f7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b31      	cmp	r3, #49	@ 0x31
 8002f86:	f67f ae73 	bls.w	8002c70 <main+0x260>
		if (HAL_GPIO_ReadPin(RIGHT_BUTTON_GPIO_Port, RIGHT_BUTTON_Pin) == GPIO_PIN_SET) {
 8002f8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f8e:	4816      	ldr	r0, [pc, #88]	@ (8002fe8 <main+0x5d8>)
 8002f90:	f001 f800 	bl	8003f94 <HAL_GPIO_ReadPin>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d128      	bne.n	8002fec <main+0x5dc>
			// Button is held down - move the character
			mario.x_distance_between_frame += 3;
 8002f9a:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <main+0x5b0>)
 8002f9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3303      	adds	r3, #3
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	b21a      	sxth	r2, r3
 8002fa8:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <main+0x5b0>)
 8002faa:	811a      	strh	r2, [r3, #8]
			move_tick = now;
 8002fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fb0:	e02f      	b.n	8003012 <main+0x602>
 8002fb2:	bf00      	nop
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	9999999a 	.word	0x9999999a
 8002fbc:	3fb99999 	.word	0x3fb99999
 8002fc0:	2000001c 	.word	0x2000001c
 8002fc4:	425c0000 	.word	0x425c0000
 8002fc8:	0800d094 	.word	0x0800d094
 8002fcc:	aaaaaaab 	.word	0xaaaaaaab
 8002fd0:	0800b584 	.word	0x0800b584
 8002fd4:	2000000c 	.word	0x2000000c
 8002fd8:	20000424 	.word	0x20000424
 8002fdc:	20000008 	.word	0x20000008
 8002fe0:	0800a7c0 	.word	0x0800a7c0
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	40020400 	.word	0x40020400
	   }
		else if (HAL_GPIO_ReadPin(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin) == GPIO_PIN_SET) {
 8002fec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ff0:	4819      	ldr	r0, [pc, #100]	@ (8003058 <main+0x648>)
 8002ff2:	f000 ffcf 	bl	8003f94 <HAL_GPIO_ReadPin>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d10a      	bne.n	8003012 <main+0x602>
			// Button is held down - move the character
			mario.x_distance_between_frame -= 3;
 8002ffc:	4b17      	ldr	r3, [pc, #92]	@ (800305c <main+0x64c>)
 8002ffe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b03      	subs	r3, #3
 8003006:	b29b      	uxth	r3, r3
 8003008:	b21a      	sxth	r2, r3
 800300a:	4b14      	ldr	r3, [pc, #80]	@ (800305c <main+0x64c>)
 800300c:	811a      	strh	r2, [r3, #8]
			move_tick = now;
 800300e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003010:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
	   if (HAL_GPIO_ReadPin(JUMP_BUTTON_GPIO_Port, JUMP_BUTTON_Pin) == GPIO_PIN_SET) {
 8003012:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003016:	4812      	ldr	r0, [pc, #72]	@ (8003060 <main+0x650>)
 8003018:	f000 ffbc 	bl	8003f94 <HAL_GPIO_ReadPin>
 800301c:	4603      	mov	r3, r0
 800301e:	2b01      	cmp	r3, #1
 8003020:	d117      	bne.n	8003052 <main+0x642>
			// Button is held down - move the character
		   is_jumping = true;
 8003022:	4b10      	ldr	r3, [pc, #64]	@ (8003064 <main+0x654>)
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
		   jump_timer = HAL_GetTick();
 8003028:	f000 fcee 	bl	8003a08 <HAL_GetTick>
 800302c:	4603      	mov	r3, r0
 800302e:	4a0e      	ldr	r2, [pc, #56]	@ (8003068 <main+0x658>)
 8003030:	6013      	str	r3, [r2, #0]
		   mario.y_velocity = (mario.y_velocity) ? mario.y_velocity : -350;
 8003032:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <main+0x64c>)
 8003034:	edd3 7a03 	vldr	s15, [r3, #12]
 8003038:	eef5 7a40 	vcmp.f32	s15, #0.0
 800303c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003040:	d002      	beq.n	8003048 <main+0x638>
 8003042:	4b06      	ldr	r3, [pc, #24]	@ (800305c <main+0x64c>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	e000      	b.n	800304a <main+0x63a>
 8003048:	4b08      	ldr	r3, [pc, #32]	@ (800306c <main+0x65c>)
 800304a:	4a04      	ldr	r2, [pc, #16]	@ (800305c <main+0x64c>)
 800304c:	60d3      	str	r3, [r2, #12]
		   move_tick = now;
 800304e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003050:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		read_pin_tick = now;
 8003052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003054:	673b      	str	r3, [r7, #112]	@ 0x70
  {
 8003056:	e60b      	b.n	8002c70 <main+0x260>
 8003058:	40020000 	.word	0x40020000
 800305c:	2000001c 	.word	0x2000001c
 8003060:	40020400 	.word	0x40020400
 8003064:	20005348 	.word	0x20005348
 8003068:	2000534c 	.word	0x2000534c
 800306c:	c3af0000 	.word	0xc3af0000

08003070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b094      	sub	sp, #80	@ 0x50
 8003074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003076:	f107 0320 	add.w	r3, r7, #32
 800307a:	2230      	movs	r2, #48	@ 0x30
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f006 febe 	bl	8009e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003084:	f107 030c 	add.w	r3, r7, #12
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003094:	2300      	movs	r3, #0
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	4b27      	ldr	r3, [pc, #156]	@ (8003138 <SystemClock_Config+0xc8>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	4a26      	ldr	r2, [pc, #152]	@ (8003138 <SystemClock_Config+0xc8>)
 800309e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a4:	4b24      	ldr	r3, [pc, #144]	@ (8003138 <SystemClock_Config+0xc8>)
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030b0:	2300      	movs	r3, #0
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	4b21      	ldr	r3, [pc, #132]	@ (800313c <SystemClock_Config+0xcc>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a20      	ldr	r2, [pc, #128]	@ (800313c <SystemClock_Config+0xcc>)
 80030ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	4b1e      	ldr	r3, [pc, #120]	@ (800313c <SystemClock_Config+0xcc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030cc:	2302      	movs	r3, #2
 80030ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030d0:	2301      	movs	r3, #1
 80030d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030d4:	2310      	movs	r3, #16
 80030d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030d8:	2302      	movs	r3, #2
 80030da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030dc:	2300      	movs	r3, #0
 80030de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80030e0:	2308      	movs	r3, #8
 80030e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80030e4:	2364      	movs	r3, #100	@ 0x64
 80030e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030e8:	2302      	movs	r3, #2
 80030ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80030ec:	2304      	movs	r3, #4
 80030ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030f0:	f107 0320 	add.w	r3, r7, #32
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 ff7f 	bl	8003ff8 <HAL_RCC_OscConfig>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003100:	f000 f9f8 	bl	80034f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003104:	230f      	movs	r3, #15
 8003106:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003108:	2302      	movs	r3, #2
 800310a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003110:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003114:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800311a:	f107 030c 	add.w	r3, r7, #12
 800311e:	2103      	movs	r1, #3
 8003120:	4618      	mov	r0, r3
 8003122:	f001 f9e1 	bl	80044e8 <HAL_RCC_ClockConfig>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800312c:	f000 f9e2 	bl	80034f4 <Error_Handler>
  }
}
 8003130:	bf00      	nop
 8003132:	3750      	adds	r7, #80	@ 0x50
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800
 800313c:	40007000 	.word	0x40007000

08003140 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003144:	4b17      	ldr	r3, [pc, #92]	@ (80031a4 <MX_SPI1_Init+0x64>)
 8003146:	4a18      	ldr	r2, [pc, #96]	@ (80031a8 <MX_SPI1_Init+0x68>)
 8003148:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800314a:	4b16      	ldr	r3, [pc, #88]	@ (80031a4 <MX_SPI1_Init+0x64>)
 800314c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003150:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003152:	4b14      	ldr	r3, [pc, #80]	@ (80031a4 <MX_SPI1_Init+0x64>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003158:	4b12      	ldr	r3, [pc, #72]	@ (80031a4 <MX_SPI1_Init+0x64>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800315e:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <MX_SPI1_Init+0x64>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003164:	4b0f      	ldr	r3, [pc, #60]	@ (80031a4 <MX_SPI1_Init+0x64>)
 8003166:	2200      	movs	r2, #0
 8003168:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800316a:	4b0e      	ldr	r3, [pc, #56]	@ (80031a4 <MX_SPI1_Init+0x64>)
 800316c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003170:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003172:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <MX_SPI1_Init+0x64>)
 8003174:	2200      	movs	r2, #0
 8003176:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003178:	4b0a      	ldr	r3, [pc, #40]	@ (80031a4 <MX_SPI1_Init+0x64>)
 800317a:	2200      	movs	r2, #0
 800317c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800317e:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <MX_SPI1_Init+0x64>)
 8003180:	2200      	movs	r2, #0
 8003182:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003184:	4b07      	ldr	r3, [pc, #28]	@ (80031a4 <MX_SPI1_Init+0x64>)
 8003186:	2200      	movs	r2, #0
 8003188:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800318a:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <MX_SPI1_Init+0x64>)
 800318c:	220a      	movs	r2, #10
 800318e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003190:	4804      	ldr	r0, [pc, #16]	@ (80031a4 <MX_SPI1_Init+0x64>)
 8003192:	f001 fb89 	bl	80048a8 <HAL_SPI_Init>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800319c:	f000 f9aa 	bl	80034f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	2000010c 	.word	0x2000010c
 80031a8:	40013000 	.word	0x40013000

080031ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80031b0:	4b17      	ldr	r3, [pc, #92]	@ (8003210 <MX_SPI2_Init+0x64>)
 80031b2:	4a18      	ldr	r2, [pc, #96]	@ (8003214 <MX_SPI2_Init+0x68>)
 80031b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031b6:	4b16      	ldr	r3, [pc, #88]	@ (8003210 <MX_SPI2_Init+0x64>)
 80031b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80031bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80031be:	4b14      	ldr	r3, [pc, #80]	@ (8003210 <MX_SPI2_Init+0x64>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031c4:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <MX_SPI2_Init+0x64>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031ca:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <MX_SPI2_Init+0x64>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <MX_SPI2_Init+0x64>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <MX_SPI2_Init+0x64>)
 80031d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80031de:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <MX_SPI2_Init+0x64>)
 80031e0:	2230      	movs	r2, #48	@ 0x30
 80031e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <MX_SPI2_Init+0x64>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80031ea:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <MX_SPI2_Init+0x64>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031f0:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <MX_SPI2_Init+0x64>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80031f6:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <MX_SPI2_Init+0x64>)
 80031f8:	220a      	movs	r2, #10
 80031fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80031fc:	4804      	ldr	r0, [pc, #16]	@ (8003210 <MX_SPI2_Init+0x64>)
 80031fe:	f001 fb53 	bl	80048a8 <HAL_SPI_Init>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003208:	f000 f974 	bl	80034f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800320c:	bf00      	nop
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000164 	.word	0x20000164
 8003214:	40003800 	.word	0x40003800

08003218 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	@ 0x28
 800321c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800321e:	f107 0320 	add.w	r3, r7, #32
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003228:	1d3b      	adds	r3, r7, #4
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	609a      	str	r2, [r3, #8]
 8003232:	60da      	str	r2, [r3, #12]
 8003234:	611a      	str	r2, [r3, #16]
 8003236:	615a      	str	r2, [r3, #20]
 8003238:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800323a:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <MX_TIM3_Init+0xa4>)
 800323c:	4a20      	ldr	r2, [pc, #128]	@ (80032c0 <MX_TIM3_Init+0xa8>)
 800323e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003240:	4b1e      	ldr	r3, [pc, #120]	@ (80032bc <MX_TIM3_Init+0xa4>)
 8003242:	2200      	movs	r2, #0
 8003244:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003246:	4b1d      	ldr	r3, [pc, #116]	@ (80032bc <MX_TIM3_Init+0xa4>)
 8003248:	2200      	movs	r2, #0
 800324a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 12500;
 800324c:	4b1b      	ldr	r3, [pc, #108]	@ (80032bc <MX_TIM3_Init+0xa4>)
 800324e:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8003252:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003254:	4b19      	ldr	r3, [pc, #100]	@ (80032bc <MX_TIM3_Init+0xa4>)
 8003256:	2200      	movs	r2, #0
 8003258:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800325a:	4b18      	ldr	r3, [pc, #96]	@ (80032bc <MX_TIM3_Init+0xa4>)
 800325c:	2200      	movs	r2, #0
 800325e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8003260:	4816      	ldr	r0, [pc, #88]	@ (80032bc <MX_TIM3_Init+0xa4>)
 8003262:	f001 ffd5 	bl	8005210 <HAL_TIM_OC_Init>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800326c:	f000 f942 	bl	80034f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003270:	2300      	movs	r3, #0
 8003272:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003274:	2300      	movs	r3, #0
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003278:	f107 0320 	add.w	r3, r7, #32
 800327c:	4619      	mov	r1, r3
 800327e:	480f      	ldr	r0, [pc, #60]	@ (80032bc <MX_TIM3_Init+0xa4>)
 8003280:	f002 fd82 	bl	8005d88 <HAL_TIMEx_MasterConfigSynchronization>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800328a:	f000 f933 	bl	80034f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800329e:	1d3b      	adds	r3, r7, #4
 80032a0:	2200      	movs	r2, #0
 80032a2:	4619      	mov	r1, r3
 80032a4:	4805      	ldr	r0, [pc, #20]	@ (80032bc <MX_TIM3_Init+0xa4>)
 80032a6:	f002 f9f1 	bl	800568c <HAL_TIM_OC_ConfigChannel>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80032b0:	f000 f920 	bl	80034f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032b4:	bf00      	nop
 80032b6:	3728      	adds	r7, #40	@ 0x28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	200001bc 	.word	0x200001bc
 80032c0:	40000400 	.word	0x40000400

080032c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	@ 0x28
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ca:	f107 0320 	add.w	r3, r7, #32
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	60da      	str	r2, [r3, #12]
 80032e0:	611a      	str	r2, [r3, #16]
 80032e2:	615a      	str	r2, [r3, #20]
 80032e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80032e6:	4b21      	ldr	r3, [pc, #132]	@ (800336c <MX_TIM4_Init+0xa8>)
 80032e8:	4a21      	ldr	r2, [pc, #132]	@ (8003370 <MX_TIM4_Init+0xac>)
 80032ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80032ec:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <MX_TIM4_Init+0xa8>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f2:	4b1e      	ldr	r3, [pc, #120]	@ (800336c <MX_TIM4_Init+0xa8>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80032f8:	4b1c      	ldr	r3, [pc, #112]	@ (800336c <MX_TIM4_Init+0xa8>)
 80032fa:	22ff      	movs	r2, #255	@ 0xff
 80032fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fe:	4b1b      	ldr	r3, [pc, #108]	@ (800336c <MX_TIM4_Init+0xa8>)
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003304:	4b19      	ldr	r3, [pc, #100]	@ (800336c <MX_TIM4_Init+0xa8>)
 8003306:	2200      	movs	r2, #0
 8003308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800330a:	4818      	ldr	r0, [pc, #96]	@ (800336c <MX_TIM4_Init+0xa8>)
 800330c:	f001 ffcf 	bl	80052ae <HAL_TIM_PWM_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8003316:	f000 f8ed 	bl	80034f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003322:	f107 0320 	add.w	r3, r7, #32
 8003326:	4619      	mov	r1, r3
 8003328:	4810      	ldr	r0, [pc, #64]	@ (800336c <MX_TIM4_Init+0xa8>)
 800332a:	f002 fd2d 	bl	8005d88 <HAL_TIMEx_MasterConfigSynchronization>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8003334:	f000 f8de 	bl	80034f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003338:	2360      	movs	r3, #96	@ 0x60
 800333a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	2200      	movs	r2, #0
 800334c:	4619      	mov	r1, r3
 800334e:	4807      	ldr	r0, [pc, #28]	@ (800336c <MX_TIM4_Init+0xa8>)
 8003350:	f002 f9f8 	bl	8005744 <HAL_TIM_PWM_ConfigChannel>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800335a:	f000 f8cb 	bl	80034f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800335e:	4803      	ldr	r0, [pc, #12]	@ (800336c <MX_TIM4_Init+0xa8>)
 8003360:	f000 f9be 	bl	80036e0 <HAL_TIM_MspPostInit>

}
 8003364:	bf00      	nop
 8003366:	3728      	adds	r7, #40	@ 0x28
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20000204 	.word	0x20000204
 8003370:	40000800 	.word	0x40000800

08003374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003378:	4b11      	ldr	r3, [pc, #68]	@ (80033c0 <MX_USART2_UART_Init+0x4c>)
 800337a:	4a12      	ldr	r2, [pc, #72]	@ (80033c4 <MX_USART2_UART_Init+0x50>)
 800337c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800337e:	4b10      	ldr	r3, [pc, #64]	@ (80033c0 <MX_USART2_UART_Init+0x4c>)
 8003380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003386:	4b0e      	ldr	r3, [pc, #56]	@ (80033c0 <MX_USART2_UART_Init+0x4c>)
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800338c:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <MX_USART2_UART_Init+0x4c>)
 800338e:	2200      	movs	r2, #0
 8003390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003392:	4b0b      	ldr	r3, [pc, #44]	@ (80033c0 <MX_USART2_UART_Init+0x4c>)
 8003394:	2200      	movs	r2, #0
 8003396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003398:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <MX_USART2_UART_Init+0x4c>)
 800339a:	220c      	movs	r2, #12
 800339c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800339e:	4b08      	ldr	r3, [pc, #32]	@ (80033c0 <MX_USART2_UART_Init+0x4c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033a4:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <MX_USART2_UART_Init+0x4c>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033aa:	4805      	ldr	r0, [pc, #20]	@ (80033c0 <MX_USART2_UART_Init+0x4c>)
 80033ac:	f002 fd6e 	bl	8005e8c <HAL_UART_Init>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80033b6:	f000 f89d 	bl	80034f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000024c 	.word	0x2000024c
 80033c4:	40004400 	.word	0x40004400

080033c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ce:	f107 030c 	add.w	r3, r7, #12
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	609a      	str	r2, [r3, #8]
 80033da:	60da      	str	r2, [r3, #12]
 80033dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	4b41      	ldr	r3, [pc, #260]	@ (80034e8 <MX_GPIO_Init+0x120>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	4a40      	ldr	r2, [pc, #256]	@ (80034e8 <MX_GPIO_Init+0x120>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ee:	4b3e      	ldr	r3, [pc, #248]	@ (80034e8 <MX_GPIO_Init+0x120>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	4b3a      	ldr	r3, [pc, #232]	@ (80034e8 <MX_GPIO_Init+0x120>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	4a39      	ldr	r2, [pc, #228]	@ (80034e8 <MX_GPIO_Init+0x120>)
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	6313      	str	r3, [r2, #48]	@ 0x30
 800340a:	4b37      	ldr	r3, [pc, #220]	@ (80034e8 <MX_GPIO_Init+0x120>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	607b      	str	r3, [r7, #4]
 8003414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|SD_Power_Pin, GPIO_PIN_RESET);
 8003416:	2200      	movs	r2, #0
 8003418:	f640 0101 	movw	r1, #2049	@ 0x801
 800341c:	4833      	ldr	r0, [pc, #204]	@ (80034ec <MX_GPIO_Init+0x124>)
 800341e:	f000 fdd1 	bl	8003fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|SD_CS_Pin, GPIO_PIN_SET);
 8003422:	2201      	movs	r2, #1
 8003424:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003428:	4830      	ldr	r0, [pc, #192]	@ (80034ec <MX_GPIO_Init+0x124>)
 800342a:	f000 fdcb 	bl	8003fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_Pin|DC_Pin|LED_Pin, GPIO_PIN_SET);
 800342e:	2201      	movs	r2, #1
 8003430:	2107      	movs	r1, #7
 8003432:	482f      	ldr	r0, [pc, #188]	@ (80034f0 <MX_GPIO_Init+0x128>)
 8003434:	f000 fdc6 	bl	8003fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|RST_Pin;
 8003438:	2311      	movs	r3, #17
 800343a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800343c:	2301      	movs	r3, #1
 800343e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003444:	2300      	movs	r3, #0
 8003446:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003448:	f107 030c 	add.w	r3, r7, #12
 800344c:	4619      	mov	r1, r3
 800344e:	4827      	ldr	r0, [pc, #156]	@ (80034ec <MX_GPIO_Init+0x124>)
 8003450:	f000 fc1c 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin LED_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|LED_Pin;
 8003454:	2307      	movs	r3, #7
 8003456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003458:	2301      	movs	r3, #1
 800345a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003460:	2302      	movs	r3, #2
 8003462:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003464:	f107 030c 	add.w	r3, r7, #12
 8003468:	4619      	mov	r1, r3
 800346a:	4821      	ldr	r0, [pc, #132]	@ (80034f0 <MX_GPIO_Init+0x128>)
 800346c:	f000 fc0e 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : JUMP_BUTTON_Pin RIGHT_BUTTON_Pin */
  GPIO_InitStruct.Pin = JUMP_BUTTON_Pin|RIGHT_BUTTON_Pin;
 8003470:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800347a:	2302      	movs	r3, #2
 800347c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347e:	f107 030c 	add.w	r3, r7, #12
 8003482:	4619      	mov	r1, r3
 8003484:	481a      	ldr	r0, [pc, #104]	@ (80034f0 <MX_GPIO_Init+0x128>)
 8003486:	f000 fc01 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800348a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800348e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003490:	2301      	movs	r3, #1
 8003492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003494:	2301      	movs	r3, #1
 8003496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003498:	2300      	movs	r3, #0
 800349a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800349c:	f107 030c 	add.w	r3, r7, #12
 80034a0:	4619      	mov	r1, r3
 80034a2:	4812      	ldr	r0, [pc, #72]	@ (80034ec <MX_GPIO_Init+0x124>)
 80034a4:	f000 fbf2 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LEFT_BUTTON_Pin */
  GPIO_InitStruct.Pin = LEFT_BUTTON_Pin;
 80034a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034b2:	2302      	movs	r3, #2
 80034b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LEFT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80034b6:	f107 030c 	add.w	r3, r7, #12
 80034ba:	4619      	mov	r1, r3
 80034bc:	480b      	ldr	r0, [pc, #44]	@ (80034ec <MX_GPIO_Init+0x124>)
 80034be:	f000 fbe5 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Power_Pin */
  GPIO_InitStruct.Pin = SD_Power_Pin;
 80034c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c8:	2301      	movs	r3, #1
 80034ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d0:	2303      	movs	r3, #3
 80034d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_Power_GPIO_Port, &GPIO_InitStruct);
 80034d4:	f107 030c 	add.w	r3, r7, #12
 80034d8:	4619      	mov	r1, r3
 80034da:	4804      	ldr	r0, [pc, #16]	@ (80034ec <MX_GPIO_Init+0x124>)
 80034dc:	f000 fbd6 	bl	8003c8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
/* USER CODE END MX_GPIO_Init_2 */
}
 80034e0:	bf00      	nop
 80034e2:	3720      	adds	r7, #32
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40020000 	.word	0x40020000
 80034f0:	40020400 	.word	0x40020400

080034f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034f8:	b672      	cpsid	i
}
 80034fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034fc:	bf00      	nop
 80034fe:	e7fd      	b.n	80034fc <Error_Handler+0x8>

08003500 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	4b10      	ldr	r3, [pc, #64]	@ (800354c <HAL_MspInit+0x4c>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	4a0f      	ldr	r2, [pc, #60]	@ (800354c <HAL_MspInit+0x4c>)
 8003510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003514:	6453      	str	r3, [r2, #68]	@ 0x44
 8003516:	4b0d      	ldr	r3, [pc, #52]	@ (800354c <HAL_MspInit+0x4c>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800351e:	607b      	str	r3, [r7, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	4b09      	ldr	r3, [pc, #36]	@ (800354c <HAL_MspInit+0x4c>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	4a08      	ldr	r2, [pc, #32]	@ (800354c <HAL_MspInit+0x4c>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003530:	6413      	str	r3, [r2, #64]	@ 0x40
 8003532:	4b06      	ldr	r3, [pc, #24]	@ (800354c <HAL_MspInit+0x4c>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800

08003550 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08c      	sub	sp, #48	@ 0x30
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003558:	f107 031c 	add.w	r3, r7, #28
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a32      	ldr	r2, [pc, #200]	@ (8003638 <HAL_SPI_MspInit+0xe8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d12c      	bne.n	80035cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	4b31      	ldr	r3, [pc, #196]	@ (800363c <HAL_SPI_MspInit+0xec>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	4a30      	ldr	r2, [pc, #192]	@ (800363c <HAL_SPI_MspInit+0xec>)
 800357c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003580:	6453      	str	r3, [r2, #68]	@ 0x44
 8003582:	4b2e      	ldr	r3, [pc, #184]	@ (800363c <HAL_SPI_MspInit+0xec>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800358a:	61bb      	str	r3, [r7, #24]
 800358c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	4b2a      	ldr	r3, [pc, #168]	@ (800363c <HAL_SPI_MspInit+0xec>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	4a29      	ldr	r2, [pc, #164]	@ (800363c <HAL_SPI_MspInit+0xec>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6313      	str	r3, [r2, #48]	@ 0x30
 800359e:	4b27      	ldr	r3, [pc, #156]	@ (800363c <HAL_SPI_MspInit+0xec>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ILI_SCK_Pin|ILI_MISO_Pin|ILI_MOSI_Pin;
 80035aa:	23e0      	movs	r3, #224	@ 0xe0
 80035ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b6:	2303      	movs	r3, #3
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035ba:	2305      	movs	r3, #5
 80035bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035be:	f107 031c 	add.w	r3, r7, #28
 80035c2:	4619      	mov	r1, r3
 80035c4:	481e      	ldr	r0, [pc, #120]	@ (8003640 <HAL_SPI_MspInit+0xf0>)
 80035c6:	f000 fb61 	bl	8003c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80035ca:	e031      	b.n	8003630 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003644 <HAL_SPI_MspInit+0xf4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d12c      	bne.n	8003630 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	4b18      	ldr	r3, [pc, #96]	@ (800363c <HAL_SPI_MspInit+0xec>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	4a17      	ldr	r2, [pc, #92]	@ (800363c <HAL_SPI_MspInit+0xec>)
 80035e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035e6:	4b15      	ldr	r3, [pc, #84]	@ (800363c <HAL_SPI_MspInit+0xec>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	4b11      	ldr	r3, [pc, #68]	@ (800363c <HAL_SPI_MspInit+0xec>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	4a10      	ldr	r2, [pc, #64]	@ (800363c <HAL_SPI_MspInit+0xec>)
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	6313      	str	r3, [r2, #48]	@ 0x30
 8003602:	4b0e      	ldr	r3, [pc, #56]	@ (800363c <HAL_SPI_MspInit+0xec>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800360e:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8003612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003614:	2302      	movs	r3, #2
 8003616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003618:	2301      	movs	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	2300      	movs	r3, #0
 800361e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003620:	2305      	movs	r3, #5
 8003622:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003624:	f107 031c 	add.w	r3, r7, #28
 8003628:	4619      	mov	r1, r3
 800362a:	4807      	ldr	r0, [pc, #28]	@ (8003648 <HAL_SPI_MspInit+0xf8>)
 800362c:	f000 fb2e 	bl	8003c8c <HAL_GPIO_Init>
}
 8003630:	bf00      	nop
 8003632:	3730      	adds	r7, #48	@ 0x30
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40013000 	.word	0x40013000
 800363c:	40023800 	.word	0x40023800
 8003640:	40020000 	.word	0x40020000
 8003644:	40003800 	.word	0x40003800
 8003648:	40020400 	.word	0x40020400

0800364c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a0e      	ldr	r2, [pc, #56]	@ (8003694 <HAL_TIM_OC_MspInit+0x48>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d115      	bne.n	800368a <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	4b0d      	ldr	r3, [pc, #52]	@ (8003698 <HAL_TIM_OC_MspInit+0x4c>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	4a0c      	ldr	r2, [pc, #48]	@ (8003698 <HAL_TIM_OC_MspInit+0x4c>)
 8003668:	f043 0302 	orr.w	r3, r3, #2
 800366c:	6413      	str	r3, [r2, #64]	@ 0x40
 800366e:	4b0a      	ldr	r3, [pc, #40]	@ (8003698 <HAL_TIM_OC_MspInit+0x4c>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800367a:	2200      	movs	r2, #0
 800367c:	2100      	movs	r1, #0
 800367e:	201d      	movs	r0, #29
 8003680:	f000 facd 	bl	8003c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003684:	201d      	movs	r0, #29
 8003686:	f000 fae6 	bl	8003c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40000400 	.word	0x40000400
 8003698:	40023800 	.word	0x40023800

0800369c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0b      	ldr	r2, [pc, #44]	@ (80036d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d10d      	bne.n	80036ca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <HAL_TIM_PWM_MspInit+0x40>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	4a09      	ldr	r2, [pc, #36]	@ (80036dc <HAL_TIM_PWM_MspInit+0x40>)
 80036b8:	f043 0304 	orr.w	r3, r3, #4
 80036bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036be:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <HAL_TIM_PWM_MspInit+0x40>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40000800 	.word	0x40000800
 80036dc:	40023800 	.word	0x40023800

080036e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e8:	f107 030c 	add.w	r3, r7, #12
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a12      	ldr	r2, [pc, #72]	@ (8003748 <HAL_TIM_MspPostInit+0x68>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d11d      	bne.n	800373e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	4b11      	ldr	r3, [pc, #68]	@ (800374c <HAL_TIM_MspPostInit+0x6c>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	4a10      	ldr	r2, [pc, #64]	@ (800374c <HAL_TIM_MspPostInit+0x6c>)
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	6313      	str	r3, [r2, #48]	@ 0x30
 8003712:	4b0e      	ldr	r3, [pc, #56]	@ (800374c <HAL_TIM_MspPostInit+0x6c>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800371e:	2340      	movs	r3, #64	@ 0x40
 8003720:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
 8003724:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800372e:	2302      	movs	r3, #2
 8003730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003732:	f107 030c 	add.w	r3, r7, #12
 8003736:	4619      	mov	r1, r3
 8003738:	4805      	ldr	r0, [pc, #20]	@ (8003750 <HAL_TIM_MspPostInit+0x70>)
 800373a:	f000 faa7 	bl	8003c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800373e:	bf00      	nop
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40000800 	.word	0x40000800
 800374c:	40023800 	.word	0x40023800
 8003750:	40020400 	.word	0x40020400

08003754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	@ 0x28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 0314 	add.w	r3, r7, #20
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a19      	ldr	r2, [pc, #100]	@ (80037d8 <HAL_UART_MspInit+0x84>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d12b      	bne.n	80037ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	4b18      	ldr	r3, [pc, #96]	@ (80037dc <HAL_UART_MspInit+0x88>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	4a17      	ldr	r2, [pc, #92]	@ (80037dc <HAL_UART_MspInit+0x88>)
 8003780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003784:	6413      	str	r3, [r2, #64]	@ 0x40
 8003786:	4b15      	ldr	r3, [pc, #84]	@ (80037dc <HAL_UART_MspInit+0x88>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	4b11      	ldr	r3, [pc, #68]	@ (80037dc <HAL_UART_MspInit+0x88>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	4a10      	ldr	r2, [pc, #64]	@ (80037dc <HAL_UART_MspInit+0x88>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a2:	4b0e      	ldr	r3, [pc, #56]	@ (80037dc <HAL_UART_MspInit+0x88>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037ae:	230c      	movs	r3, #12
 80037b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ba:	2303      	movs	r3, #3
 80037bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037be:	2307      	movs	r3, #7
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	4619      	mov	r1, r3
 80037c8:	4805      	ldr	r0, [pc, #20]	@ (80037e0 <HAL_UART_MspInit+0x8c>)
 80037ca:	f000 fa5f 	bl	8003c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037ce:	bf00      	nop
 80037d0:	3728      	adds	r7, #40	@ 0x28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40004400 	.word	0x40004400
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40020000 	.word	0x40020000

080037e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037e8:	bf00      	nop
 80037ea:	e7fd      	b.n	80037e8 <NMI_Handler+0x4>

080037ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037f0:	bf00      	nop
 80037f2:	e7fd      	b.n	80037f0 <HardFault_Handler+0x4>

080037f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037f8:	bf00      	nop
 80037fa:	e7fd      	b.n	80037f8 <MemManage_Handler+0x4>

080037fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <BusFault_Handler+0x4>

08003804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <UsageFault_Handler+0x4>

0800380c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800381a:	b480      	push	{r7}
 800381c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800381e:	bf00      	nop
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800383a:	f000 f8d1 	bl	80039e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003848:	4802      	ldr	r0, [pc, #8]	@ (8003854 <TIM3_IRQHandler+0x10>)
 800384a:	f001 fe2f 	bl	80054ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	200001bc 	.word	0x200001bc

08003858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003860:	4a14      	ldr	r2, [pc, #80]	@ (80038b4 <_sbrk+0x5c>)
 8003862:	4b15      	ldr	r3, [pc, #84]	@ (80038b8 <_sbrk+0x60>)
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800386c:	4b13      	ldr	r3, [pc, #76]	@ (80038bc <_sbrk+0x64>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d102      	bne.n	800387a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003874:	4b11      	ldr	r3, [pc, #68]	@ (80038bc <_sbrk+0x64>)
 8003876:	4a12      	ldr	r2, [pc, #72]	@ (80038c0 <_sbrk+0x68>)
 8003878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800387a:	4b10      	ldr	r3, [pc, #64]	@ (80038bc <_sbrk+0x64>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	429a      	cmp	r2, r3
 8003886:	d207      	bcs.n	8003898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003888:	f006 fac2 	bl	8009e10 <__errno>
 800388c:	4603      	mov	r3, r0
 800388e:	220c      	movs	r2, #12
 8003890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003892:	f04f 33ff 	mov.w	r3, #4294967295
 8003896:	e009      	b.n	80038ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003898:	4b08      	ldr	r3, [pc, #32]	@ (80038bc <_sbrk+0x64>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800389e:	4b07      	ldr	r3, [pc, #28]	@ (80038bc <_sbrk+0x64>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	4a05      	ldr	r2, [pc, #20]	@ (80038bc <_sbrk+0x64>)
 80038a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038aa:	68fb      	ldr	r3, [r7, #12]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20020000 	.word	0x20020000
 80038b8:	00000400 	.word	0x00000400
 80038bc:	20006030 	.word	0x20006030
 80038c0:	200063c8 	.word	0x200063c8

080038c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038c8:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <SystemInit+0x20>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ce:	4a05      	ldr	r2, [pc, #20]	@ (80038e4 <SystemInit+0x20>)
 80038d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80038e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003920 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80038ec:	f7ff ffea 	bl	80038c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038f0:	480c      	ldr	r0, [pc, #48]	@ (8003924 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038f2:	490d      	ldr	r1, [pc, #52]	@ (8003928 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038f4:	4a0d      	ldr	r2, [pc, #52]	@ (800392c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038f8:	e002      	b.n	8003900 <LoopCopyDataInit>

080038fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038fe:	3304      	adds	r3, #4

08003900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003904:	d3f9      	bcc.n	80038fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003906:	4a0a      	ldr	r2, [pc, #40]	@ (8003930 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003908:	4c0a      	ldr	r4, [pc, #40]	@ (8003934 <LoopFillZerobss+0x22>)
  movs r3, #0
 800390a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800390c:	e001      	b.n	8003912 <LoopFillZerobss>

0800390e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800390e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003910:	3204      	adds	r2, #4

08003912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003914:	d3fb      	bcc.n	800390e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003916:	f006 fa81 	bl	8009e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800391a:	f7ff f879 	bl	8002a10 <main>
  bx  lr    
 800391e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003920:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003928:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 800392c:	0801b9b0 	.word	0x0801b9b0
  ldr r2, =_sbss
 8003930:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8003934:	200063c8 	.word	0x200063c8

08003938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003938:	e7fe      	b.n	8003938 <ADC_IRQHandler>
	...

0800393c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003940:	4b0e      	ldr	r3, [pc, #56]	@ (800397c <HAL_Init+0x40>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a0d      	ldr	r2, [pc, #52]	@ (800397c <HAL_Init+0x40>)
 8003946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800394a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800394c:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <HAL_Init+0x40>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a0a      	ldr	r2, [pc, #40]	@ (800397c <HAL_Init+0x40>)
 8003952:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003958:	4b08      	ldr	r3, [pc, #32]	@ (800397c <HAL_Init+0x40>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a07      	ldr	r2, [pc, #28]	@ (800397c <HAL_Init+0x40>)
 800395e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003964:	2003      	movs	r0, #3
 8003966:	f000 f94f 	bl	8003c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800396a:	200f      	movs	r0, #15
 800396c:	f000 f808 	bl	8003980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003970:	f7ff fdc6 	bl	8003500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40023c00 	.word	0x40023c00

08003980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003988:	4b12      	ldr	r3, [pc, #72]	@ (80039d4 <HAL_InitTick+0x54>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b12      	ldr	r3, [pc, #72]	@ (80039d8 <HAL_InitTick+0x58>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	4619      	mov	r1, r3
 8003992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003996:	fbb3 f3f1 	udiv	r3, r3, r1
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f967 	bl	8003c72 <HAL_SYSTICK_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e00e      	b.n	80039cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b0f      	cmp	r3, #15
 80039b2:	d80a      	bhi.n	80039ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039b4:	2200      	movs	r2, #0
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295
 80039bc:	f000 f92f 	bl	8003c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039c0:	4a06      	ldr	r2, [pc, #24]	@ (80039dc <HAL_InitTick+0x5c>)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	e000      	b.n	80039cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	2000007c 	.word	0x2000007c
 80039d8:	20000084 	.word	0x20000084
 80039dc:	20000080 	.word	0x20000080

080039e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039e4:	4b06      	ldr	r3, [pc, #24]	@ (8003a00 <HAL_IncTick+0x20>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <HAL_IncTick+0x24>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4413      	add	r3, r2
 80039f0:	4a04      	ldr	r2, [pc, #16]	@ (8003a04 <HAL_IncTick+0x24>)
 80039f2:	6013      	str	r3, [r2, #0]
}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20000084 	.word	0x20000084
 8003a04:	20006034 	.word	0x20006034

08003a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	@ (8003a1c <HAL_GetTick+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20006034 	.word	0x20006034

08003a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a28:	f7ff ffee 	bl	8003a08 <HAL_GetTick>
 8003a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d005      	beq.n	8003a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a64 <HAL_Delay+0x44>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a46:	bf00      	nop
 8003a48:	f7ff ffde 	bl	8003a08 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d8f7      	bhi.n	8003a48 <HAL_Delay+0x28>
  {
  }
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000084 	.word	0x20000084

08003a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a78:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <__NVIC_SetPriorityGrouping+0x44>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a84:	4013      	ands	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a9a:	4a04      	ldr	r2, [pc, #16]	@ (8003aac <__NVIC_SetPriorityGrouping+0x44>)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	60d3      	str	r3, [r2, #12]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab4:	4b04      	ldr	r3, [pc, #16]	@ (8003ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	0a1b      	lsrs	r3, r3, #8
 8003aba:	f003 0307 	and.w	r3, r3, #7
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	db0b      	blt.n	8003af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	f003 021f 	and.w	r2, r3, #31
 8003ae4:	4907      	ldr	r1, [pc, #28]	@ (8003b04 <__NVIC_EnableIRQ+0x38>)
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	2001      	movs	r0, #1
 8003aee:	fa00 f202 	lsl.w	r2, r0, r2
 8003af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	e000e100 	.word	0xe000e100

08003b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	6039      	str	r1, [r7, #0]
 8003b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	db0a      	blt.n	8003b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	490c      	ldr	r1, [pc, #48]	@ (8003b54 <__NVIC_SetPriority+0x4c>)
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	0112      	lsls	r2, r2, #4
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b30:	e00a      	b.n	8003b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4908      	ldr	r1, [pc, #32]	@ (8003b58 <__NVIC_SetPriority+0x50>)
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	3b04      	subs	r3, #4
 8003b40:	0112      	lsls	r2, r2, #4
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	440b      	add	r3, r1
 8003b46:	761a      	strb	r2, [r3, #24]
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	e000e100 	.word	0xe000e100
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b089      	sub	sp, #36	@ 0x24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f1c3 0307 	rsb	r3, r3, #7
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	bf28      	it	cs
 8003b7a:	2304      	movcs	r3, #4
 8003b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	3304      	adds	r3, #4
 8003b82:	2b06      	cmp	r3, #6
 8003b84:	d902      	bls.n	8003b8c <NVIC_EncodePriority+0x30>
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3b03      	subs	r3, #3
 8003b8a:	e000      	b.n	8003b8e <NVIC_EncodePriority+0x32>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b90:	f04f 32ff 	mov.w	r2, #4294967295
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43da      	mvns	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	43d9      	mvns	r1, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb4:	4313      	orrs	r3, r2
         );
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3724      	adds	r7, #36	@ 0x24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bd4:	d301      	bcc.n	8003bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e00f      	b.n	8003bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bda:	4a0a      	ldr	r2, [pc, #40]	@ (8003c04 <SysTick_Config+0x40>)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3b01      	subs	r3, #1
 8003be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003be2:	210f      	movs	r1, #15
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295
 8003be8:	f7ff ff8e 	bl	8003b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bec:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <SysTick_Config+0x40>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bf2:	4b04      	ldr	r3, [pc, #16]	@ (8003c04 <SysTick_Config+0x40>)
 8003bf4:	2207      	movs	r2, #7
 8003bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	e000e010 	.word	0xe000e010

08003c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ff29 	bl	8003a68 <__NVIC_SetPriorityGrouping>
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b086      	sub	sp, #24
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	4603      	mov	r3, r0
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
 8003c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c30:	f7ff ff3e 	bl	8003ab0 <__NVIC_GetPriorityGrouping>
 8003c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	6978      	ldr	r0, [r7, #20]
 8003c3c:	f7ff ff8e 	bl	8003b5c <NVIC_EncodePriority>
 8003c40:	4602      	mov	r2, r0
 8003c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff ff5d 	bl	8003b08 <__NVIC_SetPriority>
}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff ff31 	bl	8003acc <__NVIC_EnableIRQ>
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff ffa2 	bl	8003bc4 <SysTick_Config>
 8003c80:	4603      	mov	r3, r0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b089      	sub	sp, #36	@ 0x24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	e159      	b.n	8003f5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ca8:	2201      	movs	r2, #1
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	f040 8148 	bne.w	8003f56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d005      	beq.n	8003cde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d130      	bne.n	8003d40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	2203      	movs	r2, #3
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d14:	2201      	movs	r2, #1
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 0201 	and.w	r2, r3, #1
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d017      	beq.n	8003d7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	2203      	movs	r2, #3
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d123      	bne.n	8003dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	08da      	lsrs	r2, r3, #3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3208      	adds	r2, #8
 8003d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	220f      	movs	r2, #15
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4013      	ands	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	08da      	lsrs	r2, r3, #3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3208      	adds	r2, #8
 8003dca:	69b9      	ldr	r1, [r7, #24]
 8003dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	2203      	movs	r2, #3
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0203 	and.w	r2, r3, #3
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80a2 	beq.w	8003f56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	4b57      	ldr	r3, [pc, #348]	@ (8003f74 <HAL_GPIO_Init+0x2e8>)
 8003e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1a:	4a56      	ldr	r2, [pc, #344]	@ (8003f74 <HAL_GPIO_Init+0x2e8>)
 8003e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e22:	4b54      	ldr	r3, [pc, #336]	@ (8003f74 <HAL_GPIO_Init+0x2e8>)
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e2e:	4a52      	ldr	r2, [pc, #328]	@ (8003f78 <HAL_GPIO_Init+0x2ec>)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	3302      	adds	r3, #2
 8003e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	220f      	movs	r2, #15
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a49      	ldr	r2, [pc, #292]	@ (8003f7c <HAL_GPIO_Init+0x2f0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d019      	beq.n	8003e8e <HAL_GPIO_Init+0x202>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a48      	ldr	r2, [pc, #288]	@ (8003f80 <HAL_GPIO_Init+0x2f4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <HAL_GPIO_Init+0x1fe>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a47      	ldr	r2, [pc, #284]	@ (8003f84 <HAL_GPIO_Init+0x2f8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00d      	beq.n	8003e86 <HAL_GPIO_Init+0x1fa>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a46      	ldr	r2, [pc, #280]	@ (8003f88 <HAL_GPIO_Init+0x2fc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d007      	beq.n	8003e82 <HAL_GPIO_Init+0x1f6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a45      	ldr	r2, [pc, #276]	@ (8003f8c <HAL_GPIO_Init+0x300>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_GPIO_Init+0x1f2>
 8003e7a:	2304      	movs	r3, #4
 8003e7c:	e008      	b.n	8003e90 <HAL_GPIO_Init+0x204>
 8003e7e:	2307      	movs	r3, #7
 8003e80:	e006      	b.n	8003e90 <HAL_GPIO_Init+0x204>
 8003e82:	2303      	movs	r3, #3
 8003e84:	e004      	b.n	8003e90 <HAL_GPIO_Init+0x204>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e002      	b.n	8003e90 <HAL_GPIO_Init+0x204>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_GPIO_Init+0x204>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	f002 0203 	and.w	r2, r2, #3
 8003e96:	0092      	lsls	r2, r2, #2
 8003e98:	4093      	lsls	r3, r2
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ea0:	4935      	ldr	r1, [pc, #212]	@ (8003f78 <HAL_GPIO_Init+0x2ec>)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	089b      	lsrs	r3, r3, #2
 8003ea6:	3302      	adds	r3, #2
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eae:	4b38      	ldr	r3, [pc, #224]	@ (8003f90 <HAL_GPIO_Init+0x304>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ed2:	4a2f      	ldr	r2, [pc, #188]	@ (8003f90 <HAL_GPIO_Init+0x304>)
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f90 <HAL_GPIO_Init+0x304>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003efc:	4a24      	ldr	r2, [pc, #144]	@ (8003f90 <HAL_GPIO_Init+0x304>)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f02:	4b23      	ldr	r3, [pc, #140]	@ (8003f90 <HAL_GPIO_Init+0x304>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f26:	4a1a      	ldr	r2, [pc, #104]	@ (8003f90 <HAL_GPIO_Init+0x304>)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f2c:	4b18      	ldr	r3, [pc, #96]	@ (8003f90 <HAL_GPIO_Init+0x304>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f50:	4a0f      	ldr	r2, [pc, #60]	@ (8003f90 <HAL_GPIO_Init+0x304>)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	2b0f      	cmp	r3, #15
 8003f60:	f67f aea2 	bls.w	8003ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	3724      	adds	r7, #36	@ 0x24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40013800 	.word	0x40013800
 8003f7c:	40020000 	.word	0x40020000
 8003f80:	40020400 	.word	0x40020400
 8003f84:	40020800 	.word	0x40020800
 8003f88:	40020c00 	.word	0x40020c00
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40013c00 	.word	0x40013c00

08003f94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	887b      	ldrh	r3, [r7, #2]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
 8003fb0:	e001      	b.n	8003fb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	807b      	strh	r3, [r7, #2]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fd4:	787b      	ldrb	r3, [r7, #1]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fda:	887a      	ldrh	r2, [r7, #2]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fe0:	e003      	b.n	8003fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fe2:	887b      	ldrh	r3, [r7, #2]
 8003fe4:	041a      	lsls	r2, r3, #16
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	619a      	str	r2, [r3, #24]
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e267      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d075      	beq.n	8004102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004016:	4b88      	ldr	r3, [pc, #544]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b04      	cmp	r3, #4
 8004020:	d00c      	beq.n	800403c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004022:	4b85      	ldr	r3, [pc, #532]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800402a:	2b08      	cmp	r3, #8
 800402c:	d112      	bne.n	8004054 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800402e:	4b82      	ldr	r3, [pc, #520]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004036:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800403a:	d10b      	bne.n	8004054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	4b7e      	ldr	r3, [pc, #504]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d05b      	beq.n	8004100 <HAL_RCC_OscConfig+0x108>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d157      	bne.n	8004100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e242      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800405c:	d106      	bne.n	800406c <HAL_RCC_OscConfig+0x74>
 800405e:	4b76      	ldr	r3, [pc, #472]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a75      	ldr	r2, [pc, #468]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e01d      	b.n	80040a8 <HAL_RCC_OscConfig+0xb0>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0x98>
 8004076:	4b70      	ldr	r3, [pc, #448]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6f      	ldr	r2, [pc, #444]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 800407c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b6d      	ldr	r3, [pc, #436]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a6c      	ldr	r2, [pc, #432]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e00b      	b.n	80040a8 <HAL_RCC_OscConfig+0xb0>
 8004090:	4b69      	ldr	r3, [pc, #420]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a68      	ldr	r2, [pc, #416]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 8004096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	4b66      	ldr	r3, [pc, #408]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a65      	ldr	r2, [pc, #404]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 80040a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d013      	beq.n	80040d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7ff fcaa 	bl	8003a08 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b8:	f7ff fca6 	bl	8003a08 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	@ 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e207      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0xc0>
 80040d6:	e014      	b.n	8004102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d8:	f7ff fc96 	bl	8003a08 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e0:	f7ff fc92 	bl	8003a08 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	@ 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e1f3      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f2:	4b51      	ldr	r3, [pc, #324]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0xe8>
 80040fe:	e000      	b.n	8004102 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d063      	beq.n	80041d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800410e:	4b4a      	ldr	r3, [pc, #296]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411a:	4b47      	ldr	r3, [pc, #284]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004122:	2b08      	cmp	r3, #8
 8004124:	d11c      	bne.n	8004160 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004126:	4b44      	ldr	r3, [pc, #272]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d116      	bne.n	8004160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004132:	4b41      	ldr	r3, [pc, #260]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_RCC_OscConfig+0x152>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d001      	beq.n	800414a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e1c7      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414a:	4b3b      	ldr	r3, [pc, #236]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4937      	ldr	r1, [pc, #220]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415e:	e03a      	b.n	80041d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004168:	4b34      	ldr	r3, [pc, #208]	@ (800423c <HAL_RCC_OscConfig+0x244>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7ff fc4b 	bl	8003a08 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004176:	f7ff fc47 	bl	8003a08 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e1a8      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004188:	4b2b      	ldr	r3, [pc, #172]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004194:	4b28      	ldr	r3, [pc, #160]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4925      	ldr	r1, [pc, #148]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	600b      	str	r3, [r1, #0]
 80041a8:	e015      	b.n	80041d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041aa:	4b24      	ldr	r3, [pc, #144]	@ (800423c <HAL_RCC_OscConfig+0x244>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7ff fc2a 	bl	8003a08 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b8:	f7ff fc26 	bl	8003a08 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e187      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d036      	beq.n	8004250 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ea:	4b15      	ldr	r3, [pc, #84]	@ (8004240 <HAL_RCC_OscConfig+0x248>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7ff fc0a 	bl	8003a08 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f8:	f7ff fc06 	bl	8003a08 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e167      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420a:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <HAL_RCC_OscConfig+0x240>)
 800420c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x200>
 8004216:	e01b      	b.n	8004250 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004218:	4b09      	ldr	r3, [pc, #36]	@ (8004240 <HAL_RCC_OscConfig+0x248>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421e:	f7ff fbf3 	bl	8003a08 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004224:	e00e      	b.n	8004244 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004226:	f7ff fbef 	bl	8003a08 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d907      	bls.n	8004244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e150      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
 8004238:	40023800 	.word	0x40023800
 800423c:	42470000 	.word	0x42470000
 8004240:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004244:	4b88      	ldr	r3, [pc, #544]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1ea      	bne.n	8004226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8097 	beq.w	800438c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425e:	2300      	movs	r3, #0
 8004260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004262:	4b81      	ldr	r3, [pc, #516]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10f      	bne.n	800428e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	4b7d      	ldr	r3, [pc, #500]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	4a7c      	ldr	r2, [pc, #496]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800427c:	6413      	str	r3, [r2, #64]	@ 0x40
 800427e:	4b7a      	ldr	r3, [pc, #488]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800428a:	2301      	movs	r3, #1
 800428c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428e:	4b77      	ldr	r3, [pc, #476]	@ (800446c <HAL_RCC_OscConfig+0x474>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d118      	bne.n	80042cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800429a:	4b74      	ldr	r3, [pc, #464]	@ (800446c <HAL_RCC_OscConfig+0x474>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a73      	ldr	r2, [pc, #460]	@ (800446c <HAL_RCC_OscConfig+0x474>)
 80042a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a6:	f7ff fbaf 	bl	8003a08 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ae:	f7ff fbab 	bl	8003a08 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e10c      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c0:	4b6a      	ldr	r3, [pc, #424]	@ (800446c <HAL_RCC_OscConfig+0x474>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d106      	bne.n	80042e2 <HAL_RCC_OscConfig+0x2ea>
 80042d4:	4b64      	ldr	r3, [pc, #400]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d8:	4a63      	ldr	r2, [pc, #396]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e0:	e01c      	b.n	800431c <HAL_RCC_OscConfig+0x324>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d10c      	bne.n	8004304 <HAL_RCC_OscConfig+0x30c>
 80042ea:	4b5f      	ldr	r3, [pc, #380]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ee:	4a5e      	ldr	r2, [pc, #376]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 80042f0:	f043 0304 	orr.w	r3, r3, #4
 80042f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fa:	4a5b      	ldr	r2, [pc, #364]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6713      	str	r3, [r2, #112]	@ 0x70
 8004302:	e00b      	b.n	800431c <HAL_RCC_OscConfig+0x324>
 8004304:	4b58      	ldr	r3, [pc, #352]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004308:	4a57      	ldr	r2, [pc, #348]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004310:	4b55      	ldr	r3, [pc, #340]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004314:	4a54      	ldr	r2, [pc, #336]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004316:	f023 0304 	bic.w	r3, r3, #4
 800431a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d015      	beq.n	8004350 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7ff fb70 	bl	8003a08 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432a:	e00a      	b.n	8004342 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432c:	f7ff fb6c 	bl	8003a08 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e0cb      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004342:	4b49      	ldr	r3, [pc, #292]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0ee      	beq.n	800432c <HAL_RCC_OscConfig+0x334>
 800434e:	e014      	b.n	800437a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004350:	f7ff fb5a 	bl	8003a08 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004356:	e00a      	b.n	800436e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004358:	f7ff fb56 	bl	8003a08 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e0b5      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800436e:	4b3e      	ldr	r3, [pc, #248]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1ee      	bne.n	8004358 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800437a:	7dfb      	ldrb	r3, [r7, #23]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d105      	bne.n	800438c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004380:	4b39      	ldr	r3, [pc, #228]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004384:	4a38      	ldr	r2, [pc, #224]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800438a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80a1 	beq.w	80044d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004396:	4b34      	ldr	r3, [pc, #208]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d05c      	beq.n	800445c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d141      	bne.n	800442e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043aa:	4b31      	ldr	r3, [pc, #196]	@ (8004470 <HAL_RCC_OscConfig+0x478>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b0:	f7ff fb2a 	bl	8003a08 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b8:	f7ff fb26 	bl	8003a08 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e087      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ca:	4b27      	ldr	r3, [pc, #156]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69da      	ldr	r2, [r3, #28]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	019b      	lsls	r3, r3, #6
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	3b01      	subs	r3, #1
 80043f0:	041b      	lsls	r3, r3, #16
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f8:	061b      	lsls	r3, r3, #24
 80043fa:	491b      	ldr	r1, [pc, #108]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004400:	4b1b      	ldr	r3, [pc, #108]	@ (8004470 <HAL_RCC_OscConfig+0x478>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004406:	f7ff faff 	bl	8003a08 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440e:	f7ff fafb 	bl	8003a08 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e05c      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004420:	4b11      	ldr	r3, [pc, #68]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x416>
 800442c:	e054      	b.n	80044d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442e:	4b10      	ldr	r3, [pc, #64]	@ (8004470 <HAL_RCC_OscConfig+0x478>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7ff fae8 	bl	8003a08 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443c:	f7ff fae4 	bl	8003a08 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e045      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444e:	4b06      	ldr	r3, [pc, #24]	@ (8004468 <HAL_RCC_OscConfig+0x470>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x444>
 800445a:	e03d      	b.n	80044d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d107      	bne.n	8004474 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e038      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
 8004468:	40023800 	.word	0x40023800
 800446c:	40007000 	.word	0x40007000
 8004470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004474:	4b1b      	ldr	r3, [pc, #108]	@ (80044e4 <HAL_RCC_OscConfig+0x4ec>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d028      	beq.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d121      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d11a      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044a4:	4013      	ands	r3, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d111      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	3b01      	subs	r3, #1
 80044be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d107      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40023800 	.word	0x40023800

080044e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0cc      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044fc:	4b68      	ldr	r3, [pc, #416]	@ (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d90c      	bls.n	8004524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b65      	ldr	r3, [pc, #404]	@ (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004512:	4b63      	ldr	r3, [pc, #396]	@ (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d001      	beq.n	8004524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0b8      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d020      	beq.n	8004572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800453c:	4b59      	ldr	r3, [pc, #356]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4a58      	ldr	r2, [pc, #352]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004546:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004554:	4b53      	ldr	r3, [pc, #332]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4a52      	ldr	r2, [pc, #328]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800455e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004560:	4b50      	ldr	r3, [pc, #320]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	494d      	ldr	r1, [pc, #308]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d044      	beq.n	8004608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d107      	bne.n	8004596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	4b47      	ldr	r3, [pc, #284]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d119      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e07f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d003      	beq.n	80045a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a6:	4b3f      	ldr	r3, [pc, #252]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e06f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b6:	4b3b      	ldr	r3, [pc, #236]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e067      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c6:	4b37      	ldr	r3, [pc, #220]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4934      	ldr	r1, [pc, #208]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d8:	f7ff fa16 	bl	8003a08 <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e0:	f7ff fa12 	bl	8003a08 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e04f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f6:	4b2b      	ldr	r3, [pc, #172]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 020c 	and.w	r2, r3, #12
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	429a      	cmp	r2, r3
 8004606:	d1eb      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004608:	4b25      	ldr	r3, [pc, #148]	@ (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d20c      	bcs.n	8004630 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b22      	ldr	r3, [pc, #136]	@ (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b20      	ldr	r3, [pc, #128]	@ (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e032      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800463c:	4b19      	ldr	r3, [pc, #100]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4916      	ldr	r1, [pc, #88]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800465a:	4b12      	ldr	r3, [pc, #72]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	490e      	ldr	r1, [pc, #56]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800466e:	f000 f821 	bl	80046b4 <HAL_RCC_GetSysClockFreq>
 8004672:	4602      	mov	r2, r0
 8004674:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	490a      	ldr	r1, [pc, #40]	@ (80046a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	5ccb      	ldrb	r3, [r1, r3]
 8004682:	fa22 f303 	lsr.w	r3, r2, r3
 8004686:	4a09      	ldr	r2, [pc, #36]	@ (80046ac <HAL_RCC_ClockConfig+0x1c4>)
 8004688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800468a:	4b09      	ldr	r3, [pc, #36]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff f976 	bl	8003980 <HAL_InitTick>

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40023c00 	.word	0x40023c00
 80046a4:	40023800 	.word	0x40023800
 80046a8:	0801b514 	.word	0x0801b514
 80046ac:	2000007c 	.word	0x2000007c
 80046b0:	20000080 	.word	0x20000080

080046b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b8:	b090      	sub	sp, #64	@ 0x40
 80046ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046cc:	4b59      	ldr	r3, [pc, #356]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d00d      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0x40>
 80046d8:	2b08      	cmp	r3, #8
 80046da:	f200 80a1 	bhi.w	8004820 <HAL_RCC_GetSysClockFreq+0x16c>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x34>
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d003      	beq.n	80046ee <HAL_RCC_GetSysClockFreq+0x3a>
 80046e6:	e09b      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e8:	4b53      	ldr	r3, [pc, #332]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x184>)
 80046ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046ec:	e09b      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ee:	4b53      	ldr	r3, [pc, #332]	@ (800483c <HAL_RCC_GetSysClockFreq+0x188>)
 80046f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046f2:	e098      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x180>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x180>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d028      	beq.n	800475c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470a:	4b4a      	ldr	r3, [pc, #296]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x180>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	099b      	lsrs	r3, r3, #6
 8004710:	2200      	movs	r2, #0
 8004712:	623b      	str	r3, [r7, #32]
 8004714:	627a      	str	r2, [r7, #36]	@ 0x24
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800471c:	2100      	movs	r1, #0
 800471e:	4b47      	ldr	r3, [pc, #284]	@ (800483c <HAL_RCC_GetSysClockFreq+0x188>)
 8004720:	fb03 f201 	mul.w	r2, r3, r1
 8004724:	2300      	movs	r3, #0
 8004726:	fb00 f303 	mul.w	r3, r0, r3
 800472a:	4413      	add	r3, r2
 800472c:	4a43      	ldr	r2, [pc, #268]	@ (800483c <HAL_RCC_GetSysClockFreq+0x188>)
 800472e:	fba0 1202 	umull	r1, r2, r0, r2
 8004732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004734:	460a      	mov	r2, r1
 8004736:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800473a:	4413      	add	r3, r2
 800473c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800473e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004740:	2200      	movs	r2, #0
 8004742:	61bb      	str	r3, [r7, #24]
 8004744:	61fa      	str	r2, [r7, #28]
 8004746:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800474a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800474e:	f7fc f8cd 	bl	80008ec <__aeabi_uldivmod>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4613      	mov	r3, r2
 8004758:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800475a:	e053      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475c:	4b35      	ldr	r3, [pc, #212]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x180>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	099b      	lsrs	r3, r3, #6
 8004762:	2200      	movs	r2, #0
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	617a      	str	r2, [r7, #20]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800476e:	f04f 0b00 	mov.w	fp, #0
 8004772:	4652      	mov	r2, sl
 8004774:	465b      	mov	r3, fp
 8004776:	f04f 0000 	mov.w	r0, #0
 800477a:	f04f 0100 	mov.w	r1, #0
 800477e:	0159      	lsls	r1, r3, #5
 8004780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004784:	0150      	lsls	r0, r2, #5
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	ebb2 080a 	subs.w	r8, r2, sl
 800478e:	eb63 090b 	sbc.w	r9, r3, fp
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800479e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047a6:	ebb2 0408 	subs.w	r4, r2, r8
 80047aa:	eb63 0509 	sbc.w	r5, r3, r9
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	00eb      	lsls	r3, r5, #3
 80047b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047bc:	00e2      	lsls	r2, r4, #3
 80047be:	4614      	mov	r4, r2
 80047c0:	461d      	mov	r5, r3
 80047c2:	eb14 030a 	adds.w	r3, r4, sl
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	eb45 030b 	adc.w	r3, r5, fp
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047da:	4629      	mov	r1, r5
 80047dc:	028b      	lsls	r3, r1, #10
 80047de:	4621      	mov	r1, r4
 80047e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047e4:	4621      	mov	r1, r4
 80047e6:	028a      	lsls	r2, r1, #10
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ee:	2200      	movs	r2, #0
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	60fa      	str	r2, [r7, #12]
 80047f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f8:	f7fc f878 	bl	80008ec <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4613      	mov	r3, r2
 8004802:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004804:	4b0b      	ldr	r3, [pc, #44]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x180>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	0c1b      	lsrs	r3, r3, #16
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	3301      	adds	r3, #1
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004814:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800481e:	e002      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004820:	4b05      	ldr	r3, [pc, #20]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x184>)
 8004822:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004828:	4618      	mov	r0, r3
 800482a:	3740      	adds	r7, #64	@ 0x40
 800482c:	46bd      	mov	sp, r7
 800482e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004832:	bf00      	nop
 8004834:	40023800 	.word	0x40023800
 8004838:	00f42400 	.word	0x00f42400
 800483c:	017d7840 	.word	0x017d7840

08004840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004844:	4b03      	ldr	r3, [pc, #12]	@ (8004854 <HAL_RCC_GetHCLKFreq+0x14>)
 8004846:	681b      	ldr	r3, [r3, #0]
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	2000007c 	.word	0x2000007c

08004858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800485c:	f7ff fff0 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	0a9b      	lsrs	r3, r3, #10
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4903      	ldr	r1, [pc, #12]	@ (800487c <HAL_RCC_GetPCLK1Freq+0x24>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40023800 	.word	0x40023800
 800487c:	0801b524 	.word	0x0801b524

08004880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004884:	f7ff ffdc 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 8004888:	4602      	mov	r2, r0
 800488a:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	0b5b      	lsrs	r3, r3, #13
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	4903      	ldr	r1, [pc, #12]	@ (80048a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004896:	5ccb      	ldrb	r3, [r1, r3]
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40023800 	.word	0x40023800
 80048a4:	0801b524 	.word	0x0801b524

080048a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e07b      	b.n	80049b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d108      	bne.n	80048d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048ca:	d009      	beq.n	80048e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	61da      	str	r2, [r3, #28]
 80048d2:	e005      	b.n	80048e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fe fe28 	bl	8003550 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004916:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004964:	ea42 0103 	orr.w	r1, r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	f003 0104 	and.w	r1, r3, #4
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	f003 0210 	and.w	r2, r3, #16
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b088      	sub	sp, #32
 80049be:	af00      	add	r7, sp, #0
 80049c0:	60f8      	str	r0, [r7, #12]
 80049c2:	60b9      	str	r1, [r7, #8]
 80049c4:	603b      	str	r3, [r7, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ca:	f7ff f81d 	bl	8003a08 <HAL_GetTick>
 80049ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80049d0:	88fb      	ldrh	r3, [r7, #6]
 80049d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d001      	beq.n	80049e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80049e0:	2302      	movs	r3, #2
 80049e2:	e12a      	b.n	8004c3a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_SPI_Transmit+0x36>
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e122      	b.n	8004c3a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_SPI_Transmit+0x48>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e11b      	b.n	8004c3a <HAL_SPI_Transmit+0x280>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	88fa      	ldrh	r2, [r7, #6]
 8004a22:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	88fa      	ldrh	r2, [r7, #6]
 8004a28:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a50:	d10f      	bne.n	8004a72 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a7c:	2b40      	cmp	r3, #64	@ 0x40
 8004a7e:	d007      	beq.n	8004a90 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a98:	d152      	bne.n	8004b40 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_SPI_Transmit+0xee>
 8004aa2:	8b7b      	ldrh	r3, [r7, #26]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d145      	bne.n	8004b34 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aac:	881a      	ldrh	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab8:	1c9a      	adds	r2, r3, #2
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004acc:	e032      	b.n	8004b34 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d112      	bne.n	8004b02 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae0:	881a      	ldrh	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aec:	1c9a      	adds	r2, r3, #2
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004b00:	e018      	b.n	8004b34 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b02:	f7fe ff81 	bl	8003a08 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d803      	bhi.n	8004b1a <HAL_SPI_Transmit+0x160>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b18:	d102      	bne.n	8004b20 <HAL_SPI_Transmit+0x166>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e082      	b.n	8004c3a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1c7      	bne.n	8004ace <HAL_SPI_Transmit+0x114>
 8004b3e:	e053      	b.n	8004be8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <HAL_SPI_Transmit+0x194>
 8004b48:	8b7b      	ldrh	r3, [r7, #26]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d147      	bne.n	8004bde <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	7812      	ldrb	r2, [r2, #0]
 8004b5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b74:	e033      	b.n	8004bde <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d113      	bne.n	8004bac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	7812      	ldrb	r2, [r2, #0]
 8004b90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004baa:	e018      	b.n	8004bde <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bac:	f7fe ff2c 	bl	8003a08 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d803      	bhi.n	8004bc4 <HAL_SPI_Transmit+0x20a>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc2:	d102      	bne.n	8004bca <HAL_SPI_Transmit+0x210>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e02d      	b.n	8004c3a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1c6      	bne.n	8004b76 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	6839      	ldr	r1, [r7, #0]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 fa59 	bl	80050a4 <SPI_EndRxTxTransaction>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10a      	bne.n	8004c1c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004c38:	2300      	movs	r3, #0
  }
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b08a      	sub	sp, #40	@ 0x28
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	607a      	str	r2, [r7, #4]
 8004c4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c50:	2301      	movs	r3, #1
 8004c52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c54:	f7fe fed8 	bl	8003a08 <HAL_GetTick>
 8004c58:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c60:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004c68:	887b      	ldrh	r3, [r7, #2]
 8004c6a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c6c:	7ffb      	ldrb	r3, [r7, #31]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d00c      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x4a>
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c78:	d106      	bne.n	8004c88 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d102      	bne.n	8004c88 <HAL_SPI_TransmitReceive+0x46>
 8004c82:	7ffb      	ldrb	r3, [r7, #31]
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d001      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e17f      	b.n	8004f8c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0x5c>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0x5c>
 8004c98:	887b      	ldrh	r3, [r7, #2]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e174      	b.n	8004f8c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_SPI_TransmitReceive+0x6e>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e16d      	b.n	8004f8c <HAL_SPI_TransmitReceive+0x34a>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d003      	beq.n	8004ccc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2205      	movs	r2, #5
 8004cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	887a      	ldrh	r2, [r7, #2]
 8004cdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	887a      	ldrh	r2, [r7, #2]
 8004ce2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	887a      	ldrh	r2, [r7, #2]
 8004cee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	887a      	ldrh	r2, [r7, #2]
 8004cf4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0c:	2b40      	cmp	r3, #64	@ 0x40
 8004d0e:	d007      	beq.n	8004d20 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d28:	d17e      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_SPI_TransmitReceive+0xf6>
 8004d32:	8afb      	ldrh	r3, [r7, #22]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d16c      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3c:	881a      	ldrh	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d48:	1c9a      	adds	r2, r3, #2
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d5c:	e059      	b.n	8004e12 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d11b      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x162>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <HAL_SPI_TransmitReceive+0x162>
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d113      	bne.n	8004da4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d80:	881a      	ldrh	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8c:	1c9a      	adds	r2, r3, #2
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d119      	bne.n	8004de6 <HAL_SPI_TransmitReceive+0x1a4>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d014      	beq.n	8004de6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc6:	b292      	uxth	r2, r2
 8004dc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	1c9a      	adds	r2, r3, #2
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004de2:	2301      	movs	r3, #1
 8004de4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004de6:	f7fe fe0f 	bl	8003a08 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d80d      	bhi.n	8004e12 <HAL_SPI_TransmitReceive+0x1d0>
 8004df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d009      	beq.n	8004e12 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e0bc      	b.n	8004f8c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1a0      	bne.n	8004d5e <HAL_SPI_TransmitReceive+0x11c>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d19b      	bne.n	8004d5e <HAL_SPI_TransmitReceive+0x11c>
 8004e26:	e082      	b.n	8004f2e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <HAL_SPI_TransmitReceive+0x1f4>
 8004e30:	8afb      	ldrh	r3, [r7, #22]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d171      	bne.n	8004f1a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	330c      	adds	r3, #12
 8004e40:	7812      	ldrb	r2, [r2, #0]
 8004e42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e5c:	e05d      	b.n	8004f1a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d11c      	bne.n	8004ea6 <HAL_SPI_TransmitReceive+0x264>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d017      	beq.n	8004ea6 <HAL_SPI_TransmitReceive+0x264>
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d114      	bne.n	8004ea6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	7812      	ldrb	r2, [r2, #0]
 8004e88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d119      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x2a6>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d014      	beq.n	8004ee8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ee8:	f7fe fd8e 	bl	8003a08 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d803      	bhi.n	8004f00 <HAL_SPI_TransmitReceive+0x2be>
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d102      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x2c4>
 8004f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e038      	b.n	8004f8c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d19c      	bne.n	8004e5e <HAL_SPI_TransmitReceive+0x21c>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d197      	bne.n	8004e5e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f2e:	6a3a      	ldr	r2, [r7, #32]
 8004f30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f8b6 	bl	80050a4 <SPI_EndRxTxTransaction>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e01d      	b.n	8004f8c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f58:	2300      	movs	r3, #0
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
  }
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3728      	adds	r7, #40	@ 0x28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fa4:	f7fe fd30 	bl	8003a08 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fac:	1a9b      	subs	r3, r3, r2
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fb4:	f7fe fd28 	bl	8003a08 <HAL_GetTick>
 8004fb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fba:	4b39      	ldr	r3, [pc, #228]	@ (80050a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	015b      	lsls	r3, r3, #5
 8004fc0:	0d1b      	lsrs	r3, r3, #20
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	fb02 f303 	mul.w	r3, r2, r3
 8004fc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fca:	e055      	b.n	8005078 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d051      	beq.n	8005078 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fd4:	f7fe fd18 	bl	8003a08 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d902      	bls.n	8004fea <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d13d      	bne.n	8005066 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ff8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005002:	d111      	bne.n	8005028 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800500c:	d004      	beq.n	8005018 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005016:	d107      	bne.n	8005028 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005030:	d10f      	bne.n	8005052 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e018      	b.n	8005098 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d102      	bne.n	8005072 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	e002      	b.n	8005078 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	3b01      	subs	r3, #1
 8005076:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4013      	ands	r3, r2
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	429a      	cmp	r2, r3
 8005086:	bf0c      	ite	eq
 8005088:	2301      	moveq	r3, #1
 800508a:	2300      	movne	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	79fb      	ldrb	r3, [r7, #7]
 8005092:	429a      	cmp	r2, r3
 8005094:	d19a      	bne.n	8004fcc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3720      	adds	r7, #32
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	2000007c 	.word	0x2000007c

080050a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2201      	movs	r2, #1
 80050b8:	2102      	movs	r1, #2
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7ff ff6a 	bl	8004f94 <SPI_WaitFlagStateUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ca:	f043 0220 	orr.w	r2, r3, #32
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e032      	b.n	800513c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005144 <SPI_EndRxTxTransaction+0xa0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1b      	ldr	r2, [pc, #108]	@ (8005148 <SPI_EndRxTxTransaction+0xa4>)
 80050dc:	fba2 2303 	umull	r2, r3, r2, r3
 80050e0:	0d5b      	lsrs	r3, r3, #21
 80050e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80050e6:	fb02 f303 	mul.w	r3, r2, r3
 80050ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050f4:	d112      	bne.n	800511c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2200      	movs	r2, #0
 80050fe:	2180      	movs	r1, #128	@ 0x80
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f7ff ff47 	bl	8004f94 <SPI_WaitFlagStateUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d016      	beq.n	800513a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005110:	f043 0220 	orr.w	r2, r3, #32
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e00f      	b.n	800513c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	3b01      	subs	r3, #1
 8005126:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005132:	2b80      	cmp	r3, #128	@ 0x80
 8005134:	d0f2      	beq.n	800511c <SPI_EndRxTxTransaction+0x78>
 8005136:	e000      	b.n	800513a <SPI_EndRxTxTransaction+0x96>
        break;
 8005138:	bf00      	nop
  }

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	2000007c 	.word	0x2000007c
 8005148:	165e9f81 	.word	0x165e9f81

0800514c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b01      	cmp	r3, #1
 800515e:	d001      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e044      	b.n	80051ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1e      	ldr	r2, [pc, #120]	@ (80051fc <HAL_TIM_Base_Start_IT+0xb0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d018      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x6c>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518e:	d013      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x6c>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1a      	ldr	r2, [pc, #104]	@ (8005200 <HAL_TIM_Base_Start_IT+0xb4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00e      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x6c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a19      	ldr	r2, [pc, #100]	@ (8005204 <HAL_TIM_Base_Start_IT+0xb8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d009      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x6c>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a17      	ldr	r2, [pc, #92]	@ (8005208 <HAL_TIM_Base_Start_IT+0xbc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d004      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x6c>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a16      	ldr	r2, [pc, #88]	@ (800520c <HAL_TIM_Base_Start_IT+0xc0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d111      	bne.n	80051dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b06      	cmp	r3, #6
 80051c8:	d010      	beq.n	80051ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051da:	e007      	b.n	80051ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40010000 	.word	0x40010000
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40014000 	.word	0x40014000

08005210 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e041      	b.n	80052a6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fe fa08 	bl	800364c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f000 fb62 	bl	8005918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e041      	b.n	8005344 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7fe f9e1 	bl	800369c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3304      	adds	r3, #4
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f000 fb13 	bl	8005918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d109      	bne.n	8005370 <HAL_TIM_PWM_Start+0x24>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e022      	b.n	80053b6 <HAL_TIM_PWM_Start+0x6a>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b04      	cmp	r3, #4
 8005374:	d109      	bne.n	800538a <HAL_TIM_PWM_Start+0x3e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	bf14      	ite	ne
 8005382:	2301      	movne	r3, #1
 8005384:	2300      	moveq	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	e015      	b.n	80053b6 <HAL_TIM_PWM_Start+0x6a>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d109      	bne.n	80053a4 <HAL_TIM_PWM_Start+0x58>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	bf14      	ite	ne
 800539c:	2301      	movne	r3, #1
 800539e:	2300      	moveq	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e008      	b.n	80053b6 <HAL_TIM_PWM_Start+0x6a>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	bf14      	ite	ne
 80053b0:	2301      	movne	r3, #1
 80053b2:	2300      	moveq	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e068      	b.n	8005490 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_PWM_Start+0x82>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053cc:	e013      	b.n	80053f6 <HAL_TIM_PWM_Start+0xaa>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d104      	bne.n	80053de <HAL_TIM_PWM_Start+0x92>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053dc:	e00b      	b.n	80053f6 <HAL_TIM_PWM_Start+0xaa>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_PWM_Start+0xa2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053ec:	e003      	b.n	80053f6 <HAL_TIM_PWM_Start+0xaa>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2201      	movs	r2, #1
 80053fc:	6839      	ldr	r1, [r7, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fc9c 	bl	8005d3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a23      	ldr	r2, [pc, #140]	@ (8005498 <HAL_TIM_PWM_Start+0x14c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d107      	bne.n	800541e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800541c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1d      	ldr	r2, [pc, #116]	@ (8005498 <HAL_TIM_PWM_Start+0x14c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d018      	beq.n	800545a <HAL_TIM_PWM_Start+0x10e>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005430:	d013      	beq.n	800545a <HAL_TIM_PWM_Start+0x10e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a19      	ldr	r2, [pc, #100]	@ (800549c <HAL_TIM_PWM_Start+0x150>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_TIM_PWM_Start+0x10e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a17      	ldr	r2, [pc, #92]	@ (80054a0 <HAL_TIM_PWM_Start+0x154>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_TIM_PWM_Start+0x10e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a16      	ldr	r2, [pc, #88]	@ (80054a4 <HAL_TIM_PWM_Start+0x158>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIM_PWM_Start+0x10e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a14      	ldr	r2, [pc, #80]	@ (80054a8 <HAL_TIM_PWM_Start+0x15c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d111      	bne.n	800547e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b06      	cmp	r3, #6
 800546a:	d010      	beq.n	800548e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547c:	e007      	b.n	800548e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0201 	orr.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40010000 	.word	0x40010000
 800549c:	40000400 	.word	0x40000400
 80054a0:	40000800 	.word	0x40000800
 80054a4:	40000c00 	.word	0x40000c00
 80054a8:	40014000 	.word	0x40014000

080054ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d020      	beq.n	8005510 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01b      	beq.n	8005510 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0202 	mvn.w	r2, #2
 80054e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f9f0 	bl	80058dc <HAL_TIM_IC_CaptureCallback>
 80054fc:	e005      	b.n	800550a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f9e2 	bl	80058c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f9f3 	bl	80058f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	d020      	beq.n	800555c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01b      	beq.n	800555c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0204 	mvn.w	r2, #4
 800552c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2202      	movs	r2, #2
 8005532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f9ca 	bl	80058dc <HAL_TIM_IC_CaptureCallback>
 8005548:	e005      	b.n	8005556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f9bc 	bl	80058c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f9cd 	bl	80058f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d020      	beq.n	80055a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01b      	beq.n	80055a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0208 	mvn.w	r2, #8
 8005578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2204      	movs	r2, #4
 800557e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f9a4 	bl	80058dc <HAL_TIM_IC_CaptureCallback>
 8005594:	e005      	b.n	80055a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f996 	bl	80058c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f9a7 	bl	80058f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d020      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f003 0310 	and.w	r3, r3, #16
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01b      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0210 	mvn.w	r2, #16
 80055c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2208      	movs	r2, #8
 80055ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f97e 	bl	80058dc <HAL_TIM_IC_CaptureCallback>
 80055e0:	e005      	b.n	80055ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f970 	bl	80058c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f981 	bl	80058f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00c      	beq.n	8005618 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0201 	mvn.w	r2, #1
 8005610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fb feda 	bl	80013cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00c      	beq.n	800563c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fc1e 	bl	8005e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00c      	beq.n	8005660 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d007      	beq.n	8005660 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f952 	bl	8005904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00c      	beq.n	8005684 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0220 	mvn.w	r2, #32
 800567c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fbf0 	bl	8005e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005684:	bf00      	nop
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_TIM_OC_ConfigChannel+0x1e>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e048      	b.n	800573c <HAL_TIM_OC_ConfigChannel+0xb0>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b0c      	cmp	r3, #12
 80056b6:	d839      	bhi.n	800572c <HAL_TIM_OC_ConfigChannel+0xa0>
 80056b8:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80056ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056be:	bf00      	nop
 80056c0:	080056f5 	.word	0x080056f5
 80056c4:	0800572d 	.word	0x0800572d
 80056c8:	0800572d 	.word	0x0800572d
 80056cc:	0800572d 	.word	0x0800572d
 80056d0:	08005703 	.word	0x08005703
 80056d4:	0800572d 	.word	0x0800572d
 80056d8:	0800572d 	.word	0x0800572d
 80056dc:	0800572d 	.word	0x0800572d
 80056e0:	08005711 	.word	0x08005711
 80056e4:	0800572d 	.word	0x0800572d
 80056e8:	0800572d 	.word	0x0800572d
 80056ec:	0800572d 	.word	0x0800572d
 80056f0:	0800571f 	.word	0x0800571f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 f992 	bl	8005a24 <TIM_OC1_SetConfig>
      break;
 8005700:	e017      	b.n	8005732 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	4618      	mov	r0, r3
 800570a:	f000 f9f1 	bl	8005af0 <TIM_OC2_SetConfig>
      break;
 800570e:	e010      	b.n	8005732 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fa56 	bl	8005bc8 <TIM_OC3_SetConfig>
      break;
 800571c:	e009      	b.n	8005732 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fab9 	bl	8005c9c <TIM_OC4_SetConfig>
      break;
 800572a:	e002      	b.n	8005732 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	75fb      	strb	r3, [r7, #23]
      break;
 8005730:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800573a:	7dfb      	ldrb	r3, [r7, #23]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800575e:	2302      	movs	r3, #2
 8005760:	e0ae      	b.n	80058c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b0c      	cmp	r3, #12
 800576e:	f200 809f 	bhi.w	80058b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005772:	a201      	add	r2, pc, #4	@ (adr r2, 8005778 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005778:	080057ad 	.word	0x080057ad
 800577c:	080058b1 	.word	0x080058b1
 8005780:	080058b1 	.word	0x080058b1
 8005784:	080058b1 	.word	0x080058b1
 8005788:	080057ed 	.word	0x080057ed
 800578c:	080058b1 	.word	0x080058b1
 8005790:	080058b1 	.word	0x080058b1
 8005794:	080058b1 	.word	0x080058b1
 8005798:	0800582f 	.word	0x0800582f
 800579c:	080058b1 	.word	0x080058b1
 80057a0:	080058b1 	.word	0x080058b1
 80057a4:	080058b1 	.word	0x080058b1
 80057a8:	0800586f 	.word	0x0800586f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 f936 	bl	8005a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0208 	orr.w	r2, r2, #8
 80057c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0204 	bic.w	r2, r2, #4
 80057d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6999      	ldr	r1, [r3, #24]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	619a      	str	r2, [r3, #24]
      break;
 80057ea:	e064      	b.n	80058b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 f97c 	bl	8005af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6999      	ldr	r1, [r3, #24]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	021a      	lsls	r2, r3, #8
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	619a      	str	r2, [r3, #24]
      break;
 800582c:	e043      	b.n	80058b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68b9      	ldr	r1, [r7, #8]
 8005834:	4618      	mov	r0, r3
 8005836:	f000 f9c7 	bl	8005bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0208 	orr.w	r2, r2, #8
 8005848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69da      	ldr	r2, [r3, #28]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0204 	bic.w	r2, r2, #4
 8005858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69d9      	ldr	r1, [r3, #28]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	61da      	str	r2, [r3, #28]
      break;
 800586c:	e023      	b.n	80058b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fa11 	bl	8005c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69d9      	ldr	r1, [r3, #28]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	021a      	lsls	r2, r3, #8
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	61da      	str	r2, [r3, #28]
      break;
 80058ae:	e002      	b.n	80058b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	75fb      	strb	r3, [r7, #23]
      break;
 80058b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058be:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a37      	ldr	r2, [pc, #220]	@ (8005a08 <TIM_Base_SetConfig+0xf0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00f      	beq.n	8005950 <TIM_Base_SetConfig+0x38>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005936:	d00b      	beq.n	8005950 <TIM_Base_SetConfig+0x38>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a34      	ldr	r2, [pc, #208]	@ (8005a0c <TIM_Base_SetConfig+0xf4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d007      	beq.n	8005950 <TIM_Base_SetConfig+0x38>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a33      	ldr	r2, [pc, #204]	@ (8005a10 <TIM_Base_SetConfig+0xf8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_Base_SetConfig+0x38>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a32      	ldr	r2, [pc, #200]	@ (8005a14 <TIM_Base_SetConfig+0xfc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d108      	bne.n	8005962 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a28      	ldr	r2, [pc, #160]	@ (8005a08 <TIM_Base_SetConfig+0xf0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d01b      	beq.n	80059a2 <TIM_Base_SetConfig+0x8a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005970:	d017      	beq.n	80059a2 <TIM_Base_SetConfig+0x8a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a25      	ldr	r2, [pc, #148]	@ (8005a0c <TIM_Base_SetConfig+0xf4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d013      	beq.n	80059a2 <TIM_Base_SetConfig+0x8a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a24      	ldr	r2, [pc, #144]	@ (8005a10 <TIM_Base_SetConfig+0xf8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00f      	beq.n	80059a2 <TIM_Base_SetConfig+0x8a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a23      	ldr	r2, [pc, #140]	@ (8005a14 <TIM_Base_SetConfig+0xfc>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00b      	beq.n	80059a2 <TIM_Base_SetConfig+0x8a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a22      	ldr	r2, [pc, #136]	@ (8005a18 <TIM_Base_SetConfig+0x100>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d007      	beq.n	80059a2 <TIM_Base_SetConfig+0x8a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a21      	ldr	r2, [pc, #132]	@ (8005a1c <TIM_Base_SetConfig+0x104>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_Base_SetConfig+0x8a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a20      	ldr	r2, [pc, #128]	@ (8005a20 <TIM_Base_SetConfig+0x108>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d108      	bne.n	80059b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005a08 <TIM_Base_SetConfig+0xf0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d103      	bne.n	80059e2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f043 0204 	orr.w	r2, r3, #4
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	601a      	str	r2, [r3, #0]
}
 80059fa:	bf00      	nop
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40010000 	.word	0x40010000
 8005a0c:	40000400 	.word	0x40000400
 8005a10:	40000800 	.word	0x40000800
 8005a14:	40000c00 	.word	0x40000c00
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	40014400 	.word	0x40014400
 8005a20:	40014800 	.word	0x40014800

08005a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	f023 0201 	bic.w	r2, r3, #1
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0303 	bic.w	r3, r3, #3
 8005a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f023 0302 	bic.w	r3, r3, #2
 8005a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8005aec <TIM_OC1_SetConfig+0xc8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d10c      	bne.n	8005a9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f023 0308 	bic.w	r3, r3, #8
 8005a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f023 0304 	bic.w	r3, r3, #4
 8005a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a13      	ldr	r2, [pc, #76]	@ (8005aec <TIM_OC1_SetConfig+0xc8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d111      	bne.n	8005ac6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	621a      	str	r2, [r3, #32]
}
 8005ae0:	bf00      	nop
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40010000 	.word	0x40010000

08005af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f023 0210 	bic.w	r2, r3, #16
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f023 0320 	bic.w	r3, r3, #32
 8005b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a1e      	ldr	r2, [pc, #120]	@ (8005bc4 <TIM_OC2_SetConfig+0xd4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d10d      	bne.n	8005b6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a15      	ldr	r2, [pc, #84]	@ (8005bc4 <TIM_OC2_SetConfig+0xd4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d113      	bne.n	8005b9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	621a      	str	r2, [r3, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40010000 	.word	0x40010000

08005bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0303 	bic.w	r3, r3, #3
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a1d      	ldr	r2, [pc, #116]	@ (8005c98 <TIM_OC3_SetConfig+0xd0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d10d      	bne.n	8005c42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a14      	ldr	r2, [pc, #80]	@ (8005c98 <TIM_OC3_SetConfig+0xd0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d113      	bne.n	8005c72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	621a      	str	r2, [r3, #32]
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	40010000 	.word	0x40010000

08005c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	031b      	lsls	r3, r3, #12
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a10      	ldr	r2, [pc, #64]	@ (8005d38 <TIM_OC4_SetConfig+0x9c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d109      	bne.n	8005d10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	019b      	lsls	r3, r3, #6
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40010000 	.word	0x40010000

08005d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	2201      	movs	r2, #1
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a1a      	ldr	r2, [r3, #32]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	401a      	ands	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a1a      	ldr	r2, [r3, #32]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f003 031f 	and.w	r3, r3, #31
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	fa01 f303 	lsl.w	r3, r1, r3
 8005d74:	431a      	orrs	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e050      	b.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1c      	ldr	r2, [pc, #112]	@ (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d018      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dec:	d013      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a18      	ldr	r2, [pc, #96]	@ (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00e      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a16      	ldr	r2, [pc, #88]	@ (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d009      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a15      	ldr	r2, [pc, #84]	@ (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d004      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a13      	ldr	r2, [pc, #76]	@ (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d10c      	bne.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800
 8005e5c:	40000c00 	.word	0x40000c00
 8005e60:	40014000 	.word	0x40014000

08005e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e042      	b.n	8005f24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d106      	bne.n	8005eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7fd fc4e 	bl	8003754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2224      	movs	r2, #36	@ 0x24
 8005ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f82b 	bl	8005f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f30:	b0c0      	sub	sp, #256	@ 0x100
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f48:	68d9      	ldr	r1, [r3, #12]
 8005f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	ea40 0301 	orr.w	r3, r0, r1
 8005f54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f84:	f021 010c 	bic.w	r1, r1, #12
 8005f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f92:	430b      	orrs	r3, r1
 8005f94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa6:	6999      	ldr	r1, [r3, #24]
 8005fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	ea40 0301 	orr.w	r3, r0, r1
 8005fb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	4b8f      	ldr	r3, [pc, #572]	@ (80061f8 <UART_SetConfig+0x2cc>)
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d005      	beq.n	8005fcc <UART_SetConfig+0xa0>
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4b8d      	ldr	r3, [pc, #564]	@ (80061fc <UART_SetConfig+0x2d0>)
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d104      	bne.n	8005fd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fcc:	f7fe fc58 	bl	8004880 <HAL_RCC_GetPCLK2Freq>
 8005fd0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005fd4:	e003      	b.n	8005fde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fd6:	f7fe fc3f 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 8005fda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fe8:	f040 810c 	bne.w	8006204 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ff6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ffa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ffe:	4622      	mov	r2, r4
 8006000:	462b      	mov	r3, r5
 8006002:	1891      	adds	r1, r2, r2
 8006004:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006006:	415b      	adcs	r3, r3
 8006008:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800600a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800600e:	4621      	mov	r1, r4
 8006010:	eb12 0801 	adds.w	r8, r2, r1
 8006014:	4629      	mov	r1, r5
 8006016:	eb43 0901 	adc.w	r9, r3, r1
 800601a:	f04f 0200 	mov.w	r2, #0
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800602a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800602e:	4690      	mov	r8, r2
 8006030:	4699      	mov	r9, r3
 8006032:	4623      	mov	r3, r4
 8006034:	eb18 0303 	adds.w	r3, r8, r3
 8006038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800603c:	462b      	mov	r3, r5
 800603e:	eb49 0303 	adc.w	r3, r9, r3
 8006042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006052:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006056:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800605a:	460b      	mov	r3, r1
 800605c:	18db      	adds	r3, r3, r3
 800605e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006060:	4613      	mov	r3, r2
 8006062:	eb42 0303 	adc.w	r3, r2, r3
 8006066:	657b      	str	r3, [r7, #84]	@ 0x54
 8006068:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800606c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006070:	f7fa fc3c 	bl	80008ec <__aeabi_uldivmod>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4b61      	ldr	r3, [pc, #388]	@ (8006200 <UART_SetConfig+0x2d4>)
 800607a:	fba3 2302 	umull	r2, r3, r3, r2
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	011c      	lsls	r4, r3, #4
 8006082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006086:	2200      	movs	r2, #0
 8006088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800608c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006090:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006094:	4642      	mov	r2, r8
 8006096:	464b      	mov	r3, r9
 8006098:	1891      	adds	r1, r2, r2
 800609a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800609c:	415b      	adcs	r3, r3
 800609e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80060a4:	4641      	mov	r1, r8
 80060a6:	eb12 0a01 	adds.w	sl, r2, r1
 80060aa:	4649      	mov	r1, r9
 80060ac:	eb43 0b01 	adc.w	fp, r3, r1
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060c4:	4692      	mov	sl, r2
 80060c6:	469b      	mov	fp, r3
 80060c8:	4643      	mov	r3, r8
 80060ca:	eb1a 0303 	adds.w	r3, sl, r3
 80060ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060d2:	464b      	mov	r3, r9
 80060d4:	eb4b 0303 	adc.w	r3, fp, r3
 80060d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80060ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80060f0:	460b      	mov	r3, r1
 80060f2:	18db      	adds	r3, r3, r3
 80060f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80060f6:	4613      	mov	r3, r2
 80060f8:	eb42 0303 	adc.w	r3, r2, r3
 80060fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80060fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006102:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006106:	f7fa fbf1 	bl	80008ec <__aeabi_uldivmod>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4611      	mov	r1, r2
 8006110:	4b3b      	ldr	r3, [pc, #236]	@ (8006200 <UART_SetConfig+0x2d4>)
 8006112:	fba3 2301 	umull	r2, r3, r3, r1
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	2264      	movs	r2, #100	@ 0x64
 800611a:	fb02 f303 	mul.w	r3, r2, r3
 800611e:	1acb      	subs	r3, r1, r3
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006126:	4b36      	ldr	r3, [pc, #216]	@ (8006200 <UART_SetConfig+0x2d4>)
 8006128:	fba3 2302 	umull	r2, r3, r3, r2
 800612c:	095b      	lsrs	r3, r3, #5
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006134:	441c      	add	r4, r3
 8006136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800613a:	2200      	movs	r2, #0
 800613c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006140:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006144:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006148:	4642      	mov	r2, r8
 800614a:	464b      	mov	r3, r9
 800614c:	1891      	adds	r1, r2, r2
 800614e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006150:	415b      	adcs	r3, r3
 8006152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006154:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006158:	4641      	mov	r1, r8
 800615a:	1851      	adds	r1, r2, r1
 800615c:	6339      	str	r1, [r7, #48]	@ 0x30
 800615e:	4649      	mov	r1, r9
 8006160:	414b      	adcs	r3, r1
 8006162:	637b      	str	r3, [r7, #52]	@ 0x34
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006170:	4659      	mov	r1, fp
 8006172:	00cb      	lsls	r3, r1, #3
 8006174:	4651      	mov	r1, sl
 8006176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800617a:	4651      	mov	r1, sl
 800617c:	00ca      	lsls	r2, r1, #3
 800617e:	4610      	mov	r0, r2
 8006180:	4619      	mov	r1, r3
 8006182:	4603      	mov	r3, r0
 8006184:	4642      	mov	r2, r8
 8006186:	189b      	adds	r3, r3, r2
 8006188:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800618c:	464b      	mov	r3, r9
 800618e:	460a      	mov	r2, r1
 8006190:	eb42 0303 	adc.w	r3, r2, r3
 8006194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80061a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061ac:	460b      	mov	r3, r1
 80061ae:	18db      	adds	r3, r3, r3
 80061b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061b2:	4613      	mov	r3, r2
 80061b4:	eb42 0303 	adc.w	r3, r2, r3
 80061b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80061c2:	f7fa fb93 	bl	80008ec <__aeabi_uldivmod>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006200 <UART_SetConfig+0x2d4>)
 80061cc:	fba3 1302 	umull	r1, r3, r3, r2
 80061d0:	095b      	lsrs	r3, r3, #5
 80061d2:	2164      	movs	r1, #100	@ 0x64
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	3332      	adds	r3, #50	@ 0x32
 80061de:	4a08      	ldr	r2, [pc, #32]	@ (8006200 <UART_SetConfig+0x2d4>)
 80061e0:	fba2 2303 	umull	r2, r3, r2, r3
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	f003 0207 	and.w	r2, r3, #7
 80061ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4422      	add	r2, r4
 80061f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061f4:	e106      	b.n	8006404 <UART_SetConfig+0x4d8>
 80061f6:	bf00      	nop
 80061f8:	40011000 	.word	0x40011000
 80061fc:	40011400 	.word	0x40011400
 8006200:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006208:	2200      	movs	r2, #0
 800620a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800620e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006212:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006216:	4642      	mov	r2, r8
 8006218:	464b      	mov	r3, r9
 800621a:	1891      	adds	r1, r2, r2
 800621c:	6239      	str	r1, [r7, #32]
 800621e:	415b      	adcs	r3, r3
 8006220:	627b      	str	r3, [r7, #36]	@ 0x24
 8006222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006226:	4641      	mov	r1, r8
 8006228:	1854      	adds	r4, r2, r1
 800622a:	4649      	mov	r1, r9
 800622c:	eb43 0501 	adc.w	r5, r3, r1
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	00eb      	lsls	r3, r5, #3
 800623a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800623e:	00e2      	lsls	r2, r4, #3
 8006240:	4614      	mov	r4, r2
 8006242:	461d      	mov	r5, r3
 8006244:	4643      	mov	r3, r8
 8006246:	18e3      	adds	r3, r4, r3
 8006248:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800624c:	464b      	mov	r3, r9
 800624e:	eb45 0303 	adc.w	r3, r5, r3
 8006252:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006262:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006266:	f04f 0200 	mov.w	r2, #0
 800626a:	f04f 0300 	mov.w	r3, #0
 800626e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006272:	4629      	mov	r1, r5
 8006274:	008b      	lsls	r3, r1, #2
 8006276:	4621      	mov	r1, r4
 8006278:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800627c:	4621      	mov	r1, r4
 800627e:	008a      	lsls	r2, r1, #2
 8006280:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006284:	f7fa fb32 	bl	80008ec <__aeabi_uldivmod>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4b60      	ldr	r3, [pc, #384]	@ (8006410 <UART_SetConfig+0x4e4>)
 800628e:	fba3 2302 	umull	r2, r3, r3, r2
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	011c      	lsls	r4, r3, #4
 8006296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800629a:	2200      	movs	r2, #0
 800629c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80062a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80062a8:	4642      	mov	r2, r8
 80062aa:	464b      	mov	r3, r9
 80062ac:	1891      	adds	r1, r2, r2
 80062ae:	61b9      	str	r1, [r7, #24]
 80062b0:	415b      	adcs	r3, r3
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062b8:	4641      	mov	r1, r8
 80062ba:	1851      	adds	r1, r2, r1
 80062bc:	6139      	str	r1, [r7, #16]
 80062be:	4649      	mov	r1, r9
 80062c0:	414b      	adcs	r3, r1
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062d0:	4659      	mov	r1, fp
 80062d2:	00cb      	lsls	r3, r1, #3
 80062d4:	4651      	mov	r1, sl
 80062d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062da:	4651      	mov	r1, sl
 80062dc:	00ca      	lsls	r2, r1, #3
 80062de:	4610      	mov	r0, r2
 80062e0:	4619      	mov	r1, r3
 80062e2:	4603      	mov	r3, r0
 80062e4:	4642      	mov	r2, r8
 80062e6:	189b      	adds	r3, r3, r2
 80062e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062ec:	464b      	mov	r3, r9
 80062ee:	460a      	mov	r2, r1
 80062f0:	eb42 0303 	adc.w	r3, r2, r3
 80062f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006302:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006304:	f04f 0200 	mov.w	r2, #0
 8006308:	f04f 0300 	mov.w	r3, #0
 800630c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006310:	4649      	mov	r1, r9
 8006312:	008b      	lsls	r3, r1, #2
 8006314:	4641      	mov	r1, r8
 8006316:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800631a:	4641      	mov	r1, r8
 800631c:	008a      	lsls	r2, r1, #2
 800631e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006322:	f7fa fae3 	bl	80008ec <__aeabi_uldivmod>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	4611      	mov	r1, r2
 800632c:	4b38      	ldr	r3, [pc, #224]	@ (8006410 <UART_SetConfig+0x4e4>)
 800632e:	fba3 2301 	umull	r2, r3, r3, r1
 8006332:	095b      	lsrs	r3, r3, #5
 8006334:	2264      	movs	r2, #100	@ 0x64
 8006336:	fb02 f303 	mul.w	r3, r2, r3
 800633a:	1acb      	subs	r3, r1, r3
 800633c:	011b      	lsls	r3, r3, #4
 800633e:	3332      	adds	r3, #50	@ 0x32
 8006340:	4a33      	ldr	r2, [pc, #204]	@ (8006410 <UART_SetConfig+0x4e4>)
 8006342:	fba2 2303 	umull	r2, r3, r2, r3
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800634c:	441c      	add	r4, r3
 800634e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006352:	2200      	movs	r2, #0
 8006354:	673b      	str	r3, [r7, #112]	@ 0x70
 8006356:	677a      	str	r2, [r7, #116]	@ 0x74
 8006358:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800635c:	4642      	mov	r2, r8
 800635e:	464b      	mov	r3, r9
 8006360:	1891      	adds	r1, r2, r2
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	415b      	adcs	r3, r3
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800636c:	4641      	mov	r1, r8
 800636e:	1851      	adds	r1, r2, r1
 8006370:	6039      	str	r1, [r7, #0]
 8006372:	4649      	mov	r1, r9
 8006374:	414b      	adcs	r3, r1
 8006376:	607b      	str	r3, [r7, #4]
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006384:	4659      	mov	r1, fp
 8006386:	00cb      	lsls	r3, r1, #3
 8006388:	4651      	mov	r1, sl
 800638a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800638e:	4651      	mov	r1, sl
 8006390:	00ca      	lsls	r2, r1, #3
 8006392:	4610      	mov	r0, r2
 8006394:	4619      	mov	r1, r3
 8006396:	4603      	mov	r3, r0
 8006398:	4642      	mov	r2, r8
 800639a:	189b      	adds	r3, r3, r2
 800639c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800639e:	464b      	mov	r3, r9
 80063a0:	460a      	mov	r2, r1
 80063a2:	eb42 0303 	adc.w	r3, r2, r3
 80063a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80063b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 0300 	mov.w	r3, #0
 80063bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80063c0:	4649      	mov	r1, r9
 80063c2:	008b      	lsls	r3, r1, #2
 80063c4:	4641      	mov	r1, r8
 80063c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ca:	4641      	mov	r1, r8
 80063cc:	008a      	lsls	r2, r1, #2
 80063ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80063d2:	f7fa fa8b 	bl	80008ec <__aeabi_uldivmod>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4b0d      	ldr	r3, [pc, #52]	@ (8006410 <UART_SetConfig+0x4e4>)
 80063dc:	fba3 1302 	umull	r1, r3, r3, r2
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	2164      	movs	r1, #100	@ 0x64
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	3332      	adds	r3, #50	@ 0x32
 80063ee:	4a08      	ldr	r2, [pc, #32]	@ (8006410 <UART_SetConfig+0x4e4>)
 80063f0:	fba2 2303 	umull	r2, r3, r2, r3
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	f003 020f 	and.w	r2, r3, #15
 80063fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4422      	add	r2, r4
 8006402:	609a      	str	r2, [r3, #8]
}
 8006404:	bf00      	nop
 8006406:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800640a:	46bd      	mov	sp, r7
 800640c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006410:	51eb851f 	.word	0x51eb851f

08006414 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006418:	4904      	ldr	r1, [pc, #16]	@ (800642c <MX_FATFS_Init+0x18>)
 800641a:	4805      	ldr	r0, [pc, #20]	@ (8006430 <MX_FATFS_Init+0x1c>)
 800641c:	f003 fbe6 	bl	8009bec <FATFS_LinkDriver>
 8006420:	4603      	mov	r3, r0
 8006422:	461a      	mov	r2, r3
 8006424:	4b03      	ldr	r3, [pc, #12]	@ (8006434 <MX_FATFS_Init+0x20>)
 8006426:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006428:	bf00      	nop
 800642a:	bd80      	pop	{r7, pc}
 800642c:	2000603c 	.word	0x2000603c
 8006430:	20000088 	.word	0x20000088
 8006434:	20006038 	.word	0x20006038

08006438 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800643c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800643e:	4618      	mov	r0, r3
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	4603      	mov	r3, r0
 8006450:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	4618      	mov	r0, r3
 8006456:	f000 f9d7 	bl	8006808 <USER_SPI_initialize>
 800645a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800645c:	4618      	mov	r0, r3
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	4603      	mov	r3, r0
 800646c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800646e:	79fb      	ldrb	r3, [r7, #7]
 8006470:	4618      	mov	r0, r3
 8006472:	f000 fab5 	bl	80069e0 <USER_SPI_status>
 8006476:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	607a      	str	r2, [r7, #4]
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006490:	7bf8      	ldrb	r0, [r7, #15]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	68b9      	ldr	r1, [r7, #8]
 8006498:	f000 fab8 	bl	8006a0c <USER_SPI_read>
 800649c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
 80064b2:	4603      	mov	r3, r0
 80064b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80064b6:	7bf8      	ldrb	r0, [r7, #15]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	f000 fb0b 	bl	8006ad8 <USER_SPI_write>
 80064c2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	4603      	mov	r3, r0
 80064d4:	603a      	str	r2, [r7, #0]
 80064d6:	71fb      	strb	r3, [r7, #7]
 80064d8:	460b      	mov	r3, r1
 80064da:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80064dc:	79b9      	ldrb	r1, [r7, #6]
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fb74 	bl	8006bd0 <USER_SPI_ioctl>
 80064e8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80064fc:	f7fd fa84 	bl	8003a08 <HAL_GetTick>
 8006500:	4603      	mov	r3, r0
 8006502:	4a04      	ldr	r2, [pc, #16]	@ (8006514 <SPI_Timer_On+0x20>)
 8006504:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006506:	4a04      	ldr	r2, [pc, #16]	@ (8006518 <SPI_Timer_On+0x24>)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6013      	str	r3, [r2, #0]
}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20006044 	.word	0x20006044
 8006518:	20006048 	.word	0x20006048

0800651c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006520:	f7fd fa72 	bl	8003a08 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	4b06      	ldr	r3, [pc, #24]	@ (8006540 <SPI_Timer_Status+0x24>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	1ad2      	subs	r2, r2, r3
 800652c:	4b05      	ldr	r3, [pc, #20]	@ (8006544 <SPI_Timer_Status+0x28>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	bf34      	ite	cc
 8006534:	2301      	movcc	r3, #1
 8006536:	2300      	movcs	r3, #0
 8006538:	b2db      	uxtb	r3, r3
}
 800653a:	4618      	mov	r0, r3
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20006044 	.word	0x20006044
 8006544:	20006048 	.word	0x20006048

08006548 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af02      	add	r7, sp, #8
 800654e:	4603      	mov	r3, r0
 8006550:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006552:	f107 020f 	add.w	r2, r7, #15
 8006556:	1df9      	adds	r1, r7, #7
 8006558:	2332      	movs	r3, #50	@ 0x32
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	2301      	movs	r3, #1
 800655e:	4804      	ldr	r0, [pc, #16]	@ (8006570 <xchg_spi+0x28>)
 8006560:	f7fe fb6f 	bl	8004c42 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006564:	7bfb      	ldrb	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000164 	.word	0x20000164

08006574 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006574:	b590      	push	{r4, r7, lr}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	e00a      	b.n	800659a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	18d4      	adds	r4, r2, r3
 800658a:	20ff      	movs	r0, #255	@ 0xff
 800658c:	f7ff ffdc 	bl	8006548 <xchg_spi>
 8006590:	4603      	mov	r3, r0
 8006592:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3301      	adds	r3, #1
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d3f0      	bcc.n	8006584 <rcvr_spi_multi+0x10>
	}
}
 80065a2:	bf00      	nop
 80065a4:	bf00      	nop
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd90      	pop	{r4, r7, pc}

080065ac <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	f04f 33ff 	mov.w	r3, #4294967295
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	4803      	ldr	r0, [pc, #12]	@ (80065d0 <xmit_spi_multi+0x24>)
 80065c2:	f7fe f9fa 	bl	80049ba <HAL_SPI_Transmit>
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000164 	.word	0x20000164

080065d4 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80065dc:	f7fd fa14 	bl	8003a08 <HAL_GetTick>
 80065e0:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80065e6:	20ff      	movs	r0, #255	@ 0xff
 80065e8:	f7ff ffae 	bl	8006548 <xchg_spi>
 80065ec:	4603      	mov	r3, r0
 80065ee:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	2bff      	cmp	r3, #255	@ 0xff
 80065f4:	d007      	beq.n	8006606 <wait_ready+0x32>
 80065f6:	f7fd fa07 	bl	8003a08 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	429a      	cmp	r2, r3
 8006604:	d8ef      	bhi.n	80065e6 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	2bff      	cmp	r3, #255	@ 0xff
 800660a:	bf0c      	ite	eq
 800660c:	2301      	moveq	r3, #1
 800660e:	2300      	movne	r3, #0
 8006610:	b2db      	uxtb	r3, r3
}
 8006612:	4618      	mov	r0, r3
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006620:	2201      	movs	r2, #1
 8006622:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006626:	4804      	ldr	r0, [pc, #16]	@ (8006638 <despiselect+0x1c>)
 8006628:	f7fd fccc 	bl	8003fc4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800662c:	20ff      	movs	r0, #255	@ 0xff
 800662e:	f7ff ff8b 	bl	8006548 <xchg_spi>

}
 8006632:	bf00      	nop
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	40020000 	.word	0x40020000

0800663c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006640:	2200      	movs	r2, #0
 8006642:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006646:	480a      	ldr	r0, [pc, #40]	@ (8006670 <spiselect+0x34>)
 8006648:	f7fd fcbc 	bl	8003fc4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800664c:	20ff      	movs	r0, #255	@ 0xff
 800664e:	f7ff ff7b 	bl	8006548 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006652:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006656:	f7ff ffbd 	bl	80065d4 <wait_ready>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <spiselect+0x28>
 8006660:	2301      	movs	r3, #1
 8006662:	e002      	b.n	800666a <spiselect+0x2e>

	despiselect();
 8006664:	f7ff ffda 	bl	800661c <despiselect>
	return 0;	/* Timeout */
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	40020000 	.word	0x40020000

08006674 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800667e:	20c8      	movs	r0, #200	@ 0xc8
 8006680:	f7ff ff38 	bl	80064f4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006684:	20ff      	movs	r0, #255	@ 0xff
 8006686:	f7ff ff5f 	bl	8006548 <xchg_spi>
 800668a:	4603      	mov	r3, r0
 800668c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	2bff      	cmp	r3, #255	@ 0xff
 8006692:	d104      	bne.n	800669e <rcvr_datablock+0x2a>
 8006694:	f7ff ff42 	bl	800651c <SPI_Timer_Status>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1f2      	bne.n	8006684 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800669e:	7bfb      	ldrb	r3, [r7, #15]
 80066a0:	2bfe      	cmp	r3, #254	@ 0xfe
 80066a2:	d001      	beq.n	80066a8 <rcvr_datablock+0x34>
 80066a4:	2300      	movs	r3, #0
 80066a6:	e00a      	b.n	80066be <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff ff62 	bl	8006574 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80066b0:	20ff      	movs	r0, #255	@ 0xff
 80066b2:	f7ff ff49 	bl	8006548 <xchg_spi>
 80066b6:	20ff      	movs	r0, #255	@ 0xff
 80066b8:	f7ff ff46 	bl	8006548 <xchg_spi>

	return 1;						/* Function succeeded */
 80066bc:	2301      	movs	r3, #1
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	460b      	mov	r3, r1
 80066d0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80066d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80066d6:	f7ff ff7d 	bl	80065d4 <wait_ready>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <xmit_datablock+0x1e>
 80066e0:	2300      	movs	r3, #0
 80066e2:	e01e      	b.n	8006722 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80066e4:	78fb      	ldrb	r3, [r7, #3]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff ff2e 	bl	8006548 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	2bfd      	cmp	r3, #253	@ 0xfd
 80066f0:	d016      	beq.n	8006720 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80066f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff ff58 	bl	80065ac <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80066fc:	20ff      	movs	r0, #255	@ 0xff
 80066fe:	f7ff ff23 	bl	8006548 <xchg_spi>
 8006702:	20ff      	movs	r0, #255	@ 0xff
 8006704:	f7ff ff20 	bl	8006548 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006708:	20ff      	movs	r0, #255	@ 0xff
 800670a:	f7ff ff1d 	bl	8006548 <xchg_spi>
 800670e:	4603      	mov	r3, r0
 8006710:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	f003 031f 	and.w	r3, r3, #31
 8006718:	2b05      	cmp	r3, #5
 800671a:	d001      	beq.n	8006720 <xmit_datablock+0x5a>
 800671c:	2300      	movs	r3, #0
 800671e:	e000      	b.n	8006722 <xmit_datablock+0x5c>
	}
	return 1;
 8006720:	2301      	movs	r3, #1
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	4603      	mov	r3, r0
 8006732:	6039      	str	r1, [r7, #0]
 8006734:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800673a:	2b00      	cmp	r3, #0
 800673c:	da0e      	bge.n	800675c <send_cmd+0x32>
		cmd &= 0x7F;
 800673e:	79fb      	ldrb	r3, [r7, #7]
 8006740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006744:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006746:	2100      	movs	r1, #0
 8006748:	2037      	movs	r0, #55	@ 0x37
 800674a:	f7ff ffee 	bl	800672a <send_cmd>
 800674e:	4603      	mov	r3, r0
 8006750:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006752:	7bbb      	ldrb	r3, [r7, #14]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d901      	bls.n	800675c <send_cmd+0x32>
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	e051      	b.n	8006800 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800675c:	79fb      	ldrb	r3, [r7, #7]
 800675e:	2b0c      	cmp	r3, #12
 8006760:	d008      	beq.n	8006774 <send_cmd+0x4a>
		despiselect();
 8006762:	f7ff ff5b 	bl	800661c <despiselect>
		if (!spiselect()) return 0xFF;
 8006766:	f7ff ff69 	bl	800663c <spiselect>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <send_cmd+0x4a>
 8006770:	23ff      	movs	r3, #255	@ 0xff
 8006772:	e045      	b.n	8006800 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800677a:	b2db      	uxtb	r3, r3
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff fee3 	bl	8006548 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	0e1b      	lsrs	r3, r3, #24
 8006786:	b2db      	uxtb	r3, r3
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff fedd 	bl	8006548 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	0c1b      	lsrs	r3, r3, #16
 8006792:	b2db      	uxtb	r3, r3
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff fed7 	bl	8006548 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	0a1b      	lsrs	r3, r3, #8
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff fed1 	bl	8006548 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff fecc 	bl	8006548 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80067b0:	2301      	movs	r3, #1
 80067b2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <send_cmd+0x94>
 80067ba:	2395      	movs	r3, #149	@ 0x95
 80067bc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d101      	bne.n	80067c8 <send_cmd+0x9e>
 80067c4:	2387      	movs	r3, #135	@ 0x87
 80067c6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff febc 	bl	8006548 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	2b0c      	cmp	r3, #12
 80067d4:	d102      	bne.n	80067dc <send_cmd+0xb2>
 80067d6:	20ff      	movs	r0, #255	@ 0xff
 80067d8:	f7ff feb6 	bl	8006548 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80067dc:	230a      	movs	r3, #10
 80067de:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80067e0:	20ff      	movs	r0, #255	@ 0xff
 80067e2:	f7ff feb1 	bl	8006548 <xchg_spi>
 80067e6:	4603      	mov	r3, r0
 80067e8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80067ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	da05      	bge.n	80067fe <send_cmd+0xd4>
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	3b01      	subs	r3, #1
 80067f6:	73fb      	strb	r3, [r7, #15]
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1f0      	bne.n	80067e0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80067fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006808:	b590      	push	{r4, r7, lr}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	4603      	mov	r3, r0
 8006810:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006812:	79fb      	ldrb	r3, [r7, #7]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <USER_SPI_initialize+0x14>
 8006818:	2301      	movs	r3, #1
 800681a:	e0d6      	b.n	80069ca <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800681c:	4b6d      	ldr	r3, [pc, #436]	@ (80069d4 <USER_SPI_initialize+0x1cc>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	b2db      	uxtb	r3, r3
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <USER_SPI_initialize+0x2a>
 800682a:	4b6a      	ldr	r3, [pc, #424]	@ (80069d4 <USER_SPI_initialize+0x1cc>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	e0cb      	b.n	80069ca <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006832:	4b69      	ldr	r3, [pc, #420]	@ (80069d8 <USER_SPI_initialize+0x1d0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800683c:	4b66      	ldr	r3, [pc, #408]	@ (80069d8 <USER_SPI_initialize+0x1d0>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8006844:	601a      	str	r2, [r3, #0]
	for (n = 30; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006846:	231e      	movs	r3, #30
 8006848:	73fb      	strb	r3, [r7, #15]
 800684a:	e005      	b.n	8006858 <USER_SPI_initialize+0x50>
 800684c:	20ff      	movs	r0, #255	@ 0xff
 800684e:	f7ff fe7b 	bl	8006548 <xchg_spi>
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	3b01      	subs	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f6      	bne.n	800684c <USER_SPI_initialize+0x44>

	ty = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006862:	2100      	movs	r1, #0
 8006864:	2000      	movs	r0, #0
 8006866:	f7ff ff60 	bl	800672a <send_cmd>
 800686a:	4603      	mov	r3, r0
 800686c:	2b01      	cmp	r3, #1
 800686e:	f040 808b 	bne.w	8006988 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006872:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006876:	f7ff fe3d 	bl	80064f4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800687a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800687e:	2008      	movs	r0, #8
 8006880:	f7ff ff53 	bl	800672a <send_cmd>
 8006884:	4603      	mov	r3, r0
 8006886:	2b01      	cmp	r3, #1
 8006888:	d151      	bne.n	800692e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]
 800688e:	e00d      	b.n	80068ac <USER_SPI_initialize+0xa4>
 8006890:	7bfc      	ldrb	r4, [r7, #15]
 8006892:	20ff      	movs	r0, #255	@ 0xff
 8006894:	f7ff fe58 	bl	8006548 <xchg_spi>
 8006898:	4603      	mov	r3, r0
 800689a:	461a      	mov	r2, r3
 800689c:	f104 0310 	add.w	r3, r4, #16
 80068a0:	443b      	add	r3, r7
 80068a2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	3301      	adds	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d9ee      	bls.n	8006890 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80068b2:	7abb      	ldrb	r3, [r7, #10]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d167      	bne.n	8006988 <USER_SPI_initialize+0x180>
 80068b8:	7afb      	ldrb	r3, [r7, #11]
 80068ba:	2baa      	cmp	r3, #170	@ 0xaa
 80068bc:	d164      	bne.n	8006988 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80068be:	bf00      	nop
 80068c0:	f7ff fe2c 	bl	800651c <SPI_Timer_Status>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <USER_SPI_initialize+0xd2>
 80068ca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80068ce:	20a9      	movs	r0, #169	@ 0xa9
 80068d0:	f7ff ff2b 	bl	800672a <send_cmd>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1f2      	bne.n	80068c0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80068da:	f7ff fe1f 	bl	800651c <SPI_Timer_Status>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d051      	beq.n	8006988 <USER_SPI_initialize+0x180>
 80068e4:	2100      	movs	r1, #0
 80068e6:	203a      	movs	r0, #58	@ 0x3a
 80068e8:	f7ff ff1f 	bl	800672a <send_cmd>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d14a      	bne.n	8006988 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
 80068f6:	e00d      	b.n	8006914 <USER_SPI_initialize+0x10c>
 80068f8:	7bfc      	ldrb	r4, [r7, #15]
 80068fa:	20ff      	movs	r0, #255	@ 0xff
 80068fc:	f7ff fe24 	bl	8006548 <xchg_spi>
 8006900:	4603      	mov	r3, r0
 8006902:	461a      	mov	r2, r3
 8006904:	f104 0310 	add.w	r3, r4, #16
 8006908:	443b      	add	r3, r7
 800690a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	3301      	adds	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
 8006914:	7bfb      	ldrb	r3, [r7, #15]
 8006916:	2b03      	cmp	r3, #3
 8006918:	d9ee      	bls.n	80068f8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800691a:	7a3b      	ldrb	r3, [r7, #8]
 800691c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <USER_SPI_initialize+0x120>
 8006924:	230c      	movs	r3, #12
 8006926:	e000      	b.n	800692a <USER_SPI_initialize+0x122>
 8006928:	2304      	movs	r3, #4
 800692a:	737b      	strb	r3, [r7, #13]
 800692c:	e02c      	b.n	8006988 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800692e:	2100      	movs	r1, #0
 8006930:	20a9      	movs	r0, #169	@ 0xa9
 8006932:	f7ff fefa 	bl	800672a <send_cmd>
 8006936:	4603      	mov	r3, r0
 8006938:	2b01      	cmp	r3, #1
 800693a:	d804      	bhi.n	8006946 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800693c:	2302      	movs	r3, #2
 800693e:	737b      	strb	r3, [r7, #13]
 8006940:	23a9      	movs	r3, #169	@ 0xa9
 8006942:	73bb      	strb	r3, [r7, #14]
 8006944:	e003      	b.n	800694e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006946:	2301      	movs	r3, #1
 8006948:	737b      	strb	r3, [r7, #13]
 800694a:	2301      	movs	r3, #1
 800694c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800694e:	bf00      	nop
 8006950:	f7ff fde4 	bl	800651c <SPI_Timer_Status>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d007      	beq.n	800696a <USER_SPI_initialize+0x162>
 800695a:	7bbb      	ldrb	r3, [r7, #14]
 800695c:	2100      	movs	r1, #0
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff fee3 	bl	800672a <send_cmd>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f2      	bne.n	8006950 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800696a:	f7ff fdd7 	bl	800651c <SPI_Timer_Status>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d007      	beq.n	8006984 <USER_SPI_initialize+0x17c>
 8006974:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006978:	2010      	movs	r0, #16
 800697a:	f7ff fed6 	bl	800672a <send_cmd>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <USER_SPI_initialize+0x180>
				ty = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006988:	4a14      	ldr	r2, [pc, #80]	@ (80069dc <USER_SPI_initialize+0x1d4>)
 800698a:	7b7b      	ldrb	r3, [r7, #13]
 800698c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800698e:	f7ff fe45 	bl	800661c <despiselect>

	if (ty) {			/* OK */
 8006992:	7b7b      	ldrb	r3, [r7, #13]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d012      	beq.n	80069be <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006998:	4b0f      	ldr	r3, [pc, #60]	@ (80069d8 <USER_SPI_initialize+0x1d0>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80069a2:	4b0d      	ldr	r3, [pc, #52]	@ (80069d8 <USER_SPI_initialize+0x1d0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0208 	orr.w	r2, r2, #8
 80069aa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80069ac:	4b09      	ldr	r3, [pc, #36]	@ (80069d4 <USER_SPI_initialize+0x1cc>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	4b06      	ldr	r3, [pc, #24]	@ (80069d4 <USER_SPI_initialize+0x1cc>)
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	e002      	b.n	80069c4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80069be:	4b05      	ldr	r3, [pc, #20]	@ (80069d4 <USER_SPI_initialize+0x1cc>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80069c4:	4b03      	ldr	r3, [pc, #12]	@ (80069d4 <USER_SPI_initialize+0x1cc>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	b2db      	uxtb	r3, r3
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd90      	pop	{r4, r7, pc}
 80069d2:	bf00      	nop
 80069d4:	2000009c 	.word	0x2000009c
 80069d8:	20000164 	.word	0x20000164
 80069dc:	20006040 	.word	0x20006040

080069e0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80069ea:	79fb      	ldrb	r3, [r7, #7]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <USER_SPI_status+0x14>
 80069f0:	2301      	movs	r3, #1
 80069f2:	e002      	b.n	80069fa <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80069f4:	4b04      	ldr	r3, [pc, #16]	@ (8006a08 <USER_SPI_status+0x28>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	b2db      	uxtb	r3, r3
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	2000009c 	.word	0x2000009c

08006a0c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d102      	bne.n	8006a28 <USER_SPI_read+0x1c>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <USER_SPI_read+0x20>
 8006a28:	2304      	movs	r3, #4
 8006a2a:	e04d      	b.n	8006ac8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006a2c:	4b28      	ldr	r3, [pc, #160]	@ (8006ad0 <USER_SPI_read+0xc4>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <USER_SPI_read+0x32>
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e044      	b.n	8006ac8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006a3e:	4b25      	ldr	r3, [pc, #148]	@ (8006ad4 <USER_SPI_read+0xc8>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	f003 0308 	and.w	r3, r3, #8
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d102      	bne.n	8006a50 <USER_SPI_read+0x44>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	025b      	lsls	r3, r3, #9
 8006a4e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d111      	bne.n	8006a7a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	2011      	movs	r0, #17
 8006a5a:	f7ff fe66 	bl	800672a <send_cmd>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d129      	bne.n	8006ab8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006a64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006a68:	68b8      	ldr	r0, [r7, #8]
 8006a6a:	f7ff fe03 	bl	8006674 <rcvr_datablock>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d021      	beq.n	8006ab8 <USER_SPI_read+0xac>
			count = 0;
 8006a74:	2300      	movs	r3, #0
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	e01e      	b.n	8006ab8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	2012      	movs	r0, #18
 8006a7e:	f7ff fe54 	bl	800672a <send_cmd>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d117      	bne.n	8006ab8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006a88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006a8c:	68b8      	ldr	r0, [r7, #8]
 8006a8e:	f7ff fdf1 	bl	8006674 <rcvr_datablock>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00a      	beq.n	8006aae <USER_SPI_read+0xa2>
				buff += 512;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006a9e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	603b      	str	r3, [r7, #0]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1ed      	bne.n	8006a88 <USER_SPI_read+0x7c>
 8006aac:	e000      	b.n	8006ab0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006aae:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	200c      	movs	r0, #12
 8006ab4:	f7ff fe39 	bl	800672a <send_cmd>
		}
	}
	despiselect();
 8006ab8:	f7ff fdb0 	bl	800661c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	bf14      	ite	ne
 8006ac2:	2301      	movne	r3, #1
 8006ac4:	2300      	moveq	r3, #0
 8006ac6:	b2db      	uxtb	r3, r3
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	2000009c 	.word	0x2000009c
 8006ad4:	20006040 	.word	0x20006040

08006ad8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d102      	bne.n	8006af4 <USER_SPI_write+0x1c>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <USER_SPI_write+0x20>
 8006af4:	2304      	movs	r3, #4
 8006af6:	e063      	b.n	8006bc0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006af8:	4b33      	ldr	r3, [pc, #204]	@ (8006bc8 <USER_SPI_write+0xf0>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <USER_SPI_write+0x32>
 8006b06:	2303      	movs	r3, #3
 8006b08:	e05a      	b.n	8006bc0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8006bc8 <USER_SPI_write+0xf0>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <USER_SPI_write+0x44>
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e051      	b.n	8006bc0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8006bcc <USER_SPI_write+0xf4>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	f003 0308 	and.w	r3, r3, #8
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d102      	bne.n	8006b2e <USER_SPI_write+0x56>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	025b      	lsls	r3, r3, #9
 8006b2c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d110      	bne.n	8006b56 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	2018      	movs	r0, #24
 8006b38:	f7ff fdf7 	bl	800672a <send_cmd>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d136      	bne.n	8006bb0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006b42:	21fe      	movs	r1, #254	@ 0xfe
 8006b44:	68b8      	ldr	r0, [r7, #8]
 8006b46:	f7ff fdbe 	bl	80066c6 <xmit_datablock>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d02f      	beq.n	8006bb0 <USER_SPI_write+0xd8>
			count = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	e02c      	b.n	8006bb0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006b56:	4b1d      	ldr	r3, [pc, #116]	@ (8006bcc <USER_SPI_write+0xf4>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	f003 0306 	and.w	r3, r3, #6
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <USER_SPI_write+0x92>
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	2097      	movs	r0, #151	@ 0x97
 8006b66:	f7ff fde0 	bl	800672a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	2019      	movs	r0, #25
 8006b6e:	f7ff fddc 	bl	800672a <send_cmd>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d11b      	bne.n	8006bb0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006b78:	21fc      	movs	r1, #252	@ 0xfc
 8006b7a:	68b8      	ldr	r0, [r7, #8]
 8006b7c:	f7ff fda3 	bl	80066c6 <xmit_datablock>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <USER_SPI_write+0xc4>
				buff += 512;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006b8c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1ee      	bne.n	8006b78 <USER_SPI_write+0xa0>
 8006b9a:	e000      	b.n	8006b9e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006b9c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006b9e:	21fd      	movs	r1, #253	@ 0xfd
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	f7ff fd90 	bl	80066c6 <xmit_datablock>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <USER_SPI_write+0xd8>
 8006bac:	2301      	movs	r3, #1
 8006bae:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006bb0:	f7ff fd34 	bl	800661c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bf14      	ite	ne
 8006bba:	2301      	movne	r3, #1
 8006bbc:	2300      	moveq	r3, #0
 8006bbe:	b2db      	uxtb	r3, r3
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	2000009c 	.word	0x2000009c
 8006bcc:	20006040 	.word	0x20006040

08006bd0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08c      	sub	sp, #48	@ 0x30
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	603a      	str	r2, [r7, #0]
 8006bda:	71fb      	strb	r3, [r7, #7]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <USER_SPI_ioctl+0x1a>
 8006be6:	2304      	movs	r3, #4
 8006be8:	e15a      	b.n	8006ea0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006bea:	4baf      	ldr	r3, [pc, #700]	@ (8006ea8 <USER_SPI_ioctl+0x2d8>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <USER_SPI_ioctl+0x2c>
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e151      	b.n	8006ea0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8006c02:	79bb      	ldrb	r3, [r7, #6]
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	f200 8136 	bhi.w	8006e76 <USER_SPI_ioctl+0x2a6>
 8006c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <USER_SPI_ioctl+0x40>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c25 	.word	0x08006c25
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006e77 	.word	0x08006e77
 8006c1c:	08006ce5 	.word	0x08006ce5
 8006c20:	08006ddb 	.word	0x08006ddb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006c24:	f7ff fd0a 	bl	800663c <spiselect>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 8127 	beq.w	8006e7e <USER_SPI_ioctl+0x2ae>
 8006c30:	2300      	movs	r3, #0
 8006c32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006c36:	e122      	b.n	8006e7e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006c38:	2100      	movs	r1, #0
 8006c3a:	2009      	movs	r0, #9
 8006c3c:	f7ff fd75 	bl	800672a <send_cmd>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f040 811d 	bne.w	8006e82 <USER_SPI_ioctl+0x2b2>
 8006c48:	f107 030c 	add.w	r3, r7, #12
 8006c4c:	2110      	movs	r1, #16
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff fd10 	bl	8006674 <rcvr_datablock>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 8113 	beq.w	8006e82 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006c5c:	7b3b      	ldrb	r3, [r7, #12]
 8006c5e:	099b      	lsrs	r3, r3, #6
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d111      	bne.n	8006c8a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006c66:	7d7b      	ldrb	r3, [r7, #21]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	7d3b      	ldrb	r3, [r7, #20]
 8006c6c:	021b      	lsls	r3, r3, #8
 8006c6e:	4413      	add	r3, r2
 8006c70:	461a      	mov	r2, r3
 8006c72:	7cfb      	ldrb	r3, [r7, #19]
 8006c74:	041b      	lsls	r3, r3, #16
 8006c76:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8006c7a:	4413      	add	r3, r2
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	029a      	lsls	r2, r3, #10
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	e028      	b.n	8006cdc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006c8a:	7c7b      	ldrb	r3, [r7, #17]
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	7dbb      	ldrb	r3, [r7, #22]
 8006c94:	09db      	lsrs	r3, r3, #7
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	4413      	add	r3, r2
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	7d7b      	ldrb	r3, [r7, #21]
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	f003 0306 	and.w	r3, r3, #6
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	4413      	add	r3, r2
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	3302      	adds	r3, #2
 8006cae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006cb2:	7d3b      	ldrb	r3, [r7, #20]
 8006cb4:	099b      	lsrs	r3, r3, #6
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	461a      	mov	r2, r3
 8006cba:	7cfb      	ldrb	r3, [r7, #19]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	441a      	add	r2, r3
 8006cc0:	7cbb      	ldrb	r3, [r7, #18]
 8006cc2:	029b      	lsls	r3, r3, #10
 8006cc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006cc8:	4413      	add	r3, r2
 8006cca:	3301      	adds	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006cce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006cd2:	3b09      	subs	r3, #9
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	409a      	lsls	r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006ce2:	e0ce      	b.n	8006e82 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006ce4:	4b71      	ldr	r3, [pc, #452]	@ (8006eac <USER_SPI_ioctl+0x2dc>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d031      	beq.n	8006d54 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	208d      	movs	r0, #141	@ 0x8d
 8006cf4:	f7ff fd19 	bl	800672a <send_cmd>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f040 80c3 	bne.w	8006e86 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006d00:	20ff      	movs	r0, #255	@ 0xff
 8006d02:	f7ff fc21 	bl	8006548 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006d06:	f107 030c 	add.w	r3, r7, #12
 8006d0a:	2110      	movs	r1, #16
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff fcb1 	bl	8006674 <rcvr_datablock>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 80b6 	beq.w	8006e86 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006d1a:	2330      	movs	r3, #48	@ 0x30
 8006d1c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006d20:	e007      	b.n	8006d32 <USER_SPI_ioctl+0x162>
 8006d22:	20ff      	movs	r0, #255	@ 0xff
 8006d24:	f7ff fc10 	bl	8006548 <xchg_spi>
 8006d28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006d32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1f3      	bne.n	8006d22 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006d3a:	7dbb      	ldrb	r3, [r7, #22]
 8006d3c:	091b      	lsrs	r3, r3, #4
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	461a      	mov	r2, r3
 8006d42:	2310      	movs	r3, #16
 8006d44:	fa03 f202 	lsl.w	r2, r3, r2
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006d52:	e098      	b.n	8006e86 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006d54:	2100      	movs	r1, #0
 8006d56:	2009      	movs	r0, #9
 8006d58:	f7ff fce7 	bl	800672a <send_cmd>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f040 8091 	bne.w	8006e86 <USER_SPI_ioctl+0x2b6>
 8006d64:	f107 030c 	add.w	r3, r7, #12
 8006d68:	2110      	movs	r1, #16
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7ff fc82 	bl	8006674 <rcvr_datablock>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 8087 	beq.w	8006e86 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006d78:	4b4c      	ldr	r3, [pc, #304]	@ (8006eac <USER_SPI_ioctl+0x2dc>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d012      	beq.n	8006daa <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006d84:	7dbb      	ldrb	r3, [r7, #22]
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8006d8c:	7dfa      	ldrb	r2, [r7, #23]
 8006d8e:	09d2      	lsrs	r2, r2, #7
 8006d90:	b2d2      	uxtb	r2, r2
 8006d92:	4413      	add	r3, r2
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	7e7b      	ldrb	r3, [r7, #25]
 8006d98:	099b      	lsrs	r3, r3, #6
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006da2:	461a      	mov	r2, r3
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	e013      	b.n	8006dd2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006daa:	7dbb      	ldrb	r3, [r7, #22]
 8006dac:	109b      	asrs	r3, r3, #2
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f003 031f 	and.w	r3, r3, #31
 8006db4:	3301      	adds	r3, #1
 8006db6:	7dfa      	ldrb	r2, [r7, #23]
 8006db8:	00d2      	lsls	r2, r2, #3
 8006dba:	f002 0218 	and.w	r2, r2, #24
 8006dbe:	7df9      	ldrb	r1, [r7, #23]
 8006dc0:	0949      	lsrs	r1, r1, #5
 8006dc2:	b2c9      	uxtb	r1, r1
 8006dc4:	440a      	add	r2, r1
 8006dc6:	3201      	adds	r2, #1
 8006dc8:	fb02 f303 	mul.w	r3, r2, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006dd8:	e055      	b.n	8006e86 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006dda:	4b34      	ldr	r3, [pc, #208]	@ (8006eac <USER_SPI_ioctl+0x2dc>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	f003 0306 	and.w	r3, r3, #6
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d051      	beq.n	8006e8a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006de6:	f107 020c 	add.w	r2, r7, #12
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	210b      	movs	r1, #11
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff feee 	bl	8006bd0 <USER_SPI_ioctl>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d149      	bne.n	8006e8e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006dfa:	7b3b      	ldrb	r3, [r7, #12]
 8006dfc:	099b      	lsrs	r3, r3, #6
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d104      	bne.n	8006e0e <USER_SPI_ioctl+0x23e>
 8006e04:	7dbb      	ldrb	r3, [r7, #22]
 8006e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d041      	beq.n	8006e92 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	623b      	str	r3, [r7, #32]
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8006e1e:	4b23      	ldr	r3, [pc, #140]	@ (8006eac <USER_SPI_ioctl+0x2dc>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d105      	bne.n	8006e36 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2c:	025b      	lsls	r3, r3, #9
 8006e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	025b      	lsls	r3, r3, #9
 8006e34:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006e36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e38:	2020      	movs	r0, #32
 8006e3a:	f7ff fc76 	bl	800672a <send_cmd>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d128      	bne.n	8006e96 <USER_SPI_ioctl+0x2c6>
 8006e44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e46:	2021      	movs	r0, #33	@ 0x21
 8006e48:	f7ff fc6f 	bl	800672a <send_cmd>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d121      	bne.n	8006e96 <USER_SPI_ioctl+0x2c6>
 8006e52:	2100      	movs	r1, #0
 8006e54:	2026      	movs	r0, #38	@ 0x26
 8006e56:	f7ff fc68 	bl	800672a <send_cmd>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d11a      	bne.n	8006e96 <USER_SPI_ioctl+0x2c6>
 8006e60:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006e64:	f7ff fbb6 	bl	80065d4 <wait_ready>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d013      	beq.n	8006e96 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006e74:	e00f      	b.n	8006e96 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006e76:	2304      	movs	r3, #4
 8006e78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006e7c:	e00c      	b.n	8006e98 <USER_SPI_ioctl+0x2c8>
		break;
 8006e7e:	bf00      	nop
 8006e80:	e00a      	b.n	8006e98 <USER_SPI_ioctl+0x2c8>
		break;
 8006e82:	bf00      	nop
 8006e84:	e008      	b.n	8006e98 <USER_SPI_ioctl+0x2c8>
		break;
 8006e86:	bf00      	nop
 8006e88:	e006      	b.n	8006e98 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006e8a:	bf00      	nop
 8006e8c:	e004      	b.n	8006e98 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006e8e:	bf00      	nop
 8006e90:	e002      	b.n	8006e98 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006e92:	bf00      	nop
 8006e94:	e000      	b.n	8006e98 <USER_SPI_ioctl+0x2c8>
		break;
 8006e96:	bf00      	nop
	}

	despiselect();
 8006e98:	f7ff fbc0 	bl	800661c <despiselect>

	return res;
 8006e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3730      	adds	r7, #48	@ 0x30
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	2000009c 	.word	0x2000009c
 8006eac:	20006040 	.word	0x20006040

08006eb0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	4a08      	ldr	r2, [pc, #32]	@ (8006ee0 <disk_status+0x30>)
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	79fa      	ldrb	r2, [r7, #7]
 8006ec8:	4905      	ldr	r1, [pc, #20]	@ (8006ee0 <disk_status+0x30>)
 8006eca:	440a      	add	r2, r1
 8006ecc:	7a12      	ldrb	r2, [r2, #8]
 8006ece:	4610      	mov	r0, r2
 8006ed0:	4798      	blx	r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20006274 	.word	0x20006274

08006ee4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	4a0e      	ldr	r2, [pc, #56]	@ (8006f30 <disk_initialize+0x4c>)
 8006ef6:	5cd3      	ldrb	r3, [r2, r3]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d114      	bne.n	8006f26 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	4a0c      	ldr	r2, [pc, #48]	@ (8006f30 <disk_initialize+0x4c>)
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	79fa      	ldrb	r2, [r7, #7]
 8006f0a:	4909      	ldr	r1, [pc, #36]	@ (8006f30 <disk_initialize+0x4c>)
 8006f0c:	440a      	add	r2, r1
 8006f0e:	7a12      	ldrb	r2, [r2, #8]
 8006f10:	4610      	mov	r0, r2
 8006f12:	4798      	blx	r3
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d103      	bne.n	8006f26 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	4a03      	ldr	r2, [pc, #12]	@ (8006f30 <disk_initialize+0x4c>)
 8006f22:	2101      	movs	r1, #1
 8006f24:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	20006274 	.word	0x20006274

08006f34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006f34:	b590      	push	{r4, r7, lr}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	4603      	mov	r3, r0
 8006f42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
 8006f46:	4a0a      	ldr	r2, [pc, #40]	@ (8006f70 <disk_read+0x3c>)
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	689c      	ldr	r4, [r3, #8]
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	4a07      	ldr	r2, [pc, #28]	@ (8006f70 <disk_read+0x3c>)
 8006f54:	4413      	add	r3, r2
 8006f56:	7a18      	ldrb	r0, [r3, #8]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	68b9      	ldr	r1, [r7, #8]
 8006f5e:	47a0      	blx	r4
 8006f60:	4603      	mov	r3, r0
 8006f62:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	371c      	adds	r7, #28
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd90      	pop	{r4, r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20006274 	.word	0x20006274

08006f74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006f74:	b590      	push	{r4, r7, lr}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	4603      	mov	r3, r0
 8006f82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	4a0a      	ldr	r2, [pc, #40]	@ (8006fb0 <disk_write+0x3c>)
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	68dc      	ldr	r4, [r3, #12]
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	4a07      	ldr	r2, [pc, #28]	@ (8006fb0 <disk_write+0x3c>)
 8006f94:	4413      	add	r3, r2
 8006f96:	7a18      	ldrb	r0, [r3, #8]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	68b9      	ldr	r1, [r7, #8]
 8006f9e:	47a0      	blx	r4
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	75fb      	strb	r3, [r7, #23]
  return res;
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd90      	pop	{r4, r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20006274 	.word	0x20006274

08006fb4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006fc4:	89fb      	ldrh	r3, [r7, #14]
 8006fc6:	021b      	lsls	r3, r3, #8
 8006fc8:	b21a      	sxth	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	b21b      	sxth	r3, r3
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	b21b      	sxth	r3, r3
 8006fd4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006fd6:	89fb      	ldrh	r3, [r7, #14]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3303      	adds	r3, #3
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	021b      	lsls	r3, r3, #8
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	3202      	adds	r2, #2
 8006ffc:	7812      	ldrb	r2, [r2, #0]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	3201      	adds	r2, #1
 800700a:	7812      	ldrb	r2, [r2, #0]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	021b      	lsls	r3, r3, #8
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]
	return rv;
 800701c:	68fb      	ldr	r3, [r7, #12]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	460b      	mov	r3, r1
 8007034:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	887a      	ldrh	r2, [r7, #2]
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	887b      	ldrh	r3, [r7, #2]
 8007044:	0a1b      	lsrs	r3, r3, #8
 8007046:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	607a      	str	r2, [r7, #4]
 800704e:	887a      	ldrh	r2, [r7, #2]
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	701a      	strb	r2, [r3, #0]
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	0a1b      	lsrs	r3, r3, #8
 800707a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	607a      	str	r2, [r7, #4]
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	0a1b      	lsrs	r3, r3, #8
 800708c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	b2d2      	uxtb	r2, r2
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	0a1b      	lsrs	r3, r3, #8
 800709e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	607a      	str	r2, [r7, #4]
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	b2d2      	uxtb	r2, r2
 80070aa:	701a      	strb	r2, [r3, #0]
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00d      	beq.n	80070ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	1c53      	adds	r3, r2, #1
 80070d6:	613b      	str	r3, [r7, #16]
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	1c59      	adds	r1, r3, #1
 80070dc:	6179      	str	r1, [r7, #20]
 80070de:	7812      	ldrb	r2, [r2, #0]
 80070e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	607b      	str	r3, [r7, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f1      	bne.n	80070d2 <mem_cpy+0x1a>
	}
}
 80070ee:	bf00      	nop
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80070fa:	b480      	push	{r7}
 80070fc:	b087      	sub	sp, #28
 80070fe:	af00      	add	r7, sp, #0
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	617a      	str	r2, [r7, #20]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	3b01      	subs	r3, #1
 800711a:	607b      	str	r3, [r7, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f3      	bne.n	800710a <mem_set+0x10>
}
 8007122:	bf00      	nop
 8007124:	bf00      	nop
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007130:	b480      	push	{r7}
 8007132:	b089      	sub	sp, #36	@ 0x24
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	61fb      	str	r3, [r7, #28]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	61fa      	str	r2, [r7, #28]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	4619      	mov	r1, r3
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	61ba      	str	r2, [r7, #24]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	1acb      	subs	r3, r1, r3
 800715c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3b01      	subs	r3, #1
 8007162:	607b      	str	r3, [r7, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <mem_cmp+0x40>
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0eb      	beq.n	8007148 <mem_cmp+0x18>

	return r;
 8007170:	697b      	ldr	r3, [r7, #20]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3724      	adds	r7, #36	@ 0x24
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007188:	e002      	b.n	8007190 <chk_chr+0x12>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3301      	adds	r3, #1
 800718e:	607b      	str	r3, [r7, #4]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d005      	beq.n	80071a4 <chk_chr+0x26>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d1f2      	bne.n	800718a <chk_chr+0xc>
	return *str;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	781b      	ldrb	r3, [r3, #0]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80071be:	2300      	movs	r3, #0
 80071c0:	60bb      	str	r3, [r7, #8]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	e029      	b.n	800721c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80071c8:	4a27      	ldr	r2, [pc, #156]	@ (8007268 <chk_lock+0xb4>)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	011b      	lsls	r3, r3, #4
 80071ce:	4413      	add	r3, r2
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d01d      	beq.n	8007212 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80071d6:	4a24      	ldr	r2, [pc, #144]	@ (8007268 <chk_lock+0xb4>)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	4413      	add	r3, r2
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d116      	bne.n	8007216 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80071e8:	4a1f      	ldr	r2, [pc, #124]	@ (8007268 <chk_lock+0xb4>)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	011b      	lsls	r3, r3, #4
 80071ee:	4413      	add	r3, r2
 80071f0:	3304      	adds	r3, #4
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d10c      	bne.n	8007216 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80071fc:	4a1a      	ldr	r2, [pc, #104]	@ (8007268 <chk_lock+0xb4>)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	4413      	add	r3, r2
 8007204:	3308      	adds	r3, #8
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800720c:	429a      	cmp	r2, r3
 800720e:	d102      	bne.n	8007216 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007210:	e007      	b.n	8007222 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007212:	2301      	movs	r3, #1
 8007214:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3301      	adds	r3, #1
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d9d2      	bls.n	80071c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b02      	cmp	r3, #2
 8007226:	d109      	bne.n	800723c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d102      	bne.n	8007234 <chk_lock+0x80>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b02      	cmp	r3, #2
 8007232:	d101      	bne.n	8007238 <chk_lock+0x84>
 8007234:	2300      	movs	r3, #0
 8007236:	e010      	b.n	800725a <chk_lock+0xa6>
 8007238:	2312      	movs	r3, #18
 800723a:	e00e      	b.n	800725a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d108      	bne.n	8007254 <chk_lock+0xa0>
 8007242:	4a09      	ldr	r2, [pc, #36]	@ (8007268 <chk_lock+0xb4>)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	4413      	add	r3, r2
 800724a:	330c      	adds	r3, #12
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007252:	d101      	bne.n	8007258 <chk_lock+0xa4>
 8007254:	2310      	movs	r3, #16
 8007256:	e000      	b.n	800725a <chk_lock+0xa6>
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20006054 	.word	0x20006054

0800726c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007272:	2300      	movs	r3, #0
 8007274:	607b      	str	r3, [r7, #4]
 8007276:	e002      	b.n	800727e <enq_lock+0x12>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3301      	adds	r3, #1
 800727c:	607b      	str	r3, [r7, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d806      	bhi.n	8007292 <enq_lock+0x26>
 8007284:	4a09      	ldr	r2, [pc, #36]	@ (80072ac <enq_lock+0x40>)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	011b      	lsls	r3, r3, #4
 800728a:	4413      	add	r3, r2
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1f2      	bne.n	8007278 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b02      	cmp	r3, #2
 8007296:	bf14      	ite	ne
 8007298:	2301      	movne	r3, #1
 800729a:	2300      	moveq	r3, #0
 800729c:	b2db      	uxtb	r3, r3
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	20006054 	.word	0x20006054

080072b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	e01f      	b.n	8007300 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80072c0:	4a41      	ldr	r2, [pc, #260]	@ (80073c8 <inc_lock+0x118>)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	4413      	add	r3, r2
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d113      	bne.n	80072fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80072d2:	4a3d      	ldr	r2, [pc, #244]	@ (80073c8 <inc_lock+0x118>)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	011b      	lsls	r3, r3, #4
 80072d8:	4413      	add	r3, r2
 80072da:	3304      	adds	r3, #4
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d109      	bne.n	80072fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80072e6:	4a38      	ldr	r2, [pc, #224]	@ (80073c8 <inc_lock+0x118>)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	4413      	add	r3, r2
 80072ee:	3308      	adds	r3, #8
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d006      	beq.n	8007308 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3301      	adds	r3, #1
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d9dc      	bls.n	80072c0 <inc_lock+0x10>
 8007306:	e000      	b.n	800730a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007308:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2b02      	cmp	r3, #2
 800730e:	d132      	bne.n	8007376 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	e002      	b.n	800731c <inc_lock+0x6c>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3301      	adds	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d806      	bhi.n	8007330 <inc_lock+0x80>
 8007322:	4a29      	ldr	r2, [pc, #164]	@ (80073c8 <inc_lock+0x118>)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	4413      	add	r3, r2
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1f2      	bne.n	8007316 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d101      	bne.n	800733a <inc_lock+0x8a>
 8007336:	2300      	movs	r3, #0
 8007338:	e040      	b.n	80073bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	4922      	ldr	r1, [pc, #136]	@ (80073c8 <inc_lock+0x118>)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	440b      	add	r3, r1
 8007346:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	491e      	ldr	r1, [pc, #120]	@ (80073c8 <inc_lock+0x118>)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	011b      	lsls	r3, r3, #4
 8007352:	440b      	add	r3, r1
 8007354:	3304      	adds	r3, #4
 8007356:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	695a      	ldr	r2, [r3, #20]
 800735c:	491a      	ldr	r1, [pc, #104]	@ (80073c8 <inc_lock+0x118>)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	011b      	lsls	r3, r3, #4
 8007362:	440b      	add	r3, r1
 8007364:	3308      	adds	r3, #8
 8007366:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007368:	4a17      	ldr	r2, [pc, #92]	@ (80073c8 <inc_lock+0x118>)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	011b      	lsls	r3, r3, #4
 800736e:	4413      	add	r3, r2
 8007370:	330c      	adds	r3, #12
 8007372:	2200      	movs	r2, #0
 8007374:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d009      	beq.n	8007390 <inc_lock+0xe0>
 800737c:	4a12      	ldr	r2, [pc, #72]	@ (80073c8 <inc_lock+0x118>)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	011b      	lsls	r3, r3, #4
 8007382:	4413      	add	r3, r2
 8007384:	330c      	adds	r3, #12
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <inc_lock+0xe0>
 800738c:	2300      	movs	r3, #0
 800738e:	e015      	b.n	80073bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d108      	bne.n	80073a8 <inc_lock+0xf8>
 8007396:	4a0c      	ldr	r2, [pc, #48]	@ (80073c8 <inc_lock+0x118>)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	4413      	add	r3, r2
 800739e:	330c      	adds	r3, #12
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	3301      	adds	r3, #1
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	e001      	b.n	80073ac <inc_lock+0xfc>
 80073a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073ac:	4906      	ldr	r1, [pc, #24]	@ (80073c8 <inc_lock+0x118>)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	011b      	lsls	r3, r3, #4
 80073b2:	440b      	add	r3, r1
 80073b4:	330c      	adds	r3, #12
 80073b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	20006054 	.word	0x20006054

080073cc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	e010      	b.n	80073fc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80073da:	4a0d      	ldr	r2, [pc, #52]	@ (8007410 <clear_lock+0x44>)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	4413      	add	r3, r2
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d105      	bne.n	80073f6 <clear_lock+0x2a>
 80073ea:	4a09      	ldr	r2, [pc, #36]	@ (8007410 <clear_lock+0x44>)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	011b      	lsls	r3, r3, #4
 80073f0:	4413      	add	r3, r2
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3301      	adds	r3, #1
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d9eb      	bls.n	80073da <clear_lock+0xe>
	}
}
 8007402:	bf00      	nop
 8007404:	bf00      	nop
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	20006054 	.word	0x20006054

08007414 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	78db      	ldrb	r3, [r3, #3]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d034      	beq.n	8007492 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	7858      	ldrb	r0, [r3, #1]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007438:	2301      	movs	r3, #1
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	f7ff fd9a 	bl	8006f74 <disk_write>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007446:	2301      	movs	r3, #1
 8007448:	73fb      	strb	r3, [r7, #15]
 800744a:	e022      	b.n	8007492 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	1ad2      	subs	r2, r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	429a      	cmp	r2, r3
 8007460:	d217      	bcs.n	8007492 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	789b      	ldrb	r3, [r3, #2]
 8007466:	613b      	str	r3, [r7, #16]
 8007468:	e010      	b.n	800748c <sync_window+0x78>
					wsect += fs->fsize;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4413      	add	r3, r2
 8007472:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	7858      	ldrb	r0, [r3, #1]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800747e:	2301      	movs	r3, #1
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	f7ff fd77 	bl	8006f74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	3b01      	subs	r3, #1
 800748a:	613b      	str	r3, [r7, #16]
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d8eb      	bhi.n	800746a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d01b      	beq.n	80074ec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff ffad 	bl	8007414 <sync_window>
 80074ba:	4603      	mov	r3, r0
 80074bc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80074be:	7bfb      	ldrb	r3, [r7, #15]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d113      	bne.n	80074ec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	7858      	ldrb	r0, [r3, #1]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80074ce:	2301      	movs	r3, #1
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	f7ff fd2f 	bl	8006f34 <disk_read>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d004      	beq.n	80074e6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80074dc:	f04f 33ff 	mov.w	r3, #4294967295
 80074e0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	3b02      	subs	r3, #2
 8007504:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	3b02      	subs	r3, #2
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d301      	bcc.n	8007516 <clust2sect+0x20>
 8007512:	2300      	movs	r3, #0
 8007514:	e008      	b.n	8007528 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	895b      	ldrh	r3, [r3, #10]
 800751a:	461a      	mov	r2, r3
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	fb03 f202 	mul.w	r2, r3, r2
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007526:	4413      	add	r3, r2
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d904      	bls.n	8007554 <get_fat+0x20>
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d302      	bcc.n	800755a <get_fat+0x26>
		val = 1;	/* Internal error */
 8007554:	2301      	movs	r3, #1
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	e08e      	b.n	8007678 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800755a:	f04f 33ff 	mov.w	r3, #4294967295
 800755e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b03      	cmp	r3, #3
 8007566:	d061      	beq.n	800762c <get_fat+0xf8>
 8007568:	2b03      	cmp	r3, #3
 800756a:	dc7b      	bgt.n	8007664 <get_fat+0x130>
 800756c:	2b01      	cmp	r3, #1
 800756e:	d002      	beq.n	8007576 <get_fat+0x42>
 8007570:	2b02      	cmp	r3, #2
 8007572:	d041      	beq.n	80075f8 <get_fat+0xc4>
 8007574:	e076      	b.n	8007664 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	085b      	lsrs	r3, r3, #1
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4413      	add	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	0a5b      	lsrs	r3, r3, #9
 800758c:	4413      	add	r3, r2
 800758e:	4619      	mov	r1, r3
 8007590:	6938      	ldr	r0, [r7, #16]
 8007592:	f7ff ff83 	bl	800749c <move_window>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d166      	bne.n	800766a <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	60fa      	str	r2, [r7, #12]
 80075a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	4413      	add	r3, r2
 80075aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80075ae:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	0a5b      	lsrs	r3, r3, #9
 80075b8:	4413      	add	r3, r2
 80075ba:	4619      	mov	r1, r3
 80075bc:	6938      	ldr	r0, [r7, #16]
 80075be:	f7ff ff6d 	bl	800749c <move_window>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d152      	bne.n	800766e <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	4413      	add	r3, r2
 80075d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <get_fat+0xba>
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	091b      	lsrs	r3, r3, #4
 80075ec:	e002      	b.n	80075f4 <get_fat+0xc0>
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075f4:	617b      	str	r3, [r7, #20]
			break;
 80075f6:	e03f      	b.n	8007678 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	0a1b      	lsrs	r3, r3, #8
 8007600:	4413      	add	r3, r2
 8007602:	4619      	mov	r1, r3
 8007604:	6938      	ldr	r0, [r7, #16]
 8007606:	f7ff ff49 	bl	800749c <move_window>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d130      	bne.n	8007672 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800761e:	4413      	add	r3, r2
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff fcc7 	bl	8006fb4 <ld_word>
 8007626:	4603      	mov	r3, r0
 8007628:	617b      	str	r3, [r7, #20]
			break;
 800762a:	e025      	b.n	8007678 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	09db      	lsrs	r3, r3, #7
 8007634:	4413      	add	r3, r2
 8007636:	4619      	mov	r1, r3
 8007638:	6938      	ldr	r0, [r7, #16]
 800763a:	f7ff ff2f 	bl	800749c <move_window>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d118      	bne.n	8007676 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007652:	4413      	add	r3, r2
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff fcc5 	bl	8006fe4 <ld_dword>
 800765a:	4603      	mov	r3, r0
 800765c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007660:	617b      	str	r3, [r7, #20]
			break;
 8007662:	e009      	b.n	8007678 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007664:	2301      	movs	r3, #1
 8007666:	617b      	str	r3, [r7, #20]
 8007668:	e006      	b.n	8007678 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800766a:	bf00      	nop
 800766c:	e004      	b.n	8007678 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800766e:	bf00      	nop
 8007670:	e002      	b.n	8007678 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007672:	bf00      	nop
 8007674:	e000      	b.n	8007678 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007676:	bf00      	nop
		}
	}

	return val;
 8007678:	697b      	ldr	r3, [r7, #20]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007682:	b590      	push	{r4, r7, lr}
 8007684:	b089      	sub	sp, #36	@ 0x24
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800768e:	2302      	movs	r3, #2
 8007690:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b01      	cmp	r3, #1
 8007696:	f240 80d9 	bls.w	800784c <put_fat+0x1ca>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	f080 80d3 	bcs.w	800784c <put_fat+0x1ca>
		switch (fs->fs_type) {
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	f000 8096 	beq.w	80077dc <put_fat+0x15a>
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	f300 80cb 	bgt.w	800784c <put_fat+0x1ca>
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d002      	beq.n	80076c0 <put_fat+0x3e>
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d06e      	beq.n	800779c <put_fat+0x11a>
 80076be:	e0c5      	b.n	800784c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	61bb      	str	r3, [r7, #24]
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	085b      	lsrs	r3, r3, #1
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	4413      	add	r3, r2
 80076cc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	0a5b      	lsrs	r3, r3, #9
 80076d6:	4413      	add	r3, r2
 80076d8:	4619      	mov	r1, r3
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f7ff fede 	bl	800749c <move_window>
 80076e0:	4603      	mov	r3, r0
 80076e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076e4:	7ffb      	ldrb	r3, [r7, #31]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f040 80a9 	bne.w	800783e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	1c59      	adds	r1, r3, #1
 80076f6:	61b9      	str	r1, [r7, #24]
 80076f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fc:	4413      	add	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00d      	beq.n	8007726 <put_fat+0xa4>
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	b25b      	sxtb	r3, r3
 8007710:	f003 030f 	and.w	r3, r3, #15
 8007714:	b25a      	sxtb	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	b2db      	uxtb	r3, r3
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	b25b      	sxtb	r3, r3
 800771e:	4313      	orrs	r3, r2
 8007720:	b25b      	sxtb	r3, r3
 8007722:	b2db      	uxtb	r3, r3
 8007724:	e001      	b.n	800772a <put_fat+0xa8>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2201      	movs	r2, #1
 8007732:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	0a5b      	lsrs	r3, r3, #9
 800773c:	4413      	add	r3, r2
 800773e:	4619      	mov	r1, r3
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7ff feab 	bl	800749c <move_window>
 8007746:	4603      	mov	r3, r0
 8007748:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800774a:	7ffb      	ldrb	r3, [r7, #31]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d178      	bne.n	8007842 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775c:	4413      	add	r3, r2
 800775e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <put_fat+0xf0>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	091b      	lsrs	r3, r3, #4
 800776e:	b2db      	uxtb	r3, r3
 8007770:	e00e      	b.n	8007790 <put_fat+0x10e>
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	b25b      	sxtb	r3, r3
 8007778:	f023 030f 	bic.w	r3, r3, #15
 800777c:	b25a      	sxtb	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	0a1b      	lsrs	r3, r3, #8
 8007782:	b25b      	sxtb	r3, r3
 8007784:	f003 030f 	and.w	r3, r3, #15
 8007788:	b25b      	sxtb	r3, r3
 800778a:	4313      	orrs	r3, r2
 800778c:	b25b      	sxtb	r3, r3
 800778e:	b2db      	uxtb	r3, r3
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2201      	movs	r2, #1
 8007798:	70da      	strb	r2, [r3, #3]
			break;
 800779a:	e057      	b.n	800784c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	0a1b      	lsrs	r3, r3, #8
 80077a4:	4413      	add	r3, r2
 80077a6:	4619      	mov	r1, r3
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f7ff fe77 	bl	800749c <move_window>
 80077ae:	4603      	mov	r3, r0
 80077b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077b2:	7ffb      	ldrb	r3, [r7, #31]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d146      	bne.n	8007846 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80077c6:	4413      	add	r3, r2
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	b292      	uxth	r2, r2
 80077cc:	4611      	mov	r1, r2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff fc2b 	bl	800702a <st_word>
			fs->wflag = 1;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	70da      	strb	r2, [r3, #3]
			break;
 80077da:	e037      	b.n	800784c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	09db      	lsrs	r3, r3, #7
 80077e4:	4413      	add	r3, r2
 80077e6:	4619      	mov	r1, r3
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f7ff fe57 	bl	800749c <move_window>
 80077ee:	4603      	mov	r3, r0
 80077f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077f2:	7ffb      	ldrb	r3, [r7, #31]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d128      	bne.n	800784a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800780c:	4413      	add	r3, r2
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff fbe8 	bl	8006fe4 <ld_dword>
 8007814:	4603      	mov	r3, r0
 8007816:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800781a:	4323      	orrs	r3, r4
 800781c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800782c:	4413      	add	r3, r2
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff fc15 	bl	8007060 <st_dword>
			fs->wflag = 1;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	70da      	strb	r2, [r3, #3]
			break;
 800783c:	e006      	b.n	800784c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800783e:	bf00      	nop
 8007840:	e004      	b.n	800784c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007842:	bf00      	nop
 8007844:	e002      	b.n	800784c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007846:	bf00      	nop
 8007848:	e000      	b.n	800784c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800784a:	bf00      	nop
		}
	}
	return res;
 800784c:	7ffb      	ldrb	r3, [r7, #31]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3724      	adds	r7, #36	@ 0x24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd90      	pop	{r4, r7, pc}

08007856 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b088      	sub	sp, #32
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d904      	bls.n	800787c <remove_chain+0x26>
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	429a      	cmp	r2, r3
 800787a:	d301      	bcc.n	8007880 <remove_chain+0x2a>
 800787c:	2302      	movs	r3, #2
 800787e:	e04b      	b.n	8007918 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00c      	beq.n	80078a0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007886:	f04f 32ff 	mov.w	r2, #4294967295
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	69b8      	ldr	r0, [r7, #24]
 800788e:	f7ff fef8 	bl	8007682 <put_fat>
 8007892:	4603      	mov	r3, r0
 8007894:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007896:	7ffb      	ldrb	r3, [r7, #31]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <remove_chain+0x4a>
 800789c:	7ffb      	ldrb	r3, [r7, #31]
 800789e:	e03b      	b.n	8007918 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80078a0:	68b9      	ldr	r1, [r7, #8]
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f7ff fe46 	bl	8007534 <get_fat>
 80078a8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d031      	beq.n	8007914 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d101      	bne.n	80078ba <remove_chain+0x64>
 80078b6:	2302      	movs	r3, #2
 80078b8:	e02e      	b.n	8007918 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c0:	d101      	bne.n	80078c6 <remove_chain+0x70>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e028      	b.n	8007918 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80078c6:	2200      	movs	r2, #0
 80078c8:	68b9      	ldr	r1, [r7, #8]
 80078ca:	69b8      	ldr	r0, [r7, #24]
 80078cc:	f7ff fed9 	bl	8007682 <put_fat>
 80078d0:	4603      	mov	r3, r0
 80078d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80078d4:	7ffb      	ldrb	r3, [r7, #31]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <remove_chain+0x88>
 80078da:	7ffb      	ldrb	r3, [r7, #31]
 80078dc:	e01c      	b.n	8007918 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	695a      	ldr	r2, [r3, #20]
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	3b02      	subs	r3, #2
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d20b      	bcs.n	8007904 <remove_chain+0xae>
			fs->free_clst++;
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	791b      	ldrb	r3, [r3, #4]
 80078fa:	f043 0301 	orr.w	r3, r3, #1
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	429a      	cmp	r2, r3
 8007910:	d3c6      	bcc.n	80078a0 <remove_chain+0x4a>
 8007912:	e000      	b.n	8007916 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007914:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3720      	adds	r7, #32
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10d      	bne.n	8007952 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d004      	beq.n	800794c <create_chain+0x2c>
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	429a      	cmp	r2, r3
 800794a:	d31b      	bcc.n	8007984 <create_chain+0x64>
 800794c:	2301      	movs	r3, #1
 800794e:	61bb      	str	r3, [r7, #24]
 8007950:	e018      	b.n	8007984 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff fded 	bl	8007534 <get_fat>
 800795a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d801      	bhi.n	8007966 <create_chain+0x46>
 8007962:	2301      	movs	r3, #1
 8007964:	e070      	b.n	8007a48 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796c:	d101      	bne.n	8007972 <create_chain+0x52>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	e06a      	b.n	8007a48 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	429a      	cmp	r2, r3
 800797a:	d201      	bcs.n	8007980 <create_chain+0x60>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	e063      	b.n	8007a48 <create_chain+0x128>
		scl = clst;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	3301      	adds	r3, #1
 800798c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	429a      	cmp	r2, r3
 8007996:	d307      	bcc.n	80079a8 <create_chain+0x88>
				ncl = 2;
 8007998:	2302      	movs	r3, #2
 800799a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800799c:	69fa      	ldr	r2, [r7, #28]
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d901      	bls.n	80079a8 <create_chain+0x88>
 80079a4:	2300      	movs	r3, #0
 80079a6:	e04f      	b.n	8007a48 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80079a8:	69f9      	ldr	r1, [r7, #28]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff fdc2 	bl	8007534 <get_fat>
 80079b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00e      	beq.n	80079d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d003      	beq.n	80079c6 <create_chain+0xa6>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c4:	d101      	bne.n	80079ca <create_chain+0xaa>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	e03e      	b.n	8007a48 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d1da      	bne.n	8007988 <create_chain+0x68>
 80079d2:	2300      	movs	r3, #0
 80079d4:	e038      	b.n	8007a48 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80079d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80079d8:	f04f 32ff 	mov.w	r2, #4294967295
 80079dc:	69f9      	ldr	r1, [r7, #28]
 80079de:	6938      	ldr	r0, [r7, #16]
 80079e0:	f7ff fe4f 	bl	8007682 <put_fat>
 80079e4:	4603      	mov	r3, r0
 80079e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d109      	bne.n	8007a02 <create_chain+0xe2>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d006      	beq.n	8007a02 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6938      	ldr	r0, [r7, #16]
 80079fa:	f7ff fe42 	bl	8007682 <put_fat>
 80079fe:	4603      	mov	r3, r0
 8007a00:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d116      	bne.n	8007a36 <create_chain+0x116>
		fs->last_clst = ncl;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	695a      	ldr	r2, [r3, #20]
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	3b02      	subs	r3, #2
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d804      	bhi.n	8007a26 <create_chain+0x106>
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	1e5a      	subs	r2, r3, #1
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	791b      	ldrb	r3, [r3, #4]
 8007a2a:	f043 0301 	orr.w	r3, r3, #1
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	711a      	strb	r2, [r3, #4]
 8007a34:	e007      	b.n	8007a46 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d102      	bne.n	8007a42 <create_chain+0x122>
 8007a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a40:	e000      	b.n	8007a44 <create_chain+0x124>
 8007a42:	2301      	movs	r3, #1
 8007a44:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007a46:	69fb      	ldr	r3, [r7, #28]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3720      	adds	r7, #32
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a64:	3304      	adds	r3, #4
 8007a66:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	0a5b      	lsrs	r3, r3, #9
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	8952      	ldrh	r2, [r2, #10]
 8007a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a74:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	1d1a      	adds	r2, r3, #4
 8007a7a:	613a      	str	r2, [r7, #16]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <clmt_clust+0x3a>
 8007a86:	2300      	movs	r3, #0
 8007a88:	e010      	b.n	8007aac <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d307      	bcc.n	8007aa2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	617b      	str	r3, [r7, #20]
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007aa0:	e7e9      	b.n	8007a76 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007aa2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	4413      	add	r3, r2
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	371c      	adds	r7, #28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ace:	d204      	bcs.n	8007ada <dir_sdi+0x22>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	f003 031f 	and.w	r3, r3, #31
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <dir_sdi+0x26>
		return FR_INT_ERR;
 8007ada:	2302      	movs	r3, #2
 8007adc:	e063      	b.n	8007ba6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d106      	bne.n	8007afe <dir_sdi+0x46>
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d902      	bls.n	8007afe <dir_sdi+0x46>
		clst = fs->dirbase;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10c      	bne.n	8007b1e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	8912      	ldrh	r2, [r2, #8]
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d301      	bcc.n	8007b14 <dir_sdi+0x5c>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e048      	b.n	8007ba6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	61da      	str	r2, [r3, #28]
 8007b1c:	e029      	b.n	8007b72 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	895b      	ldrh	r3, [r3, #10]
 8007b22:	025b      	lsls	r3, r3, #9
 8007b24:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b26:	e019      	b.n	8007b5c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6979      	ldr	r1, [r7, #20]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff fd01 	bl	8007534 <get_fat>
 8007b32:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3a:	d101      	bne.n	8007b40 <dir_sdi+0x88>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e032      	b.n	8007ba6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d904      	bls.n	8007b50 <dir_sdi+0x98>
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d301      	bcc.n	8007b54 <dir_sdi+0x9c>
 8007b50:	2302      	movs	r3, #2
 8007b52:	e028      	b.n	8007ba6 <dir_sdi+0xee>
			ofs -= csz;
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d2e1      	bcs.n	8007b28 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007b64:	6979      	ldr	r1, [r7, #20]
 8007b66:	6938      	ldr	r0, [r7, #16]
 8007b68:	f7ff fcc5 	bl	80074f6 <clust2sect>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <dir_sdi+0xcc>
 8007b80:	2302      	movs	r3, #2
 8007b82:	e010      	b.n	8007ba6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	69da      	ldr	r2, [r3, #28]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	0a5b      	lsrs	r3, r3, #9
 8007b8c:	441a      	add	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9e:	441a      	add	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b086      	sub	sp, #24
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	3320      	adds	r3, #32
 8007bc4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <dir_next+0x28>
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bd4:	d301      	bcc.n	8007bda <dir_next+0x2c>
 8007bd6:	2304      	movs	r3, #4
 8007bd8:	e0aa      	b.n	8007d30 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f040 8098 	bne.w	8007d16 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10b      	bne.n	8007c10 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	8912      	ldrh	r2, [r2, #8]
 8007c00:	4293      	cmp	r3, r2
 8007c02:	f0c0 8088 	bcc.w	8007d16 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	61da      	str	r2, [r3, #28]
 8007c0c:	2304      	movs	r3, #4
 8007c0e:	e08f      	b.n	8007d30 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	0a5b      	lsrs	r3, r3, #9
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	8952      	ldrh	r2, [r2, #10]
 8007c18:	3a01      	subs	r2, #1
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d17a      	bne.n	8007d16 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	4619      	mov	r1, r3
 8007c28:	4610      	mov	r0, r2
 8007c2a:	f7ff fc83 	bl	8007534 <get_fat>
 8007c2e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d801      	bhi.n	8007c3a <dir_next+0x8c>
 8007c36:	2302      	movs	r3, #2
 8007c38:	e07a      	b.n	8007d30 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c40:	d101      	bne.n	8007c46 <dir_next+0x98>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e074      	b.n	8007d30 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d358      	bcc.n	8007d02 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d104      	bne.n	8007c60 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	61da      	str	r2, [r3, #28]
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	e067      	b.n	8007d30 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	4619      	mov	r1, r3
 8007c68:	4610      	mov	r0, r2
 8007c6a:	f7ff fe59 	bl	8007920 <create_chain>
 8007c6e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <dir_next+0xcc>
 8007c76:	2307      	movs	r3, #7
 8007c78:	e05a      	b.n	8007d30 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d101      	bne.n	8007c84 <dir_next+0xd6>
 8007c80:	2302      	movs	r3, #2
 8007c82:	e055      	b.n	8007d30 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8a:	d101      	bne.n	8007c90 <dir_next+0xe2>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e04f      	b.n	8007d30 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f7ff fbbf 	bl	8007414 <sync_window>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <dir_next+0xf2>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e047      	b.n	8007d30 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3334      	adds	r3, #52	@ 0x34
 8007ca4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff fa25 	bl	80070fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	613b      	str	r3, [r7, #16]
 8007cb4:	6979      	ldr	r1, [r7, #20]
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f7ff fc1d 	bl	80074f6 <clust2sect>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007cc2:	e012      	b.n	8007cea <dir_next+0x13c>
						fs->wflag = 1;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7ff fba2 	bl	8007414 <sync_window>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <dir_next+0x12c>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e02a      	b.n	8007d30 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	613b      	str	r3, [r7, #16]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	631a      	str	r2, [r3, #48]	@ 0x30
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	895b      	ldrh	r3, [r3, #10]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d3e6      	bcc.n	8007cc4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	1ad2      	subs	r2, r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007d08:	6979      	ldr	r1, [r7, #20]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f7ff fbf3 	bl	80074f6 <clust2sect>
 8007d10:	4602      	mov	r2, r0
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d28:	441a      	add	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007d48:	2100      	movs	r1, #0
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff feb4 	bl	8007ab8 <dir_sdi>
 8007d50:	4603      	mov	r3, r0
 8007d52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d12b      	bne.n	8007db2 <dir_alloc+0x7a>
		n = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	4619      	mov	r1, r3
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff fb99 	bl	800749c <move_window>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d11d      	bne.n	8007db0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2be5      	cmp	r3, #229	@ 0xe5
 8007d7c:	d004      	beq.n	8007d88 <dir_alloc+0x50>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d107      	bne.n	8007d98 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	613b      	str	r3, [r7, #16]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d102      	bne.n	8007d9c <dir_alloc+0x64>
 8007d96:	e00c      	b.n	8007db2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007d98:	2300      	movs	r3, #0
 8007d9a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff ff05 	bl	8007bae <dir_next>
 8007da4:	4603      	mov	r3, r0
 8007da6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0d7      	beq.n	8007d5e <dir_alloc+0x26>
 8007dae:	e000      	b.n	8007db2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007db0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	d101      	bne.n	8007dbc <dir_alloc+0x84>
 8007db8:	2307      	movs	r3, #7
 8007dba:	75fb      	strb	r3, [r7, #23]
	return res;
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	331a      	adds	r3, #26
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff f8ed 	bl	8006fb4 <ld_word>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d109      	bne.n	8007dfa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	3314      	adds	r3, #20
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7ff f8e2 	bl	8006fb4 <ld_word>
 8007df0:	4603      	mov	r3, r0
 8007df2:	041b      	lsls	r3, r3, #16
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	331a      	adds	r3, #26
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	b292      	uxth	r2, r2
 8007e18:	4611      	mov	r1, r2
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7ff f905 	bl	800702a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d109      	bne.n	8007e3c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f103 0214 	add.w	r2, r3, #20
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	0c1b      	lsrs	r3, r3, #16
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	4619      	mov	r1, r3
 8007e36:	4610      	mov	r0, r2
 8007e38:	f7ff f8f7 	bl	800702a <st_word>
	}
}
 8007e3c:	bf00      	nop
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007e44:	b590      	push	{r4, r7, lr}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	331a      	adds	r3, #26
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff f8ae 	bl	8006fb4 <ld_word>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <cmp_lfn+0x1e>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e059      	b.n	8007f16 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e6a:	1e5a      	subs	r2, r3, #1
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	4413      	add	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007e78:	2301      	movs	r3, #1
 8007e7a:	81fb      	strh	r3, [r7, #14]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	613b      	str	r3, [r7, #16]
 8007e80:	e033      	b.n	8007eea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007e82:	4a27      	ldr	r2, [pc, #156]	@ (8007f20 <cmp_lfn+0xdc>)
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	4413      	add	r3, r2
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	4413      	add	r3, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff f88f 	bl	8006fb4 <ld_word>
 8007e96:	4603      	mov	r3, r0
 8007e98:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007e9a:	89fb      	ldrh	r3, [r7, #14]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d01a      	beq.n	8007ed6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2bfe      	cmp	r3, #254	@ 0xfe
 8007ea4:	d812      	bhi.n	8007ecc <cmp_lfn+0x88>
 8007ea6:	89bb      	ldrh	r3, [r7, #12]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f001 feeb 	bl	8009c84 <ff_wtoupper>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	461c      	mov	r4, r3
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	617a      	str	r2, [r7, #20]
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 fedf 	bl	8009c84 <ff_wtoupper>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	429c      	cmp	r4, r3
 8007eca:	d001      	beq.n	8007ed0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007ecc:	2300      	movs	r3, #0
 8007ece:	e022      	b.n	8007f16 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007ed0:	89bb      	ldrh	r3, [r7, #12]
 8007ed2:	81fb      	strh	r3, [r7, #14]
 8007ed4:	e006      	b.n	8007ee4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007ed6:	89bb      	ldrh	r3, [r7, #12]
 8007ed8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d001      	beq.n	8007ee4 <cmp_lfn+0xa0>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	e018      	b.n	8007f16 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	613b      	str	r3, [r7, #16]
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b0c      	cmp	r3, #12
 8007eee:	d9c8      	bls.n	8007e82 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00b      	beq.n	8007f14 <cmp_lfn+0xd0>
 8007efc:	89fb      	ldrh	r3, [r7, #14]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d008      	beq.n	8007f14 <cmp_lfn+0xd0>
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	4413      	add	r3, r2
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <cmp_lfn+0xd0>
 8007f10:	2300      	movs	r3, #0
 8007f12:	e000      	b.n	8007f16 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007f14:	2301      	movs	r3, #1
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd90      	pop	{r4, r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	0801b5ac 	.word	0x0801b5ac

08007f24 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	4611      	mov	r1, r2
 8007f30:	461a      	mov	r2, r3
 8007f32:	460b      	mov	r3, r1
 8007f34:	71fb      	strb	r3, [r7, #7]
 8007f36:	4613      	mov	r3, r2
 8007f38:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	330d      	adds	r3, #13
 8007f3e:	79ba      	ldrb	r2, [r7, #6]
 8007f40:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	330b      	adds	r3, #11
 8007f46:	220f      	movs	r2, #15
 8007f48:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	330c      	adds	r3, #12
 8007f4e:	2200      	movs	r2, #0
 8007f50:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	331a      	adds	r3, #26
 8007f56:	2100      	movs	r1, #0
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff f866 	bl	800702a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007f5e:	79fb      	ldrb	r3, [r7, #7]
 8007f60:	1e5a      	subs	r2, r3, #1
 8007f62:	4613      	mov	r3, r2
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	4413      	add	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	82fb      	strh	r3, [r7, #22]
 8007f72:	2300      	movs	r3, #0
 8007f74:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007f76:	8afb      	ldrh	r3, [r7, #22]
 8007f78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d007      	beq.n	8007f90 <put_lfn+0x6c>
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	61fa      	str	r2, [r7, #28]
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007f90:	4a17      	ldr	r2, [pc, #92]	@ (8007ff0 <put_lfn+0xcc>)
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	4413      	add	r3, r2
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	8afa      	ldrh	r2, [r7, #22]
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7ff f841 	bl	800702a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007fa8:	8afb      	ldrh	r3, [r7, #22]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d102      	bne.n	8007fb4 <put_lfn+0x90>
 8007fae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fb2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	61bb      	str	r3, [r7, #24]
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	2b0c      	cmp	r3, #12
 8007fbe:	d9da      	bls.n	8007f76 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007fc0:	8afb      	ldrh	r3, [r7, #22]
 8007fc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d006      	beq.n	8007fd8 <put_lfn+0xb4>
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	881b      	ldrh	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d103      	bne.n	8007fe0 <put_lfn+0xbc>
 8007fd8:	79fb      	ldrb	r3, [r7, #7]
 8007fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fde:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	79fa      	ldrb	r2, [r7, #7]
 8007fe4:	701a      	strb	r2, [r3, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	3720      	adds	r7, #32
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	0801b5ac 	.word	0x0801b5ac

08007ff4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08c      	sub	sp, #48	@ 0x30
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008002:	220b      	movs	r2, #11
 8008004:	68b9      	ldr	r1, [r7, #8]
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f7ff f856 	bl	80070b8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b05      	cmp	r3, #5
 8008010:	d92b      	bls.n	800806a <gen_numname+0x76>
		sr = seq;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008016:	e022      	b.n	800805e <gen_numname+0x6a>
			wc = *lfn++;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	1c9a      	adds	r2, r3, #2
 800801c:	607a      	str	r2, [r7, #4]
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8008022:	2300      	movs	r3, #0
 8008024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008026:	e017      	b.n	8008058 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	005a      	lsls	r2, r3, #1
 800802c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	4413      	add	r3, r2
 8008034:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008036:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008038:	085b      	lsrs	r3, r3, #1
 800803a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <gen_numname+0x5e>
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800804c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8008050:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008054:	3301      	adds	r3, #1
 8008056:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805a:	2b0f      	cmp	r3, #15
 800805c:	d9e4      	bls.n	8008028 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1d8      	bne.n	8008018 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800806a:	2307      	movs	r3, #7
 800806c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	b2db      	uxtb	r3, r3
 8008078:	3330      	adds	r3, #48	@ 0x30
 800807a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800807e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008082:	2b39      	cmp	r3, #57	@ 0x39
 8008084:	d904      	bls.n	8008090 <gen_numname+0x9c>
 8008086:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800808a:	3307      	adds	r3, #7
 800808c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8008090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008092:	1e5a      	subs	r2, r3, #1
 8008094:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008096:	3330      	adds	r3, #48	@ 0x30
 8008098:	443b      	add	r3, r7
 800809a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800809e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	091b      	lsrs	r3, r3, #4
 80080a6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1df      	bne.n	800806e <gen_numname+0x7a>
	ns[i] = '~';
 80080ae:	f107 0214 	add.w	r2, r7, #20
 80080b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b4:	4413      	add	r3, r2
 80080b6:	227e      	movs	r2, #126	@ 0x7e
 80080b8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80080ba:	2300      	movs	r3, #0
 80080bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80080be:	e002      	b.n	80080c6 <gen_numname+0xd2>
 80080c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c2:	3301      	adds	r3, #1
 80080c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80080c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d205      	bcs.n	80080da <gen_numname+0xe6>
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d2:	4413      	add	r3, r2
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	d1f2      	bne.n	80080c0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80080da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080dc:	2b07      	cmp	r3, #7
 80080de:	d807      	bhi.n	80080f0 <gen_numname+0xfc>
 80080e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80080e6:	3330      	adds	r3, #48	@ 0x30
 80080e8:	443b      	add	r3, r7
 80080ea:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80080ee:	e000      	b.n	80080f2 <gen_numname+0xfe>
 80080f0:	2120      	movs	r1, #32
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	460a      	mov	r2, r1
 80080fe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008102:	2b07      	cmp	r3, #7
 8008104:	d9e9      	bls.n	80080da <gen_numname+0xe6>
}
 8008106:	bf00      	nop
 8008108:	bf00      	nop
 800810a:	3730      	adds	r7, #48	@ 0x30
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800811c:	230b      	movs	r3, #11
 800811e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	b2da      	uxtb	r2, r3
 8008124:	0852      	lsrs	r2, r2, #1
 8008126:	01db      	lsls	r3, r3, #7
 8008128:	4313      	orrs	r3, r2
 800812a:	b2da      	uxtb	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	1c59      	adds	r1, r3, #1
 8008130:	6079      	str	r1, [r7, #4]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	4413      	add	r3, r2
 8008136:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	3b01      	subs	r3, #1
 800813c:	60bb      	str	r3, [r7, #8]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1ed      	bne.n	8008120 <sum_sfn+0x10>
	return sum;
 8008144:	7bfb      	ldrb	r3, [r7, #15]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b086      	sub	sp, #24
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008160:	2100      	movs	r1, #0
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff fca8 	bl	8007ab8 <dir_sdi>
 8008168:	4603      	mov	r3, r0
 800816a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800816c:	7dfb      	ldrb	r3, [r7, #23]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <dir_find+0x24>
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	e0a9      	b.n	80082ca <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008176:	23ff      	movs	r3, #255	@ 0xff
 8008178:	753b      	strb	r3, [r7, #20]
 800817a:	7d3b      	ldrb	r3, [r7, #20]
 800817c:	757b      	strb	r3, [r7, #21]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f04f 32ff 	mov.w	r2, #4294967295
 8008184:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	4619      	mov	r1, r3
 800818c:	6938      	ldr	r0, [r7, #16]
 800818e:	f7ff f985 	bl	800749c <move_window>
 8008192:	4603      	mov	r3, r0
 8008194:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008196:	7dfb      	ldrb	r3, [r7, #23]
 8008198:	2b00      	cmp	r3, #0
 800819a:	f040 8090 	bne.w	80082be <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80081a6:	7dbb      	ldrb	r3, [r7, #22]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d102      	bne.n	80081b2 <dir_find+0x60>
 80081ac:	2304      	movs	r3, #4
 80081ae:	75fb      	strb	r3, [r7, #23]
 80081b0:	e08a      	b.n	80082c8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	330b      	adds	r3, #11
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081be:	73fb      	strb	r3, [r7, #15]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	7bfa      	ldrb	r2, [r7, #15]
 80081c4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80081c6:	7dbb      	ldrb	r3, [r7, #22]
 80081c8:	2be5      	cmp	r3, #229	@ 0xe5
 80081ca:	d007      	beq.n	80081dc <dir_find+0x8a>
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
 80081ce:	f003 0308 	and.w	r3, r3, #8
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d009      	beq.n	80081ea <dir_find+0x98>
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	2b0f      	cmp	r3, #15
 80081da:	d006      	beq.n	80081ea <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80081dc:	23ff      	movs	r3, #255	@ 0xff
 80081de:	757b      	strb	r3, [r7, #21]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f04f 32ff 	mov.w	r2, #4294967295
 80081e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80081e8:	e05e      	b.n	80082a8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	2b0f      	cmp	r3, #15
 80081ee:	d136      	bne.n	800825e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80081f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d154      	bne.n	80082a8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80081fe:	7dbb      	ldrb	r3, [r7, #22]
 8008200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00d      	beq.n	8008224 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	7b5b      	ldrb	r3, [r3, #13]
 800820e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008210:	7dbb      	ldrb	r3, [r7, #22]
 8008212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008216:	75bb      	strb	r3, [r7, #22]
 8008218:	7dbb      	ldrb	r3, [r7, #22]
 800821a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	695a      	ldr	r2, [r3, #20]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008224:	7dba      	ldrb	r2, [r7, #22]
 8008226:	7d7b      	ldrb	r3, [r7, #21]
 8008228:	429a      	cmp	r2, r3
 800822a:	d115      	bne.n	8008258 <dir_find+0x106>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	330d      	adds	r3, #13
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	7d3a      	ldrb	r2, [r7, #20]
 8008236:	429a      	cmp	r2, r3
 8008238:	d10e      	bne.n	8008258 <dir_find+0x106>
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	4619      	mov	r1, r3
 8008244:	4610      	mov	r0, r2
 8008246:	f7ff fdfd 	bl	8007e44 <cmp_lfn>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <dir_find+0x106>
 8008250:	7d7b      	ldrb	r3, [r7, #21]
 8008252:	3b01      	subs	r3, #1
 8008254:	b2db      	uxtb	r3, r3
 8008256:	e000      	b.n	800825a <dir_find+0x108>
 8008258:	23ff      	movs	r3, #255	@ 0xff
 800825a:	757b      	strb	r3, [r7, #21]
 800825c:	e024      	b.n	80082a8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800825e:	7d7b      	ldrb	r3, [r7, #21]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d109      	bne.n	8008278 <dir_find+0x126>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	4618      	mov	r0, r3
 800826a:	f7ff ff51 	bl	8008110 <sum_sfn>
 800826e:	4603      	mov	r3, r0
 8008270:	461a      	mov	r2, r3
 8008272:	7d3b      	ldrb	r3, [r7, #20]
 8008274:	4293      	cmp	r3, r2
 8008276:	d024      	beq.n	80082c2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10a      	bne.n	800829c <dir_find+0x14a>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a18      	ldr	r0, [r3, #32]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	3324      	adds	r3, #36	@ 0x24
 800828e:	220b      	movs	r2, #11
 8008290:	4619      	mov	r1, r3
 8008292:	f7fe ff4d 	bl	8007130 <mem_cmp>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d014      	beq.n	80082c6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800829c:	23ff      	movs	r3, #255	@ 0xff
 800829e:	757b      	strb	r3, [r7, #21]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f04f 32ff 	mov.w	r2, #4294967295
 80082a6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80082a8:	2100      	movs	r1, #0
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff fc7f 	bl	8007bae <dir_next>
 80082b0:	4603      	mov	r3, r0
 80082b2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f43f af65 	beq.w	8008186 <dir_find+0x34>
 80082bc:	e004      	b.n	80082c8 <dir_find+0x176>
		if (res != FR_OK) break;
 80082be:	bf00      	nop
 80082c0:	e002      	b.n	80082c8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80082c2:	bf00      	nop
 80082c4:	e000      	b.n	80082c8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80082c6:	bf00      	nop

	return res;
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08c      	sub	sp, #48	@ 0x30
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80082e8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <dir_register+0x20>
 80082f0:	2306      	movs	r3, #6
 80082f2:	e0e0      	b.n	80084b6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80082f4:	2300      	movs	r3, #0
 80082f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80082f8:	e002      	b.n	8008300 <dir_register+0x2c>
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	3301      	adds	r3, #1
 80082fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	68da      	ldr	r2, [r3, #12]
 8008304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	4413      	add	r3, r2
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1f4      	bne.n	80082fa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8008316:	f107 030c 	add.w	r3, r7, #12
 800831a:	220c      	movs	r2, #12
 800831c:	4618      	mov	r0, r3
 800831e:	f7fe fecb 	bl	80070b8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008322:	7dfb      	ldrb	r3, [r7, #23]
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	d032      	beq.n	8008392 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2240      	movs	r2, #64	@ 0x40
 8008330:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008334:	2301      	movs	r3, #1
 8008336:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008338:	e016      	b.n	8008368 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	68da      	ldr	r2, [r3, #12]
 8008344:	f107 010c 	add.w	r1, r7, #12
 8008348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834a:	f7ff fe53 	bl	8007ff4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff feff 	bl	8008152 <dir_find>
 8008354:	4603      	mov	r3, r0
 8008356:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800835a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008364:	3301      	adds	r3, #1
 8008366:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836a:	2b63      	cmp	r3, #99	@ 0x63
 800836c:	d9e5      	bls.n	800833a <dir_register+0x66>
 800836e:	e000      	b.n	8008372 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008370:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008374:	2b64      	cmp	r3, #100	@ 0x64
 8008376:	d101      	bne.n	800837c <dir_register+0xa8>
 8008378:	2307      	movs	r3, #7
 800837a:	e09c      	b.n	80084b6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800837c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008380:	2b04      	cmp	r3, #4
 8008382:	d002      	beq.n	800838a <dir_register+0xb6>
 8008384:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008388:	e095      	b.n	80084b6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800838a:	7dfa      	ldrb	r2, [r7, #23]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d007      	beq.n	80083ac <dir_register+0xd8>
 800839c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839e:	330c      	adds	r3, #12
 80083a0:	4a47      	ldr	r2, [pc, #284]	@ (80084c0 <dir_register+0x1ec>)
 80083a2:	fba2 2303 	umull	r2, r3, r2, r3
 80083a6:	089b      	lsrs	r3, r3, #2
 80083a8:	3301      	adds	r3, #1
 80083aa:	e000      	b.n	80083ae <dir_register+0xda>
 80083ac:	2301      	movs	r3, #1
 80083ae:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80083b0:	6a39      	ldr	r1, [r7, #32]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7ff fcc0 	bl	8007d38 <dir_alloc>
 80083b8:	4603      	mov	r3, r0
 80083ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80083be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d148      	bne.n	8008458 <dir_register+0x184>
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	623b      	str	r3, [r7, #32]
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d042      	beq.n	8008458 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695a      	ldr	r2, [r3, #20]
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	015b      	lsls	r3, r3, #5
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7ff fb6a 	bl	8007ab8 <dir_sdi>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80083ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d132      	bne.n	8008458 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3324      	adds	r3, #36	@ 0x24
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff fe8a 	bl	8008110 <sum_sfn>
 80083fc:	4603      	mov	r3, r0
 80083fe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	4619      	mov	r1, r3
 8008406:	69f8      	ldr	r0, [r7, #28]
 8008408:	f7ff f848 	bl	800749c <move_window>
 800840c:	4603      	mov	r3, r0
 800840e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8008412:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008416:	2b00      	cmp	r3, #0
 8008418:	d11d      	bne.n	8008456 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	68d8      	ldr	r0, [r3, #12]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a19      	ldr	r1, [r3, #32]
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	b2da      	uxtb	r2, r3
 8008426:	7efb      	ldrb	r3, [r7, #27]
 8008428:	f7ff fd7c 	bl	8007f24 <put_lfn>
				fs->wflag = 1;
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	2201      	movs	r2, #1
 8008430:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008432:	2100      	movs	r1, #0
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff fbba 	bl	8007bae <dir_next>
 800843a:	4603      	mov	r3, r0
 800843c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008440:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008444:	2b00      	cmp	r3, #0
 8008446:	d107      	bne.n	8008458 <dir_register+0x184>
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	3b01      	subs	r3, #1
 800844c:	623b      	str	r3, [r7, #32]
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1d5      	bne.n	8008400 <dir_register+0x12c>
 8008454:	e000      	b.n	8008458 <dir_register+0x184>
				if (res != FR_OK) break;
 8008456:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008458:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800845c:	2b00      	cmp	r3, #0
 800845e:	d128      	bne.n	80084b2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	4619      	mov	r1, r3
 8008466:	69f8      	ldr	r0, [r7, #28]
 8008468:	f7ff f818 	bl	800749c <move_window>
 800846c:	4603      	mov	r3, r0
 800846e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008476:	2b00      	cmp	r3, #0
 8008478:	d11b      	bne.n	80084b2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	2220      	movs	r2, #32
 8008480:	2100      	movs	r1, #0
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fe39 	bl	80070fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a18      	ldr	r0, [r3, #32]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3324      	adds	r3, #36	@ 0x24
 8008490:	220b      	movs	r2, #11
 8008492:	4619      	mov	r1, r3
 8008494:	f7fe fe10 	bl	80070b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	330c      	adds	r3, #12
 80084a4:	f002 0218 	and.w	r2, r2, #24
 80084a8:	b2d2      	uxtb	r2, r2
 80084aa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	2201      	movs	r2, #1
 80084b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80084b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3730      	adds	r7, #48	@ 0x30
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	4ec4ec4f 	.word	0x4ec4ec4f

080084c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08a      	sub	sp, #40	@ 0x28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	613b      	str	r3, [r7, #16]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	2300      	movs	r3, #0
 80084de:	617b      	str	r3, [r7, #20]
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	61ba      	str	r2, [r7, #24]
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4413      	add	r3, r2
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80084f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084f4:	2b1f      	cmp	r3, #31
 80084f6:	d940      	bls.n	800857a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80084f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80084fc:	d006      	beq.n	800850c <create_name+0x48>
 80084fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008500:	2b5c      	cmp	r3, #92	@ 0x5c
 8008502:	d110      	bne.n	8008526 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008504:	e002      	b.n	800850c <create_name+0x48>
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	3301      	adds	r3, #1
 800850a:	61bb      	str	r3, [r7, #24]
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	4413      	add	r3, r2
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b2f      	cmp	r3, #47	@ 0x2f
 8008516:	d0f6      	beq.n	8008506 <create_name+0x42>
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	4413      	add	r3, r2
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	2b5c      	cmp	r3, #92	@ 0x5c
 8008522:	d0f0      	beq.n	8008506 <create_name+0x42>
			break;
 8008524:	e02a      	b.n	800857c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2bfe      	cmp	r3, #254	@ 0xfe
 800852a:	d901      	bls.n	8008530 <create_name+0x6c>
 800852c:	2306      	movs	r3, #6
 800852e:	e17d      	b.n	800882c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008530:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008532:	b2db      	uxtb	r3, r3
 8008534:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008536:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008538:	2101      	movs	r1, #1
 800853a:	4618      	mov	r0, r3
 800853c:	f001 fb66 	bl	8009c0c <ff_convert>
 8008540:	4603      	mov	r3, r0
 8008542:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008544:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <create_name+0x8a>
 800854a:	2306      	movs	r3, #6
 800854c:	e16e      	b.n	800882c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800854e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008550:	2b7f      	cmp	r3, #127	@ 0x7f
 8008552:	d809      	bhi.n	8008568 <create_name+0xa4>
 8008554:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008556:	4619      	mov	r1, r3
 8008558:	488d      	ldr	r0, [pc, #564]	@ (8008790 <create_name+0x2cc>)
 800855a:	f7fe fe10 	bl	800717e <chk_chr>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <create_name+0xa4>
 8008564:	2306      	movs	r3, #6
 8008566:	e161      	b.n	800882c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	617a      	str	r2, [r7, #20]
 800856e:	005b      	lsls	r3, r3, #1
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	4413      	add	r3, r2
 8008574:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008576:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008578:	e7b4      	b.n	80084e4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800857a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	441a      	add	r2, r3
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008588:	2b1f      	cmp	r3, #31
 800858a:	d801      	bhi.n	8008590 <create_name+0xcc>
 800858c:	2304      	movs	r3, #4
 800858e:	e000      	b.n	8008592 <create_name+0xce>
 8008590:	2300      	movs	r3, #0
 8008592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008596:	e011      	b.n	80085bc <create_name+0xf8>
		w = lfn[di - 1];
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800859e:	3b01      	subs	r3, #1
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4413      	add	r3, r2
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80085aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085ac:	2b20      	cmp	r3, #32
 80085ae:	d002      	beq.n	80085b6 <create_name+0xf2>
 80085b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80085b4:	d106      	bne.n	80085c4 <create_name+0x100>
		di--;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1ea      	bne.n	8008598 <create_name+0xd4>
 80085c2:	e000      	b.n	80085c6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80085c4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	005b      	lsls	r3, r3, #1
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	4413      	add	r3, r2
 80085ce:	2200      	movs	r2, #0
 80085d0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <create_name+0x118>
 80085d8:	2306      	movs	r3, #6
 80085da:	e127      	b.n	800882c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3324      	adds	r3, #36	@ 0x24
 80085e0:	220b      	movs	r2, #11
 80085e2:	2120      	movs	r1, #32
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fe fd88 	bl	80070fa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80085ea:	2300      	movs	r3, #0
 80085ec:	61bb      	str	r3, [r7, #24]
 80085ee:	e002      	b.n	80085f6 <create_name+0x132>
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	3301      	adds	r3, #1
 80085f4:	61bb      	str	r3, [r7, #24]
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	4413      	add	r3, r2
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	2b20      	cmp	r3, #32
 8008602:	d0f5      	beq.n	80085f0 <create_name+0x12c>
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	4413      	add	r3, r2
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008610:	d0ee      	beq.n	80085f0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d009      	beq.n	800862c <create_name+0x168>
 8008618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800861c:	f043 0303 	orr.w	r3, r3, #3
 8008620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008624:	e002      	b.n	800862c <create_name+0x168>
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	3b01      	subs	r3, #1
 800862a:	617b      	str	r3, [r7, #20]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d009      	beq.n	8008646 <create_name+0x182>
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008638:	3b01      	subs	r3, #1
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4413      	add	r3, r2
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	2b2e      	cmp	r3, #46	@ 0x2e
 8008644:	d1ef      	bne.n	8008626 <create_name+0x162>

	i = b = 0; ni = 8;
 8008646:	2300      	movs	r3, #0
 8008648:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800864c:	2300      	movs	r3, #0
 800864e:	623b      	str	r3, [r7, #32]
 8008650:	2308      	movs	r3, #8
 8008652:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	1c5a      	adds	r2, r3, #1
 8008658:	61ba      	str	r2, [r7, #24]
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	4413      	add	r3, r2
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008664:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 8090 	beq.w	800878c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800866c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800866e:	2b20      	cmp	r3, #32
 8008670:	d006      	beq.n	8008680 <create_name+0x1bc>
 8008672:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008674:	2b2e      	cmp	r3, #46	@ 0x2e
 8008676:	d10a      	bne.n	800868e <create_name+0x1ca>
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	429a      	cmp	r2, r3
 800867e:	d006      	beq.n	800868e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008684:	f043 0303 	orr.w	r3, r3, #3
 8008688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800868c:	e07d      	b.n	800878a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800868e:	6a3a      	ldr	r2, [r7, #32]
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	429a      	cmp	r2, r3
 8008694:	d203      	bcs.n	800869e <create_name+0x1da>
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	429a      	cmp	r2, r3
 800869c:	d123      	bne.n	80086e6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	2b0b      	cmp	r3, #11
 80086a2:	d106      	bne.n	80086b2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80086a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086a8:	f043 0303 	orr.w	r3, r3, #3
 80086ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80086b0:	e075      	b.n	800879e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d005      	beq.n	80086c6 <create_name+0x202>
 80086ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086be:	f043 0303 	orr.w	r3, r3, #3
 80086c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d866      	bhi.n	800879c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	61bb      	str	r3, [r7, #24]
 80086d2:	2308      	movs	r3, #8
 80086d4:	623b      	str	r3, [r7, #32]
 80086d6:	230b      	movs	r3, #11
 80086d8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80086da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80086e4:	e051      	b.n	800878a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80086e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80086ea:	d914      	bls.n	8008716 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80086ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086ee:	2100      	movs	r1, #0
 80086f0:	4618      	mov	r0, r3
 80086f2:	f001 fa8b 	bl	8009c0c <ff_convert>
 80086f6:	4603      	mov	r3, r0
 80086f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80086fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d004      	beq.n	800870a <create_name+0x246>
 8008700:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008702:	3b80      	subs	r3, #128	@ 0x80
 8008704:	4a23      	ldr	r2, [pc, #140]	@ (8008794 <create_name+0x2d0>)
 8008706:	5cd3      	ldrb	r3, [r2, r3]
 8008708:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800870a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800870e:	f043 0302 	orr.w	r3, r3, #2
 8008712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008716:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008718:	2b00      	cmp	r3, #0
 800871a:	d007      	beq.n	800872c <create_name+0x268>
 800871c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800871e:	4619      	mov	r1, r3
 8008720:	481d      	ldr	r0, [pc, #116]	@ (8008798 <create_name+0x2d4>)
 8008722:	f7fe fd2c 	bl	800717e <chk_chr>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d008      	beq.n	800873e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800872c:	235f      	movs	r3, #95	@ 0x5f
 800872e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008730:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008734:	f043 0303 	orr.w	r3, r3, #3
 8008738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800873c:	e01b      	b.n	8008776 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800873e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008740:	2b40      	cmp	r3, #64	@ 0x40
 8008742:	d909      	bls.n	8008758 <create_name+0x294>
 8008744:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008746:	2b5a      	cmp	r3, #90	@ 0x5a
 8008748:	d806      	bhi.n	8008758 <create_name+0x294>
					b |= 2;
 800874a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800874e:	f043 0302 	orr.w	r3, r3, #2
 8008752:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008756:	e00e      	b.n	8008776 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008758:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800875a:	2b60      	cmp	r3, #96	@ 0x60
 800875c:	d90b      	bls.n	8008776 <create_name+0x2b2>
 800875e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008760:	2b7a      	cmp	r3, #122	@ 0x7a
 8008762:	d808      	bhi.n	8008776 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008764:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008768:	f043 0301 	orr.w	r3, r3, #1
 800876c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008770:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008772:	3b20      	subs	r3, #32
 8008774:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	623a      	str	r2, [r7, #32]
 800877c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800877e:	b2d1      	uxtb	r1, r2
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	4413      	add	r3, r2
 8008784:	460a      	mov	r2, r1
 8008786:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800878a:	e763      	b.n	8008654 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800878c:	bf00      	nop
 800878e:	e006      	b.n	800879e <create_name+0x2da>
 8008790:	0800a7e0 	.word	0x0800a7e0
 8008794:	0801b52c 	.word	0x0801b52c
 8008798:	0800a7ec 	.word	0x0800a7ec
			if (si > di) break;			/* No extension */
 800879c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80087a4:	2be5      	cmp	r3, #229	@ 0xe5
 80087a6:	d103      	bne.n	80087b0 <create_name+0x2ec>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2205      	movs	r2, #5
 80087ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	2b08      	cmp	r3, #8
 80087b4:	d104      	bne.n	80087c0 <create_name+0x2fc>
 80087b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80087c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087c4:	f003 030c 	and.w	r3, r3, #12
 80087c8:	2b0c      	cmp	r3, #12
 80087ca:	d005      	beq.n	80087d8 <create_name+0x314>
 80087cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087d0:	f003 0303 	and.w	r3, r3, #3
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d105      	bne.n	80087e4 <create_name+0x320>
 80087d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087dc:	f043 0302 	orr.w	r3, r3, #2
 80087e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80087e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d117      	bne.n	8008820 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80087f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d105      	bne.n	8008808 <create_name+0x344>
 80087fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008800:	f043 0310 	orr.w	r3, r3, #16
 8008804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008808:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800880c:	f003 030c 	and.w	r3, r3, #12
 8008810:	2b04      	cmp	r3, #4
 8008812:	d105      	bne.n	8008820 <create_name+0x35c>
 8008814:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008818:	f043 0308 	orr.w	r3, r3, #8
 800881c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008826:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800882a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800882c:	4618      	mov	r0, r3
 800882e:	3728      	adds	r7, #40	@ 0x28
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008848:	e002      	b.n	8008850 <follow_path+0x1c>
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	3301      	adds	r3, #1
 800884e:	603b      	str	r3, [r7, #0]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b2f      	cmp	r3, #47	@ 0x2f
 8008856:	d0f8      	beq.n	800884a <follow_path+0x16>
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b5c      	cmp	r3, #92	@ 0x5c
 800885e:	d0f4      	beq.n	800884a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	2200      	movs	r2, #0
 8008864:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b1f      	cmp	r3, #31
 800886c:	d80a      	bhi.n	8008884 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2280      	movs	r2, #128	@ 0x80
 8008872:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008876:	2100      	movs	r1, #0
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff f91d 	bl	8007ab8 <dir_sdi>
 800887e:	4603      	mov	r3, r0
 8008880:	75fb      	strb	r3, [r7, #23]
 8008882:	e043      	b.n	800890c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008884:	463b      	mov	r3, r7
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff fe1b 	bl	80084c4 <create_name>
 800888e:	4603      	mov	r3, r0
 8008890:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008892:	7dfb      	ldrb	r3, [r7, #23]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d134      	bne.n	8008902 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7ff fc5a 	bl	8008152 <dir_find>
 800889e:	4603      	mov	r3, r0
 80088a0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80088a8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00a      	beq.n	80088c6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	2b04      	cmp	r3, #4
 80088b4:	d127      	bne.n	8008906 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80088b6:	7afb      	ldrb	r3, [r7, #11]
 80088b8:	f003 0304 	and.w	r3, r3, #4
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d122      	bne.n	8008906 <follow_path+0xd2>
 80088c0:	2305      	movs	r3, #5
 80088c2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80088c4:	e01f      	b.n	8008906 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80088c6:	7afb      	ldrb	r3, [r7, #11]
 80088c8:	f003 0304 	and.w	r3, r3, #4
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d11c      	bne.n	800890a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	799b      	ldrb	r3, [r3, #6]
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d102      	bne.n	80088e2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80088dc:	2305      	movs	r3, #5
 80088de:	75fb      	strb	r3, [r7, #23]
 80088e0:	e014      	b.n	800890c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f0:	4413      	add	r3, r2
 80088f2:	4619      	mov	r1, r3
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f7ff fa66 	bl	8007dc6 <ld_clust>
 80088fa:	4602      	mov	r2, r0
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008900:	e7c0      	b.n	8008884 <follow_path+0x50>
			if (res != FR_OK) break;
 8008902:	bf00      	nop
 8008904:	e002      	b.n	800890c <follow_path+0xd8>
				break;
 8008906:	bf00      	nop
 8008908:	e000      	b.n	800890c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800890a:	bf00      	nop
			}
		}
	}

	return res;
 800890c:	7dfb      	ldrb	r3, [r7, #23]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008916:	b480      	push	{r7}
 8008918:	b087      	sub	sp, #28
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800891e:	f04f 33ff 	mov.w	r3, #4294967295
 8008922:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d031      	beq.n	8008990 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	617b      	str	r3, [r7, #20]
 8008932:	e002      	b.n	800893a <get_ldnumber+0x24>
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	3301      	adds	r3, #1
 8008938:	617b      	str	r3, [r7, #20]
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b1f      	cmp	r3, #31
 8008940:	d903      	bls.n	800894a <get_ldnumber+0x34>
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b3a      	cmp	r3, #58	@ 0x3a
 8008948:	d1f4      	bne.n	8008934 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b3a      	cmp	r3, #58	@ 0x3a
 8008950:	d11c      	bne.n	800898c <get_ldnumber+0x76>
			tp = *path;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	60fa      	str	r2, [r7, #12]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	3b30      	subs	r3, #48	@ 0x30
 8008962:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b09      	cmp	r3, #9
 8008968:	d80e      	bhi.n	8008988 <get_ldnumber+0x72>
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	429a      	cmp	r2, r3
 8008970:	d10a      	bne.n	8008988 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d107      	bne.n	8008988 <get_ldnumber+0x72>
					vol = (int)i;
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	3301      	adds	r3, #1
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	e002      	b.n	8008992 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800898c:	2300      	movs	r3, #0
 800898e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008990:	693b      	ldr	r3, [r7, #16]
}
 8008992:	4618      	mov	r0, r3
 8008994:	371c      	adds	r7, #28
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
	...

080089a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	70da      	strb	r2, [r3, #3]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f04f 32ff 	mov.w	r2, #4294967295
 80089b6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7fe fd6e 	bl	800749c <move_window>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <check_fs+0x2a>
 80089c6:	2304      	movs	r3, #4
 80089c8:	e038      	b.n	8008a3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3334      	adds	r3, #52	@ 0x34
 80089ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe faee 	bl	8006fb4 <ld_word>
 80089d8:	4603      	mov	r3, r0
 80089da:	461a      	mov	r2, r3
 80089dc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d001      	beq.n	80089e8 <check_fs+0x48>
 80089e4:	2303      	movs	r3, #3
 80089e6:	e029      	b.n	8008a3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80089ee:	2be9      	cmp	r3, #233	@ 0xe9
 80089f0:	d009      	beq.n	8008a06 <check_fs+0x66>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80089f8:	2beb      	cmp	r3, #235	@ 0xeb
 80089fa:	d11e      	bne.n	8008a3a <check_fs+0x9a>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008a02:	2b90      	cmp	r3, #144	@ 0x90
 8008a04:	d119      	bne.n	8008a3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3334      	adds	r3, #52	@ 0x34
 8008a0a:	3336      	adds	r3, #54	@ 0x36
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe fae9 	bl	8006fe4 <ld_dword>
 8008a12:	4603      	mov	r3, r0
 8008a14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008a18:	4a0a      	ldr	r2, [pc, #40]	@ (8008a44 <check_fs+0xa4>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d101      	bne.n	8008a22 <check_fs+0x82>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e00c      	b.n	8008a3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	3334      	adds	r3, #52	@ 0x34
 8008a26:	3352      	adds	r3, #82	@ 0x52
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fe fadb 	bl	8006fe4 <ld_dword>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	4a05      	ldr	r2, [pc, #20]	@ (8008a48 <check_fs+0xa8>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d101      	bne.n	8008a3a <check_fs+0x9a>
 8008a36:	2300      	movs	r3, #0
 8008a38:	e000      	b.n	8008a3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008a3a:	2302      	movs	r3, #2
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	00544146 	.word	0x00544146
 8008a48:	33544146 	.word	0x33544146

08008a4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b096      	sub	sp, #88	@ 0x58
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	4613      	mov	r3, r2
 8008a58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f7ff ff58 	bl	8008916 <get_ldnumber>
 8008a66:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	da01      	bge.n	8008a72 <find_volume+0x26>
 8008a6e:	230b      	movs	r3, #11
 8008a70:	e230      	b.n	8008ed4 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008a72:	4aa1      	ldr	r2, [pc, #644]	@ (8008cf8 <find_volume+0x2ac>)
 8008a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <find_volume+0x3a>
 8008a82:	230c      	movs	r3, #12
 8008a84:	e226      	b.n	8008ed4 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	f023 0301 	bic.w	r3, r3, #1
 8008a92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01a      	beq.n	8008ad2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9e:	785b      	ldrb	r3, [r3, #1]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fe fa05 	bl	8006eb0 <disk_status>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008aac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10c      	bne.n	8008ad2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008ab8:	79fb      	ldrb	r3, [r7, #7]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d007      	beq.n	8008ace <find_volume+0x82>
 8008abe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ac2:	f003 0304 	and.w	r3, r3, #4
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008aca:	230a      	movs	r3, #10
 8008acc:	e202      	b.n	8008ed4 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e200      	b.n	8008ed4 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ade:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae2:	785b      	ldrb	r3, [r3, #1]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fe f9fd 	bl	8006ee4 <disk_initialize>
 8008aea:	4603      	mov	r3, r0
 8008aec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008af0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008af4:	f003 0301 	and.w	r3, r3, #1
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008afc:	2303      	movs	r3, #3
 8008afe:	e1e9      	b.n	8008ed4 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d007      	beq.n	8008b16 <find_volume+0xca>
 8008b06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008b0a:	f003 0304 	and.w	r3, r3, #4
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008b12:	230a      	movs	r3, #10
 8008b14:	e1de      	b.n	8008ed4 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008b16:	2300      	movs	r3, #0
 8008b18:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008b1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008b1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b1e:	f7ff ff3f 	bl	80089a0 <check_fs>
 8008b22:	4603      	mov	r3, r0
 8008b24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008b28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d149      	bne.n	8008bc4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008b30:	2300      	movs	r3, #0
 8008b32:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b34:	e01e      	b.n	8008b74 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b38:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b3e:	011b      	lsls	r3, r3, #4
 8008b40:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008b44:	4413      	add	r3, r2
 8008b46:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d006      	beq.n	8008b60 <find_volume+0x114>
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	3308      	adds	r3, #8
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe fa44 	bl	8006fe4 <ld_dword>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	e000      	b.n	8008b62 <find_volume+0x116>
 8008b60:	2200      	movs	r2, #0
 8008b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	3358      	adds	r3, #88	@ 0x58
 8008b68:	443b      	add	r3, r7
 8008b6a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b70:	3301      	adds	r3, #1
 8008b72:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d9dd      	bls.n	8008b36 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d002      	beq.n	8008b8a <find_volume+0x13e>
 8008b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b86:	3b01      	subs	r3, #1
 8008b88:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	3358      	adds	r3, #88	@ 0x58
 8008b90:	443b      	add	r3, r7
 8008b92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008b96:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008b98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <find_volume+0x15e>
 8008b9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ba0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ba2:	f7ff fefd 	bl	80089a0 <check_fs>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	e000      	b.n	8008bac <find_volume+0x160>
 8008baa:	2303      	movs	r3, #3
 8008bac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008bb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d905      	bls.n	8008bc4 <find_volume+0x178>
 8008bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bba:	3301      	adds	r3, #1
 8008bbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bc0:	2b03      	cmp	r3, #3
 8008bc2:	d9e2      	bls.n	8008b8a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008bc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	d101      	bne.n	8008bd0 <find_volume+0x184>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e181      	b.n	8008ed4 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008bd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d901      	bls.n	8008bdc <find_volume+0x190>
 8008bd8:	230d      	movs	r3, #13
 8008bda:	e17b      	b.n	8008ed4 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bde:	3334      	adds	r3, #52	@ 0x34
 8008be0:	330b      	adds	r3, #11
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fe f9e6 	bl	8006fb4 <ld_word>
 8008be8:	4603      	mov	r3, r0
 8008bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bee:	d001      	beq.n	8008bf4 <find_volume+0x1a8>
 8008bf0:	230d      	movs	r3, #13
 8008bf2:	e16f      	b.n	8008ed4 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf6:	3334      	adds	r3, #52	@ 0x34
 8008bf8:	3316      	adds	r3, #22
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fe f9da 	bl	8006fb4 <ld_word>
 8008c00:	4603      	mov	r3, r0
 8008c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d106      	bne.n	8008c18 <find_volume+0x1cc>
 8008c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0c:	3334      	adds	r3, #52	@ 0x34
 8008c0e:	3324      	adds	r3, #36	@ 0x24
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fe f9e7 	bl	8006fe4 <ld_dword>
 8008c16:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c1c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c20:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2a:	789b      	ldrb	r3, [r3, #2]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d005      	beq.n	8008c3c <find_volume+0x1f0>
 8008c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c32:	789b      	ldrb	r3, [r3, #2]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d001      	beq.n	8008c3c <find_volume+0x1f0>
 8008c38:	230d      	movs	r3, #13
 8008c3a:	e14b      	b.n	8008ed4 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3e:	789b      	ldrb	r3, [r3, #2]
 8008c40:	461a      	mov	r2, r3
 8008c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c44:	fb02 f303 	mul.w	r3, r2, r3
 8008c48:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c50:	461a      	mov	r2, r3
 8008c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c58:	895b      	ldrh	r3, [r3, #10]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d008      	beq.n	8008c70 <find_volume+0x224>
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	895b      	ldrh	r3, [r3, #10]
 8008c62:	461a      	mov	r2, r3
 8008c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c66:	895b      	ldrh	r3, [r3, #10]
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <find_volume+0x228>
 8008c70:	230d      	movs	r3, #13
 8008c72:	e12f      	b.n	8008ed4 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c76:	3334      	adds	r3, #52	@ 0x34
 8008c78:	3311      	adds	r3, #17
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe f99a 	bl	8006fb4 <ld_word>
 8008c80:	4603      	mov	r3, r0
 8008c82:	461a      	mov	r2, r3
 8008c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8a:	891b      	ldrh	r3, [r3, #8]
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <find_volume+0x24e>
 8008c96:	230d      	movs	r3, #13
 8008c98:	e11c      	b.n	8008ed4 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9c:	3334      	adds	r3, #52	@ 0x34
 8008c9e:	3313      	adds	r3, #19
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fe f987 	bl	8006fb4 <ld_word>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d106      	bne.n	8008cbe <find_volume+0x272>
 8008cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb2:	3334      	adds	r3, #52	@ 0x34
 8008cb4:	3320      	adds	r3, #32
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe f994 	bl	8006fe4 <ld_dword>
 8008cbc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc0:	3334      	adds	r3, #52	@ 0x34
 8008cc2:	330e      	adds	r3, #14
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fe f975 	bl	8006fb4 <ld_word>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008cce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <find_volume+0x28c>
 8008cd4:	230d      	movs	r3, #13
 8008cd6:	e0fd      	b.n	8008ed4 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008cd8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cdc:	4413      	add	r3, r2
 8008cde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ce0:	8912      	ldrh	r2, [r2, #8]
 8008ce2:	0912      	lsrs	r2, r2, #4
 8008ce4:	b292      	uxth	r2, r2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008cea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d204      	bcs.n	8008cfc <find_volume+0x2b0>
 8008cf2:	230d      	movs	r3, #13
 8008cf4:	e0ee      	b.n	8008ed4 <find_volume+0x488>
 8008cf6:	bf00      	nop
 8008cf8:	2000604c 	.word	0x2000604c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008cfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d04:	8952      	ldrh	r2, [r2, #10]
 8008d06:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d0a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <find_volume+0x2ca>
 8008d12:	230d      	movs	r3, #13
 8008d14:	e0de      	b.n	8008ed4 <find_volume+0x488>
		fmt = FS_FAT32;
 8008d16:	2303      	movs	r3, #3
 8008d18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d802      	bhi.n	8008d2c <find_volume+0x2e0>
 8008d26:	2302      	movs	r3, #2
 8008d28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d802      	bhi.n	8008d3c <find_volume+0x2f0>
 8008d36:	2301      	movs	r3, #1
 8008d38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3e:	1c9a      	adds	r2, r3, #2
 8008d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d42:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008d48:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008d4a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d4e:	441a      	add	r2, r3
 8008d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d52:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008d54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d58:	441a      	add	r2, r3
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8008d5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d11e      	bne.n	8008da4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d68:	3334      	adds	r3, #52	@ 0x34
 8008d6a:	332a      	adds	r3, #42	@ 0x2a
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fe f921 	bl	8006fb4 <ld_word>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <find_volume+0x330>
 8008d78:	230d      	movs	r3, #13
 8008d7a:	e0ab      	b.n	8008ed4 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7e:	891b      	ldrh	r3, [r3, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <find_volume+0x33c>
 8008d84:	230d      	movs	r3, #13
 8008d86:	e0a5      	b.n	8008ed4 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8a:	3334      	adds	r3, #52	@ 0x34
 8008d8c:	332c      	adds	r3, #44	@ 0x2c
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe f928 	bl	8006fe4 <ld_dword>
 8008d94:	4602      	mov	r2, r0
 8008d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d98:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008da2:	e01f      	b.n	8008de4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da6:	891b      	ldrh	r3, [r3, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <find_volume+0x364>
 8008dac:	230d      	movs	r3, #13
 8008dae:	e091      	b.n	8008ed4 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008db6:	441a      	add	r2, r3
 8008db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dba:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008dbc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d103      	bne.n	8008dcc <find_volume+0x380>
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	005b      	lsls	r3, r3, #1
 8008dca:	e00a      	b.n	8008de2 <find_volume+0x396>
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dce:	699a      	ldr	r2, [r3, #24]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	005b      	lsls	r3, r3, #1
 8008dd4:	4413      	add	r3, r2
 8008dd6:	085a      	lsrs	r2, r3, #1
 8008dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	f003 0301 	and.w	r3, r3, #1
 8008de0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008de2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de6:	69da      	ldr	r2, [r3, #28]
 8008de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dea:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008dee:	0a5b      	lsrs	r3, r3, #9
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d201      	bcs.n	8008df8 <find_volume+0x3ac>
 8008df4:	230d      	movs	r3, #13
 8008df6:	e06d      	b.n	8008ed4 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfe:	615a      	str	r2, [r3, #20]
 8008e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e02:	695a      	ldr	r2, [r3, #20]
 8008e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e06:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0a:	2280      	movs	r2, #128	@ 0x80
 8008e0c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008e0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d149      	bne.n	8008eaa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e18:	3334      	adds	r3, #52	@ 0x34
 8008e1a:	3330      	adds	r3, #48	@ 0x30
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fe f8c9 	bl	8006fb4 <ld_word>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d140      	bne.n	8008eaa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008e28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008e30:	f7fe fb34 	bl	800749c <move_window>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d137      	bne.n	8008eaa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e42:	3334      	adds	r3, #52	@ 0x34
 8008e44:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fe f8b3 	bl	8006fb4 <ld_word>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	461a      	mov	r2, r3
 8008e52:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d127      	bne.n	8008eaa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5c:	3334      	adds	r3, #52	@ 0x34
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe f8c0 	bl	8006fe4 <ld_dword>
 8008e64:	4603      	mov	r3, r0
 8008e66:	4a1d      	ldr	r2, [pc, #116]	@ (8008edc <find_volume+0x490>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d11e      	bne.n	8008eaa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6e:	3334      	adds	r3, #52	@ 0x34
 8008e70:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fe f8b5 	bl	8006fe4 <ld_dword>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	4a18      	ldr	r2, [pc, #96]	@ (8008ee0 <find_volume+0x494>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d113      	bne.n	8008eaa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e84:	3334      	adds	r3, #52	@ 0x34
 8008e86:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe f8aa 	bl	8006fe4 <ld_dword>
 8008e90:	4602      	mov	r2, r0
 8008e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e94:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e98:	3334      	adds	r3, #52	@ 0x34
 8008e9a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe f8a0 	bl	8006fe4 <ld_dword>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008eb0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee4 <find_volume+0x498>)
 8008eb4:	881b      	ldrh	r3, [r3, #0]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee4 <find_volume+0x498>)
 8008ebc:	801a      	strh	r2, [r3, #0]
 8008ebe:	4b09      	ldr	r3, [pc, #36]	@ (8008ee4 <find_volume+0x498>)
 8008ec0:	881a      	ldrh	r2, [r3, #0]
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec8:	4a07      	ldr	r2, [pc, #28]	@ (8008ee8 <find_volume+0x49c>)
 8008eca:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008ecc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ece:	f7fe fa7d 	bl	80073cc <clear_lock>
#endif
	return FR_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3758      	adds	r7, #88	@ 0x58
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	41615252 	.word	0x41615252
 8008ee0:	61417272 	.word	0x61417272
 8008ee4:	20006050 	.word	0x20006050
 8008ee8:	20006074 	.word	0x20006074

08008eec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008ef6:	2309      	movs	r3, #9
 8008ef8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d01c      	beq.n	8008f3a <validate+0x4e>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d018      	beq.n	8008f3a <validate+0x4e>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d013      	beq.n	8008f3a <validate+0x4e>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	889a      	ldrh	r2, [r3, #4]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	88db      	ldrh	r3, [r3, #6]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d10c      	bne.n	8008f3a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	785b      	ldrb	r3, [r3, #1]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fd ffc2 	bl	8006eb0 <disk_status>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <validate+0x4e>
			res = FR_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d102      	bne.n	8008f46 <validate+0x5a>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	e000      	b.n	8008f48 <validate+0x5c>
 8008f46:	2300      	movs	r3, #0
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	6013      	str	r3, [r2, #0]
	return res;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	4613      	mov	r3, r2
 8008f64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008f6a:	f107 0310 	add.w	r3, r7, #16
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7ff fcd1 	bl	8008916 <get_ldnumber>
 8008f74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	da01      	bge.n	8008f80 <f_mount+0x28>
 8008f7c:	230b      	movs	r3, #11
 8008f7e:	e02b      	b.n	8008fd8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008f80:	4a17      	ldr	r2, [pc, #92]	@ (8008fe0 <f_mount+0x88>)
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d005      	beq.n	8008f9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008f90:	69b8      	ldr	r0, [r7, #24]
 8008f92:	f7fe fa1b 	bl	80073cc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d002      	beq.n	8008fa8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	490d      	ldr	r1, [pc, #52]	@ (8008fe0 <f_mount+0x88>)
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <f_mount+0x66>
 8008fb8:	79fb      	ldrb	r3, [r7, #7]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d001      	beq.n	8008fc2 <f_mount+0x6a>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	e00a      	b.n	8008fd8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008fc2:	f107 010c 	add.w	r1, r7, #12
 8008fc6:	f107 0308 	add.w	r3, r7, #8
 8008fca:	2200      	movs	r2, #0
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7ff fd3d 	bl	8008a4c <find_volume>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3720      	adds	r7, #32
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	2000604c 	.word	0x2000604c

08008fe4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b09a      	sub	sp, #104	@ 0x68
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d101      	bne.n	8008ffc <f_open+0x18>
 8008ff8:	2309      	movs	r3, #9
 8008ffa:	e1a9      	b.n	8009350 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009002:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009004:	79fa      	ldrb	r2, [r7, #7]
 8009006:	f107 0114 	add.w	r1, r7, #20
 800900a:	f107 0308 	add.w	r3, r7, #8
 800900e:	4618      	mov	r0, r3
 8009010:	f7ff fd1c 	bl	8008a4c <find_volume>
 8009014:	4603      	mov	r3, r0
 8009016:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800901a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800901e:	2b00      	cmp	r3, #0
 8009020:	f040 818d 	bne.w	800933e <f_open+0x35a>
		dj.obj.fs = fs;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	f107 0318 	add.w	r3, r7, #24
 800902e:	4611      	mov	r1, r2
 8009030:	4618      	mov	r0, r3
 8009032:	f7ff fbff 	bl	8008834 <follow_path>
 8009036:	4603      	mov	r3, r0
 8009038:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800903c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009040:	2b00      	cmp	r3, #0
 8009042:	d118      	bne.n	8009076 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009044:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009048:	b25b      	sxtb	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	da03      	bge.n	8009056 <f_open+0x72>
				res = FR_INVALID_NAME;
 800904e:	2306      	movs	r3, #6
 8009050:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009054:	e00f      	b.n	8009076 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009056:	79fb      	ldrb	r3, [r7, #7]
 8009058:	2b01      	cmp	r3, #1
 800905a:	bf8c      	ite	hi
 800905c:	2301      	movhi	r3, #1
 800905e:	2300      	movls	r3, #0
 8009060:	b2db      	uxtb	r3, r3
 8009062:	461a      	mov	r2, r3
 8009064:	f107 0318 	add.w	r3, r7, #24
 8009068:	4611      	mov	r1, r2
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe f8a2 	bl	80071b4 <chk_lock>
 8009070:	4603      	mov	r3, r0
 8009072:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009076:	79fb      	ldrb	r3, [r7, #7]
 8009078:	f003 031c 	and.w	r3, r3, #28
 800907c:	2b00      	cmp	r3, #0
 800907e:	d07f      	beq.n	8009180 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009080:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009084:	2b00      	cmp	r3, #0
 8009086:	d017      	beq.n	80090b8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009088:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800908c:	2b04      	cmp	r3, #4
 800908e:	d10e      	bne.n	80090ae <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009090:	f7fe f8ec 	bl	800726c <enq_lock>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d006      	beq.n	80090a8 <f_open+0xc4>
 800909a:	f107 0318 	add.w	r3, r7, #24
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff f918 	bl	80082d4 <dir_register>
 80090a4:	4603      	mov	r3, r0
 80090a6:	e000      	b.n	80090aa <f_open+0xc6>
 80090a8:	2312      	movs	r3, #18
 80090aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80090ae:	79fb      	ldrb	r3, [r7, #7]
 80090b0:	f043 0308 	orr.w	r3, r3, #8
 80090b4:	71fb      	strb	r3, [r7, #7]
 80090b6:	e010      	b.n	80090da <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80090b8:	7fbb      	ldrb	r3, [r7, #30]
 80090ba:	f003 0311 	and.w	r3, r3, #17
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <f_open+0xe6>
					res = FR_DENIED;
 80090c2:	2307      	movs	r3, #7
 80090c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80090c8:	e007      	b.n	80090da <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80090ca:	79fb      	ldrb	r3, [r7, #7]
 80090cc:	f003 0304 	and.w	r3, r3, #4
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <f_open+0xf6>
 80090d4:	2308      	movs	r3, #8
 80090d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80090da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d168      	bne.n	80091b4 <f_open+0x1d0>
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	f003 0308 	and.w	r3, r3, #8
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d063      	beq.n	80091b4 <f_open+0x1d0>
				dw = GET_FATTIME();
 80090ec:	f7fd f9a4 	bl	8006438 <get_fattime>
 80090f0:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80090f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f4:	330e      	adds	r3, #14
 80090f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fd ffb1 	bl	8007060 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80090fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009100:	3316      	adds	r3, #22
 8009102:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009104:	4618      	mov	r0, r3
 8009106:	f7fd ffab 	bl	8007060 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800910a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910c:	330b      	adds	r3, #11
 800910e:	2220      	movs	r2, #32
 8009110:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009116:	4611      	mov	r1, r2
 8009118:	4618      	mov	r0, r3
 800911a:	f7fe fe54 	bl	8007dc6 <ld_clust>
 800911e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009124:	2200      	movs	r2, #0
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe fe6c 	bl	8007e04 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800912c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912e:	331c      	adds	r3, #28
 8009130:	2100      	movs	r1, #0
 8009132:	4618      	mov	r0, r3
 8009134:	f7fd ff94 	bl	8007060 <st_dword>
					fs->wflag = 1;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	2201      	movs	r2, #1
 800913c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800913e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009140:	2b00      	cmp	r3, #0
 8009142:	d037      	beq.n	80091b4 <f_open+0x1d0>
						dw = fs->winsect;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009148:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800914a:	f107 0318 	add.w	r3, r7, #24
 800914e:	2200      	movs	r2, #0
 8009150:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe fb7f 	bl	8007856 <remove_chain>
 8009158:	4603      	mov	r3, r0
 800915a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800915e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009162:	2b00      	cmp	r3, #0
 8009164:	d126      	bne.n	80091b4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe f996 	bl	800749c <move_window>
 8009170:	4603      	mov	r3, r0
 8009172:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800917a:	3a01      	subs	r2, #1
 800917c:	611a      	str	r2, [r3, #16]
 800917e:	e019      	b.n	80091b4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009180:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009184:	2b00      	cmp	r3, #0
 8009186:	d115      	bne.n	80091b4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009188:	7fbb      	ldrb	r3, [r7, #30]
 800918a:	f003 0310 	and.w	r3, r3, #16
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <f_open+0x1b6>
					res = FR_NO_FILE;
 8009192:	2304      	movs	r3, #4
 8009194:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009198:	e00c      	b.n	80091b4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800919a:	79fb      	ldrb	r3, [r7, #7]
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d007      	beq.n	80091b4 <f_open+0x1d0>
 80091a4:	7fbb      	ldrb	r3, [r7, #30]
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <f_open+0x1d0>
						res = FR_DENIED;
 80091ae:	2307      	movs	r3, #7
 80091b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80091b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d126      	bne.n	800920a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80091bc:	79fb      	ldrb	r3, [r7, #7]
 80091be:	f003 0308 	and.w	r3, r3, #8
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d003      	beq.n	80091ce <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80091c6:	79fb      	ldrb	r3, [r7, #7]
 80091c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80091d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	bf8c      	ite	hi
 80091e2:	2301      	movhi	r3, #1
 80091e4:	2300      	movls	r3, #0
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	461a      	mov	r2, r3
 80091ea:	f107 0318 	add.w	r3, r7, #24
 80091ee:	4611      	mov	r1, r2
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe f85d 	bl	80072b0 <inc_lock>
 80091f6:	4602      	mov	r2, r0
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d102      	bne.n	800920a <f_open+0x226>
 8009204:	2302      	movs	r3, #2
 8009206:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800920a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800920e:	2b00      	cmp	r3, #0
 8009210:	f040 8095 	bne.w	800933e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009218:	4611      	mov	r1, r2
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe fdd3 	bl	8007dc6 <ld_clust>
 8009220:	4602      	mov	r2, r0
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009228:	331c      	adds	r3, #28
 800922a:	4618      	mov	r0, r3
 800922c:	f7fd feda 	bl	8006fe4 <ld_dword>
 8009230:	4602      	mov	r2, r0
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	88da      	ldrh	r2, [r3, #6]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	79fa      	ldrb	r2, [r7, #7]
 800924e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	3330      	adds	r3, #48	@ 0x30
 8009266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800926a:	2100      	movs	r1, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f7fd ff44 	bl	80070fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	f003 0320 	and.w	r3, r3, #32
 8009278:	2b00      	cmp	r3, #0
 800927a:	d060      	beq.n	800933e <f_open+0x35a>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d05c      	beq.n	800933e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	68da      	ldr	r2, [r3, #12]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	895b      	ldrh	r3, [r3, #10]
 8009290:	025b      	lsls	r3, r3, #9
 8009292:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092a0:	e016      	b.n	80092d0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fe f944 	bl	8007534 <get_fat>
 80092ac:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80092ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d802      	bhi.n	80092ba <f_open+0x2d6>
 80092b4:	2302      	movs	r3, #2
 80092b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80092ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c0:	d102      	bne.n	80092c8 <f_open+0x2e4>
 80092c2:	2301      	movs	r3, #1
 80092c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80092c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80092ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d103      	bne.n	80092e0 <f_open+0x2fc>
 80092d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80092da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092dc:	429a      	cmp	r2, r3
 80092de:	d8e0      	bhi.n	80092a2 <f_open+0x2be>
				}
				fp->clust = clst;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80092e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80092e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d127      	bne.n	800933e <f_open+0x35a>
 80092ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d022      	beq.n	800933e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe f8fa 	bl	80074f6 <clust2sect>
 8009302:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8009304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009306:	2b00      	cmp	r3, #0
 8009308:	d103      	bne.n	8009312 <f_open+0x32e>
						res = FR_INT_ERR;
 800930a:	2302      	movs	r3, #2
 800930c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009310:	e015      	b.n	800933e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009314:	0a5a      	lsrs	r2, r3, #9
 8009316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009318:	441a      	add	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	7858      	ldrb	r0, [r3, #1]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6a1a      	ldr	r2, [r3, #32]
 800932c:	2301      	movs	r3, #1
 800932e:	f7fd fe01 	bl	8006f34 <disk_read>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d002      	beq.n	800933e <f_open+0x35a>
 8009338:	2301      	movs	r3, #1
 800933a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800933e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009342:	2b00      	cmp	r3, #0
 8009344:	d002      	beq.n	800934c <f_open+0x368>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800934c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009350:	4618      	mov	r0, r3
 8009352:	3768      	adds	r7, #104	@ 0x68
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08e      	sub	sp, #56	@ 0x38
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2200      	movs	r2, #0
 800936e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f107 0214 	add.w	r2, r7, #20
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f7ff fdb7 	bl	8008eec <validate>
 800937e:	4603      	mov	r3, r0
 8009380:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009384:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009388:	2b00      	cmp	r3, #0
 800938a:	d107      	bne.n	800939c <f_read+0x44>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	7d5b      	ldrb	r3, [r3, #21]
 8009390:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009394:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <f_read+0x4a>
 800939c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80093a0:	e115      	b.n	80095ce <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	7d1b      	ldrb	r3, [r3, #20]
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <f_read+0x5a>
 80093ae:	2307      	movs	r3, #7
 80093b0:	e10d      	b.n	80095ce <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	68da      	ldr	r2, [r3, #12]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	6a3b      	ldr	r3, [r7, #32]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	f240 80fe 	bls.w	80095c4 <f_read+0x26c>
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80093cc:	e0fa      	b.n	80095c4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f040 80c6 	bne.w	8009568 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	0a5b      	lsrs	r3, r3, #9
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	8952      	ldrh	r2, [r2, #10]
 80093e6:	3a01      	subs	r2, #1
 80093e8:	4013      	ands	r3, r2
 80093ea:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d12f      	bne.n	8009452 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d103      	bne.n	8009402 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009400:	e013      	b.n	800942a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009406:	2b00      	cmp	r3, #0
 8009408:	d007      	beq.n	800941a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	4619      	mov	r1, r3
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f7fe fb1d 	bl	8007a50 <clmt_clust>
 8009416:	6338      	str	r0, [r7, #48]	@ 0x30
 8009418:	e007      	b.n	800942a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	69db      	ldr	r3, [r3, #28]
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f7fe f886 	bl	8007534 <get_fat>
 8009428:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800942a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942c:	2b01      	cmp	r3, #1
 800942e:	d804      	bhi.n	800943a <f_read+0xe2>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2202      	movs	r2, #2
 8009434:	755a      	strb	r2, [r3, #21]
 8009436:	2302      	movs	r3, #2
 8009438:	e0c9      	b.n	80095ce <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800943a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009440:	d104      	bne.n	800944c <f_read+0xf4>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2201      	movs	r2, #1
 8009446:	755a      	strb	r2, [r3, #21]
 8009448:	2301      	movs	r3, #1
 800944a:	e0c0      	b.n	80095ce <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009450:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009452:	697a      	ldr	r2, [r7, #20]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	4619      	mov	r1, r3
 800945a:	4610      	mov	r0, r2
 800945c:	f7fe f84b 	bl	80074f6 <clust2sect>
 8009460:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d104      	bne.n	8009472 <f_read+0x11a>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2202      	movs	r2, #2
 800946c:	755a      	strb	r2, [r3, #21]
 800946e:	2302      	movs	r3, #2
 8009470:	e0ad      	b.n	80095ce <f_read+0x276>
			sect += csect;
 8009472:	69ba      	ldr	r2, [r7, #24]
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	4413      	add	r3, r2
 8009478:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	0a5b      	lsrs	r3, r3, #9
 800947e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009482:	2b00      	cmp	r3, #0
 8009484:	d039      	beq.n	80094fa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009486:	69fa      	ldr	r2, [r7, #28]
 8009488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948a:	4413      	add	r3, r2
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	8952      	ldrh	r2, [r2, #10]
 8009490:	4293      	cmp	r3, r2
 8009492:	d905      	bls.n	80094a0 <f_read+0x148>
					cc = fs->csize - csect;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	895b      	ldrh	r3, [r3, #10]
 8009498:	461a      	mov	r2, r3
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	7858      	ldrb	r0, [r3, #1]
 80094a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80094aa:	f7fd fd43 	bl	8006f34 <disk_read>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d004      	beq.n	80094be <f_read+0x166>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2201      	movs	r2, #1
 80094b8:	755a      	strb	r2, [r3, #21]
 80094ba:	2301      	movs	r3, #1
 80094bc:	e087      	b.n	80095ce <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	7d1b      	ldrb	r3, [r3, #20]
 80094c2:	b25b      	sxtb	r3, r3
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	da14      	bge.n	80094f2 <f_read+0x19a>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6a1a      	ldr	r2, [r3, #32]
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d90d      	bls.n	80094f2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a1a      	ldr	r2, [r3, #32]
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	025b      	lsls	r3, r3, #9
 80094e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094e2:	18d0      	adds	r0, r2, r3
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	3330      	adds	r3, #48	@ 0x30
 80094e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094ec:	4619      	mov	r1, r3
 80094ee:	f7fd fde3 	bl	80070b8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80094f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f4:	025b      	lsls	r3, r3, #9
 80094f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80094f8:	e050      	b.n	800959c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	429a      	cmp	r2, r3
 8009502:	d02e      	beq.n	8009562 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	7d1b      	ldrb	r3, [r3, #20]
 8009508:	b25b      	sxtb	r3, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	da18      	bge.n	8009540 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	7858      	ldrb	r0, [r3, #1]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6a1a      	ldr	r2, [r3, #32]
 800951c:	2301      	movs	r3, #1
 800951e:	f7fd fd29 	bl	8006f74 <disk_write>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d004      	beq.n	8009532 <f_read+0x1da>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2201      	movs	r2, #1
 800952c:	755a      	strb	r2, [r3, #21]
 800952e:	2301      	movs	r3, #1
 8009530:	e04d      	b.n	80095ce <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	7d1b      	ldrb	r3, [r3, #20]
 8009536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800953a:	b2da      	uxtb	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	7858      	ldrb	r0, [r3, #1]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800954a:	2301      	movs	r3, #1
 800954c:	69ba      	ldr	r2, [r7, #24]
 800954e:	f7fd fcf1 	bl	8006f34 <disk_read>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d004      	beq.n	8009562 <f_read+0x20a>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	755a      	strb	r2, [r3, #21]
 800955e:	2301      	movs	r3, #1
 8009560:	e035      	b.n	80095ce <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009570:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009574:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	429a      	cmp	r2, r3
 800957c:	d901      	bls.n	8009582 <f_read+0x22a>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009590:	4413      	add	r3, r2
 8009592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009594:	4619      	mov	r1, r3
 8009596:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009598:	f7fd fd8e 	bl	80070b8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800959c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800959e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a0:	4413      	add	r3, r2
 80095a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	699a      	ldr	r2, [r3, #24]
 80095a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095aa:	441a      	add	r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	619a      	str	r2, [r3, #24]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b6:	441a      	add	r2, r3
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f47f af01 	bne.w	80093ce <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3738      	adds	r7, #56	@ 0x38
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b090      	sub	sp, #64	@ 0x40
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f107 0208 	add.w	r2, r7, #8
 80095e6:	4611      	mov	r1, r2
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff fc7f 	bl	8008eec <validate>
 80095ee:	4603      	mov	r3, r0
 80095f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80095f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d103      	bne.n	8009604 <f_lseek+0x2e>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	7d5b      	ldrb	r3, [r3, #21]
 8009600:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009604:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <f_lseek+0x3c>
 800960c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009610:	e1e6      	b.n	80099e0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 80d1 	beq.w	80097be <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009622:	d15a      	bne.n	80096da <f_lseek+0x104>
			tbl = fp->cltbl;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009628:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800962a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962c:	1d1a      	adds	r2, r3, #4
 800962e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	2302      	movs	r3, #2
 8009636:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800963e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009640:	2b00      	cmp	r3, #0
 8009642:	d03a      	beq.n	80096ba <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009646:	613b      	str	r3, [r7, #16]
 8009648:	2300      	movs	r3, #0
 800964a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800964c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964e:	3302      	adds	r3, #2
 8009650:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8009652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009658:	3301      	adds	r3, #1
 800965a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009660:	4618      	mov	r0, r3
 8009662:	f7fd ff67 	bl	8007534 <get_fat>
 8009666:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966a:	2b01      	cmp	r3, #1
 800966c:	d804      	bhi.n	8009678 <f_lseek+0xa2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2202      	movs	r2, #2
 8009672:	755a      	strb	r2, [r3, #21]
 8009674:	2302      	movs	r3, #2
 8009676:	e1b3      	b.n	80099e0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967e:	d104      	bne.n	800968a <f_lseek+0xb4>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	755a      	strb	r2, [r3, #21]
 8009686:	2301      	movs	r3, #1
 8009688:	e1aa      	b.n	80099e0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3301      	adds	r3, #1
 800968e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009690:	429a      	cmp	r2, r3
 8009692:	d0de      	beq.n	8009652 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009694:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	429a      	cmp	r2, r3
 800969a:	d809      	bhi.n	80096b0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	1d1a      	adds	r2, r3, #4
 80096a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80096a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096a4:	601a      	str	r2, [r3, #0]
 80096a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a8:	1d1a      	adds	r2, r3, #4
 80096aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d3c4      	bcc.n	8009644 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096c0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80096c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d803      	bhi.n	80096d2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80096ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096cc:	2200      	movs	r2, #0
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	e184      	b.n	80099dc <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80096d2:	2311      	movs	r3, #17
 80096d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80096d8:	e180      	b.n	80099dc <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d902      	bls.n	80096ea <f_lseek+0x114>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	683a      	ldr	r2, [r7, #0]
 80096ee:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 8172 	beq.w	80099dc <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7fe f9a6 	bl	8007a50 <clmt_clust>
 8009704:	4602      	mov	r2, r0
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	4619      	mov	r1, r3
 8009712:	4610      	mov	r0, r2
 8009714:	f7fd feef 	bl	80074f6 <clust2sect>
 8009718:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d104      	bne.n	800972a <f_lseek+0x154>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2202      	movs	r2, #2
 8009724:	755a      	strb	r2, [r3, #21]
 8009726:	2302      	movs	r3, #2
 8009728:	e15a      	b.n	80099e0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	3b01      	subs	r3, #1
 800972e:	0a5b      	lsrs	r3, r3, #9
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	8952      	ldrh	r2, [r2, #10]
 8009734:	3a01      	subs	r2, #1
 8009736:	4013      	ands	r3, r2
 8009738:	69ba      	ldr	r2, [r7, #24]
 800973a:	4413      	add	r3, r2
 800973c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 8148 	beq.w	80099dc <f_lseek+0x406>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	69ba      	ldr	r2, [r7, #24]
 8009752:	429a      	cmp	r2, r3
 8009754:	f000 8142 	beq.w	80099dc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	7d1b      	ldrb	r3, [r3, #20]
 800975c:	b25b      	sxtb	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	da18      	bge.n	8009794 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	7858      	ldrb	r0, [r3, #1]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a1a      	ldr	r2, [r3, #32]
 8009770:	2301      	movs	r3, #1
 8009772:	f7fd fbff 	bl	8006f74 <disk_write>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d004      	beq.n	8009786 <f_lseek+0x1b0>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	755a      	strb	r2, [r3, #21]
 8009782:	2301      	movs	r3, #1
 8009784:	e12c      	b.n	80099e0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	7d1b      	ldrb	r3, [r3, #20]
 800978a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800978e:	b2da      	uxtb	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	7858      	ldrb	r0, [r3, #1]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800979e:	2301      	movs	r3, #1
 80097a0:	69ba      	ldr	r2, [r7, #24]
 80097a2:	f7fd fbc7 	bl	8006f34 <disk_read>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d004      	beq.n	80097b6 <f_lseek+0x1e0>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	755a      	strb	r2, [r3, #21]
 80097b2:	2301      	movs	r3, #1
 80097b4:	e114      	b.n	80099e0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	69ba      	ldr	r2, [r7, #24]
 80097ba:	621a      	str	r2, [r3, #32]
 80097bc:	e10e      	b.n	80099dc <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d908      	bls.n	80097da <f_lseek+0x204>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	7d1b      	ldrb	r3, [r3, #20]
 80097cc:	f003 0302 	and.w	r3, r3, #2
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d102      	bne.n	80097da <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80097e0:	2300      	movs	r3, #0
 80097e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097e8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 80a7 	beq.w	8009940 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	895b      	ldrh	r3, [r3, #10]
 80097f6:	025b      	lsls	r3, r3, #9
 80097f8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80097fa:	6a3b      	ldr	r3, [r7, #32]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d01b      	beq.n	8009838 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	1e5a      	subs	r2, r3, #1
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	fbb2 f2f3 	udiv	r2, r2, r3
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	1e59      	subs	r1, r3, #1
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009814:	429a      	cmp	r2, r3
 8009816:	d30f      	bcc.n	8009838 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	1e5a      	subs	r2, r3, #1
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	425b      	negs	r3, r3
 8009820:	401a      	ands	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009836:	e022      	b.n	800987e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800983e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009840:	2b00      	cmp	r3, #0
 8009842:	d119      	bne.n	8009878 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2100      	movs	r1, #0
 8009848:	4618      	mov	r0, r3
 800984a:	f7fe f869 	bl	8007920 <create_chain>
 800984e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009852:	2b01      	cmp	r3, #1
 8009854:	d104      	bne.n	8009860 <f_lseek+0x28a>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2202      	movs	r2, #2
 800985a:	755a      	strb	r2, [r3, #21]
 800985c:	2302      	movs	r3, #2
 800985e:	e0bf      	b.n	80099e0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009866:	d104      	bne.n	8009872 <f_lseek+0x29c>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	755a      	strb	r2, [r3, #21]
 800986e:	2301      	movs	r3, #1
 8009870:	e0b6      	b.n	80099e0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009876:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800987c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800987e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009880:	2b00      	cmp	r3, #0
 8009882:	d05d      	beq.n	8009940 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8009884:	e03a      	b.n	80098fc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	603b      	str	r3, [r7, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	699a      	ldr	r2, [r3, #24]
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	441a      	add	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	7d1b      	ldrb	r3, [r3, #20]
 800989e:	f003 0302 	and.w	r3, r3, #2
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00b      	beq.n	80098be <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fe f838 	bl	8007920 <create_chain>
 80098b0:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80098b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d108      	bne.n	80098ca <f_lseek+0x2f4>
							ofs = 0; break;
 80098b8:	2300      	movs	r3, #0
 80098ba:	603b      	str	r3, [r7, #0]
 80098bc:	e022      	b.n	8009904 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fd fe36 	bl	8007534 <get_fat>
 80098c8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80098ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d0:	d104      	bne.n	80098dc <f_lseek+0x306>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2201      	movs	r2, #1
 80098d6:	755a      	strb	r2, [r3, #21]
 80098d8:	2301      	movs	r3, #1
 80098da:	e081      	b.n	80099e0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80098dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d904      	bls.n	80098ec <f_lseek+0x316>
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d304      	bcc.n	80098f6 <f_lseek+0x320>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2202      	movs	r2, #2
 80098f0:	755a      	strb	r2, [r3, #21]
 80098f2:	2302      	movs	r3, #2
 80098f4:	e074      	b.n	80099e0 <f_lseek+0x40a>
					fp->clust = clst;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098fa:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	429a      	cmp	r2, r3
 8009902:	d8c0      	bhi.n	8009886 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	699a      	ldr	r2, [r3, #24]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	441a      	add	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009916:	2b00      	cmp	r3, #0
 8009918:	d012      	beq.n	8009940 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800991e:	4618      	mov	r0, r3
 8009920:	f7fd fde9 	bl	80074f6 <clust2sect>
 8009924:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009928:	2b00      	cmp	r3, #0
 800992a:	d104      	bne.n	8009936 <f_lseek+0x360>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2202      	movs	r2, #2
 8009930:	755a      	strb	r2, [r3, #21]
 8009932:	2302      	movs	r3, #2
 8009934:	e054      	b.n	80099e0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	0a5b      	lsrs	r3, r3, #9
 800993a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800993c:	4413      	add	r3, r2
 800993e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	699a      	ldr	r2, [r3, #24]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	429a      	cmp	r2, r3
 800994a:	d90a      	bls.n	8009962 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	699a      	ldr	r2, [r3, #24]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	7d1b      	ldrb	r3, [r3, #20]
 8009958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800995c:	b2da      	uxtb	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996a:	2b00      	cmp	r3, #0
 800996c:	d036      	beq.n	80099dc <f_lseek+0x406>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009974:	429a      	cmp	r2, r3
 8009976:	d031      	beq.n	80099dc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	7d1b      	ldrb	r3, [r3, #20]
 800997c:	b25b      	sxtb	r3, r3
 800997e:	2b00      	cmp	r3, #0
 8009980:	da18      	bge.n	80099b4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	7858      	ldrb	r0, [r3, #1]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a1a      	ldr	r2, [r3, #32]
 8009990:	2301      	movs	r3, #1
 8009992:	f7fd faef 	bl	8006f74 <disk_write>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d004      	beq.n	80099a6 <f_lseek+0x3d0>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	755a      	strb	r2, [r3, #21]
 80099a2:	2301      	movs	r3, #1
 80099a4:	e01c      	b.n	80099e0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	7d1b      	ldrb	r3, [r3, #20]
 80099aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	7858      	ldrb	r0, [r3, #1]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80099be:	2301      	movs	r3, #1
 80099c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099c2:	f7fd fab7 	bl	8006f34 <disk_read>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d004      	beq.n	80099d6 <f_lseek+0x400>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	755a      	strb	r2, [r3, #21]
 80099d2:	2301      	movs	r3, #1
 80099d4:	e004      	b.n	80099e0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099da:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80099dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3740      	adds	r7, #64	@ 0x40
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b092      	sub	sp, #72	@ 0x48
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80099f4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80099f8:	f107 030c 	add.w	r3, r7, #12
 80099fc:	2200      	movs	r2, #0
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7ff f824 	bl	8008a4c <find_volume>
 8009a04:	4603      	mov	r3, r0
 8009a06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8009a0a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f040 8099 	bne.w	8009b46 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009a14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1c:	695a      	ldr	r2, [r3, #20]
 8009a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	3b02      	subs	r3, #2
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d804      	bhi.n	8009a32 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2a:	695a      	ldr	r2, [r3, #20]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	e089      	b.n	8009b46 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d128      	bne.n	8009a90 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009a3e:	2302      	movs	r3, #2
 8009a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a44:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009a46:	f107 0314 	add.w	r3, r7, #20
 8009a4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fd fd71 	bl	8007534 <get_fat>
 8009a52:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5a:	d103      	bne.n	8009a64 <f_getfree+0x7c>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009a62:	e063      	b.n	8009b2c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d103      	bne.n	8009a72 <f_getfree+0x8a>
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009a70:	e05c      	b.n	8009b2c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d102      	bne.n	8009a7e <f_getfree+0x96>
 8009a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8009a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a80:	3301      	adds	r3, #1
 8009a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d3db      	bcc.n	8009a46 <f_getfree+0x5e>
 8009a8e:	e04d      	b.n	8009b2c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8009aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d113      	bne.n	8009ad2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009aaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aae:	1c5a      	adds	r2, r3, #1
 8009ab0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	f7fd fcf2 	bl	800749c <move_window>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8009abe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d131      	bne.n	8009b2a <f_getfree+0x142>
							p = fs->win;
 8009ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac8:	3334      	adds	r3, #52	@ 0x34
 8009aca:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8009acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ad0:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d10f      	bne.n	8009afa <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009ada:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009adc:	f7fd fa6a 	bl	8006fb4 <ld_word>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d102      	bne.n	8009aec <f_getfree+0x104>
 8009ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ae8:	3301      	adds	r3, #1
 8009aea:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8009aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aee:	3302      	adds	r3, #2
 8009af0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009af4:	3b02      	subs	r3, #2
 8009af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009af8:	e010      	b.n	8009b1c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009afa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009afc:	f7fd fa72 	bl	8006fe4 <ld_dword>
 8009b00:	4603      	mov	r3, r0
 8009b02:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d102      	bne.n	8009b10 <f_getfree+0x128>
 8009b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8009b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b12:	3304      	adds	r3, #4
 8009b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b18:	3b04      	subs	r3, #4
 8009b1a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8009b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1bd      	bne.n	8009aa4 <f_getfree+0xbc>
 8009b28:	e000      	b.n	8009b2c <f_getfree+0x144>
							if (res != FR_OK) break;
 8009b2a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b30:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b36:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3a:	791a      	ldrb	r2, [r3, #4]
 8009b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3e:	f042 0201 	orr.w	r2, r2, #1
 8009b42:	b2d2      	uxtb	r2, r2
 8009b44:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009b46:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3748      	adds	r7, #72	@ 0x48
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b087      	sub	sp, #28
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009b62:	2301      	movs	r3, #1
 8009b64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009b66:	2300      	movs	r3, #0
 8009b68:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8009be8 <FATFS_LinkDriverEx+0x94>)
 8009b6c:	7a5b      	ldrb	r3, [r3, #9]
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d131      	bne.n	8009bd8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009b74:	4b1c      	ldr	r3, [pc, #112]	@ (8009be8 <FATFS_LinkDriverEx+0x94>)
 8009b76:	7a5b      	ldrb	r3, [r3, #9]
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8009be8 <FATFS_LinkDriverEx+0x94>)
 8009b7e:	2100      	movs	r1, #0
 8009b80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009b82:	4b19      	ldr	r3, [pc, #100]	@ (8009be8 <FATFS_LinkDriverEx+0x94>)
 8009b84:	7a5b      	ldrb	r3, [r3, #9]
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	4a17      	ldr	r2, [pc, #92]	@ (8009be8 <FATFS_LinkDriverEx+0x94>)
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009b92:	4b15      	ldr	r3, [pc, #84]	@ (8009be8 <FATFS_LinkDriverEx+0x94>)
 8009b94:	7a5b      	ldrb	r3, [r3, #9]
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	461a      	mov	r2, r3
 8009b9a:	4b13      	ldr	r3, [pc, #76]	@ (8009be8 <FATFS_LinkDriverEx+0x94>)
 8009b9c:	4413      	add	r3, r2
 8009b9e:	79fa      	ldrb	r2, [r7, #7]
 8009ba0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009ba2:	4b11      	ldr	r3, [pc, #68]	@ (8009be8 <FATFS_LinkDriverEx+0x94>)
 8009ba4:	7a5b      	ldrb	r3, [r3, #9]
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	1c5a      	adds	r2, r3, #1
 8009baa:	b2d1      	uxtb	r1, r2
 8009bac:	4a0e      	ldr	r2, [pc, #56]	@ (8009be8 <FATFS_LinkDriverEx+0x94>)
 8009bae:	7251      	strb	r1, [r2, #9]
 8009bb0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009bb2:	7dbb      	ldrb	r3, [r7, #22]
 8009bb4:	3330      	adds	r3, #48	@ 0x30
 8009bb6:	b2da      	uxtb	r2, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	223a      	movs	r2, #58	@ 0x3a
 8009bc2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	3302      	adds	r3, #2
 8009bc8:	222f      	movs	r2, #47	@ 0x2f
 8009bca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	3303      	adds	r3, #3
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	371c      	adds	r7, #28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	20006274 	.word	0x20006274

08009bec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7ff ffaa 	bl	8009b54 <FATFS_LinkDriverEx>
 8009c00:	4603      	mov	r3, r0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
	...

08009c0c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	6039      	str	r1, [r7, #0]
 8009c16:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009c18:	88fb      	ldrh	r3, [r7, #6]
 8009c1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c1c:	d802      	bhi.n	8009c24 <ff_convert+0x18>
		c = chr;
 8009c1e:	88fb      	ldrh	r3, [r7, #6]
 8009c20:	81fb      	strh	r3, [r7, #14]
 8009c22:	e025      	b.n	8009c70 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00b      	beq.n	8009c42 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009c2a:	88fb      	ldrh	r3, [r7, #6]
 8009c2c:	2bff      	cmp	r3, #255	@ 0xff
 8009c2e:	d805      	bhi.n	8009c3c <ff_convert+0x30>
 8009c30:	88fb      	ldrh	r3, [r7, #6]
 8009c32:	3b80      	subs	r3, #128	@ 0x80
 8009c34:	4a12      	ldr	r2, [pc, #72]	@ (8009c80 <ff_convert+0x74>)
 8009c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c3a:	e000      	b.n	8009c3e <ff_convert+0x32>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	81fb      	strh	r3, [r7, #14]
 8009c40:	e016      	b.n	8009c70 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009c42:	2300      	movs	r3, #0
 8009c44:	81fb      	strh	r3, [r7, #14]
 8009c46:	e009      	b.n	8009c5c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009c48:	89fb      	ldrh	r3, [r7, #14]
 8009c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8009c80 <ff_convert+0x74>)
 8009c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c50:	88fa      	ldrh	r2, [r7, #6]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d006      	beq.n	8009c64 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009c56:	89fb      	ldrh	r3, [r7, #14]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	81fb      	strh	r3, [r7, #14]
 8009c5c:	89fb      	ldrh	r3, [r7, #14]
 8009c5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c60:	d9f2      	bls.n	8009c48 <ff_convert+0x3c>
 8009c62:	e000      	b.n	8009c66 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009c64:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009c66:	89fb      	ldrh	r3, [r7, #14]
 8009c68:	3380      	adds	r3, #128	@ 0x80
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009c70:	89fb      	ldrh	r3, [r7, #14]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3714      	adds	r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	0801b5bc 	.word	0x0801b5bc

08009c84 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009c8e:	88fb      	ldrh	r3, [r7, #6]
 8009c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c94:	d201      	bcs.n	8009c9a <ff_wtoupper+0x16>
 8009c96:	4b3e      	ldr	r3, [pc, #248]	@ (8009d90 <ff_wtoupper+0x10c>)
 8009c98:	e000      	b.n	8009c9c <ff_wtoupper+0x18>
 8009c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8009d94 <ff_wtoupper+0x110>)
 8009c9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	1c9a      	adds	r2, r3, #2
 8009ca2:	617a      	str	r2, [r7, #20]
 8009ca4:	881b      	ldrh	r3, [r3, #0]
 8009ca6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009ca8:	8a7b      	ldrh	r3, [r7, #18]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d068      	beq.n	8009d80 <ff_wtoupper+0xfc>
 8009cae:	88fa      	ldrh	r2, [r7, #6]
 8009cb0:	8a7b      	ldrh	r3, [r7, #18]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d364      	bcc.n	8009d80 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	1c9a      	adds	r2, r3, #2
 8009cba:	617a      	str	r2, [r7, #20]
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	823b      	strh	r3, [r7, #16]
 8009cc0:	8a3b      	ldrh	r3, [r7, #16]
 8009cc2:	0a1b      	lsrs	r3, r3, #8
 8009cc4:	81fb      	strh	r3, [r7, #14]
 8009cc6:	8a3b      	ldrh	r3, [r7, #16]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009ccc:	88fa      	ldrh	r2, [r7, #6]
 8009cce:	8a79      	ldrh	r1, [r7, #18]
 8009cd0:	8a3b      	ldrh	r3, [r7, #16]
 8009cd2:	440b      	add	r3, r1
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	da49      	bge.n	8009d6c <ff_wtoupper+0xe8>
			switch (cmd) {
 8009cd8:	89fb      	ldrh	r3, [r7, #14]
 8009cda:	2b08      	cmp	r3, #8
 8009cdc:	d84f      	bhi.n	8009d7e <ff_wtoupper+0xfa>
 8009cde:	a201      	add	r2, pc, #4	@ (adr r2, 8009ce4 <ff_wtoupper+0x60>)
 8009ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce4:	08009d09 	.word	0x08009d09
 8009ce8:	08009d1b 	.word	0x08009d1b
 8009cec:	08009d31 	.word	0x08009d31
 8009cf0:	08009d39 	.word	0x08009d39
 8009cf4:	08009d41 	.word	0x08009d41
 8009cf8:	08009d49 	.word	0x08009d49
 8009cfc:	08009d51 	.word	0x08009d51
 8009d00:	08009d59 	.word	0x08009d59
 8009d04:	08009d61 	.word	0x08009d61
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009d08:	88fa      	ldrh	r2, [r7, #6]
 8009d0a:	8a7b      	ldrh	r3, [r7, #18]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	005b      	lsls	r3, r3, #1
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	4413      	add	r3, r2
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	80fb      	strh	r3, [r7, #6]
 8009d18:	e027      	b.n	8009d6a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009d1a:	88fa      	ldrh	r2, [r7, #6]
 8009d1c:	8a7b      	ldrh	r3, [r7, #18]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	88fa      	ldrh	r2, [r7, #6]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	80fb      	strh	r3, [r7, #6]
 8009d2e:	e01c      	b.n	8009d6a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009d30:	88fb      	ldrh	r3, [r7, #6]
 8009d32:	3b10      	subs	r3, #16
 8009d34:	80fb      	strh	r3, [r7, #6]
 8009d36:	e018      	b.n	8009d6a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009d38:	88fb      	ldrh	r3, [r7, #6]
 8009d3a:	3b20      	subs	r3, #32
 8009d3c:	80fb      	strh	r3, [r7, #6]
 8009d3e:	e014      	b.n	8009d6a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009d40:	88fb      	ldrh	r3, [r7, #6]
 8009d42:	3b30      	subs	r3, #48	@ 0x30
 8009d44:	80fb      	strh	r3, [r7, #6]
 8009d46:	e010      	b.n	8009d6a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009d48:	88fb      	ldrh	r3, [r7, #6]
 8009d4a:	3b1a      	subs	r3, #26
 8009d4c:	80fb      	strh	r3, [r7, #6]
 8009d4e:	e00c      	b.n	8009d6a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009d50:	88fb      	ldrh	r3, [r7, #6]
 8009d52:	3308      	adds	r3, #8
 8009d54:	80fb      	strh	r3, [r7, #6]
 8009d56:	e008      	b.n	8009d6a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009d58:	88fb      	ldrh	r3, [r7, #6]
 8009d5a:	3b50      	subs	r3, #80	@ 0x50
 8009d5c:	80fb      	strh	r3, [r7, #6]
 8009d5e:	e004      	b.n	8009d6a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009d60:	88fb      	ldrh	r3, [r7, #6]
 8009d62:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009d66:	80fb      	strh	r3, [r7, #6]
 8009d68:	bf00      	nop
			}
			break;
 8009d6a:	e008      	b.n	8009d7e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009d6c:	89fb      	ldrh	r3, [r7, #14]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d195      	bne.n	8009c9e <ff_wtoupper+0x1a>
 8009d72:	8a3b      	ldrh	r3, [r7, #16]
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	4413      	add	r3, r2
 8009d7a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009d7c:	e78f      	b.n	8009c9e <ff_wtoupper+0x1a>
			break;
 8009d7e:	bf00      	nop
	}

	return chr;
 8009d80:	88fb      	ldrh	r3, [r7, #6]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	371c      	adds	r7, #28
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	0801b6bc 	.word	0x0801b6bc
 8009d94:	0801b8b0 	.word	0x0801b8b0

08009d98 <sniprintf>:
 8009d98:	b40c      	push	{r2, r3}
 8009d9a:	b530      	push	{r4, r5, lr}
 8009d9c:	4b17      	ldr	r3, [pc, #92]	@ (8009dfc <sniprintf+0x64>)
 8009d9e:	1e0c      	subs	r4, r1, #0
 8009da0:	681d      	ldr	r5, [r3, #0]
 8009da2:	b09d      	sub	sp, #116	@ 0x74
 8009da4:	da08      	bge.n	8009db8 <sniprintf+0x20>
 8009da6:	238b      	movs	r3, #139	@ 0x8b
 8009da8:	602b      	str	r3, [r5, #0]
 8009daa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dae:	b01d      	add	sp, #116	@ 0x74
 8009db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009db4:	b002      	add	sp, #8
 8009db6:	4770      	bx	lr
 8009db8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009dbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009dc0:	bf14      	ite	ne
 8009dc2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009dc6:	4623      	moveq	r3, r4
 8009dc8:	9304      	str	r3, [sp, #16]
 8009dca:	9307      	str	r3, [sp, #28]
 8009dcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009dd0:	9002      	str	r0, [sp, #8]
 8009dd2:	9006      	str	r0, [sp, #24]
 8009dd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009dd8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009dda:	ab21      	add	r3, sp, #132	@ 0x84
 8009ddc:	a902      	add	r1, sp, #8
 8009dde:	4628      	mov	r0, r5
 8009de0:	9301      	str	r3, [sp, #4]
 8009de2:	f000 f995 	bl	800a110 <_svfiprintf_r>
 8009de6:	1c43      	adds	r3, r0, #1
 8009de8:	bfbc      	itt	lt
 8009dea:	238b      	movlt	r3, #139	@ 0x8b
 8009dec:	602b      	strlt	r3, [r5, #0]
 8009dee:	2c00      	cmp	r4, #0
 8009df0:	d0dd      	beq.n	8009dae <sniprintf+0x16>
 8009df2:	9b02      	ldr	r3, [sp, #8]
 8009df4:	2200      	movs	r2, #0
 8009df6:	701a      	strb	r2, [r3, #0]
 8009df8:	e7d9      	b.n	8009dae <sniprintf+0x16>
 8009dfa:	bf00      	nop
 8009dfc:	200000a0 	.word	0x200000a0

08009e00 <memset>:
 8009e00:	4402      	add	r2, r0
 8009e02:	4603      	mov	r3, r0
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d100      	bne.n	8009e0a <memset+0xa>
 8009e08:	4770      	bx	lr
 8009e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e0e:	e7f9      	b.n	8009e04 <memset+0x4>

08009e10 <__errno>:
 8009e10:	4b01      	ldr	r3, [pc, #4]	@ (8009e18 <__errno+0x8>)
 8009e12:	6818      	ldr	r0, [r3, #0]
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	200000a0 	.word	0x200000a0

08009e1c <__libc_init_array>:
 8009e1c:	b570      	push	{r4, r5, r6, lr}
 8009e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8009e54 <__libc_init_array+0x38>)
 8009e20:	4c0d      	ldr	r4, [pc, #52]	@ (8009e58 <__libc_init_array+0x3c>)
 8009e22:	1b64      	subs	r4, r4, r5
 8009e24:	10a4      	asrs	r4, r4, #2
 8009e26:	2600      	movs	r6, #0
 8009e28:	42a6      	cmp	r6, r4
 8009e2a:	d109      	bne.n	8009e40 <__libc_init_array+0x24>
 8009e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8009e5c <__libc_init_array+0x40>)
 8009e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8009e60 <__libc_init_array+0x44>)
 8009e30:	f000 fc66 	bl	800a700 <_init>
 8009e34:	1b64      	subs	r4, r4, r5
 8009e36:	10a4      	asrs	r4, r4, #2
 8009e38:	2600      	movs	r6, #0
 8009e3a:	42a6      	cmp	r6, r4
 8009e3c:	d105      	bne.n	8009e4a <__libc_init_array+0x2e>
 8009e3e:	bd70      	pop	{r4, r5, r6, pc}
 8009e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e44:	4798      	blx	r3
 8009e46:	3601      	adds	r6, #1
 8009e48:	e7ee      	b.n	8009e28 <__libc_init_array+0xc>
 8009e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e4e:	4798      	blx	r3
 8009e50:	3601      	adds	r6, #1
 8009e52:	e7f2      	b.n	8009e3a <__libc_init_array+0x1e>
 8009e54:	0801b9a8 	.word	0x0801b9a8
 8009e58:	0801b9a8 	.word	0x0801b9a8
 8009e5c:	0801b9a8 	.word	0x0801b9a8
 8009e60:	0801b9ac 	.word	0x0801b9ac

08009e64 <__retarget_lock_acquire_recursive>:
 8009e64:	4770      	bx	lr

08009e66 <__retarget_lock_release_recursive>:
 8009e66:	4770      	bx	lr

08009e68 <_free_r>:
 8009e68:	b538      	push	{r3, r4, r5, lr}
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	2900      	cmp	r1, #0
 8009e6e:	d041      	beq.n	8009ef4 <_free_r+0x8c>
 8009e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e74:	1f0c      	subs	r4, r1, #4
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	bfb8      	it	lt
 8009e7a:	18e4      	addlt	r4, r4, r3
 8009e7c:	f000 f8e0 	bl	800a040 <__malloc_lock>
 8009e80:	4a1d      	ldr	r2, [pc, #116]	@ (8009ef8 <_free_r+0x90>)
 8009e82:	6813      	ldr	r3, [r2, #0]
 8009e84:	b933      	cbnz	r3, 8009e94 <_free_r+0x2c>
 8009e86:	6063      	str	r3, [r4, #4]
 8009e88:	6014      	str	r4, [r2, #0]
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e90:	f000 b8dc 	b.w	800a04c <__malloc_unlock>
 8009e94:	42a3      	cmp	r3, r4
 8009e96:	d908      	bls.n	8009eaa <_free_r+0x42>
 8009e98:	6820      	ldr	r0, [r4, #0]
 8009e9a:	1821      	adds	r1, r4, r0
 8009e9c:	428b      	cmp	r3, r1
 8009e9e:	bf01      	itttt	eq
 8009ea0:	6819      	ldreq	r1, [r3, #0]
 8009ea2:	685b      	ldreq	r3, [r3, #4]
 8009ea4:	1809      	addeq	r1, r1, r0
 8009ea6:	6021      	streq	r1, [r4, #0]
 8009ea8:	e7ed      	b.n	8009e86 <_free_r+0x1e>
 8009eaa:	461a      	mov	r2, r3
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	b10b      	cbz	r3, 8009eb4 <_free_r+0x4c>
 8009eb0:	42a3      	cmp	r3, r4
 8009eb2:	d9fa      	bls.n	8009eaa <_free_r+0x42>
 8009eb4:	6811      	ldr	r1, [r2, #0]
 8009eb6:	1850      	adds	r0, r2, r1
 8009eb8:	42a0      	cmp	r0, r4
 8009eba:	d10b      	bne.n	8009ed4 <_free_r+0x6c>
 8009ebc:	6820      	ldr	r0, [r4, #0]
 8009ebe:	4401      	add	r1, r0
 8009ec0:	1850      	adds	r0, r2, r1
 8009ec2:	4283      	cmp	r3, r0
 8009ec4:	6011      	str	r1, [r2, #0]
 8009ec6:	d1e0      	bne.n	8009e8a <_free_r+0x22>
 8009ec8:	6818      	ldr	r0, [r3, #0]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	6053      	str	r3, [r2, #4]
 8009ece:	4408      	add	r0, r1
 8009ed0:	6010      	str	r0, [r2, #0]
 8009ed2:	e7da      	b.n	8009e8a <_free_r+0x22>
 8009ed4:	d902      	bls.n	8009edc <_free_r+0x74>
 8009ed6:	230c      	movs	r3, #12
 8009ed8:	602b      	str	r3, [r5, #0]
 8009eda:	e7d6      	b.n	8009e8a <_free_r+0x22>
 8009edc:	6820      	ldr	r0, [r4, #0]
 8009ede:	1821      	adds	r1, r4, r0
 8009ee0:	428b      	cmp	r3, r1
 8009ee2:	bf04      	itt	eq
 8009ee4:	6819      	ldreq	r1, [r3, #0]
 8009ee6:	685b      	ldreq	r3, [r3, #4]
 8009ee8:	6063      	str	r3, [r4, #4]
 8009eea:	bf04      	itt	eq
 8009eec:	1809      	addeq	r1, r1, r0
 8009eee:	6021      	streq	r1, [r4, #0]
 8009ef0:	6054      	str	r4, [r2, #4]
 8009ef2:	e7ca      	b.n	8009e8a <_free_r+0x22>
 8009ef4:	bd38      	pop	{r3, r4, r5, pc}
 8009ef6:	bf00      	nop
 8009ef8:	200063c4 	.word	0x200063c4

08009efc <sbrk_aligned>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	4e0f      	ldr	r6, [pc, #60]	@ (8009f3c <sbrk_aligned+0x40>)
 8009f00:	460c      	mov	r4, r1
 8009f02:	6831      	ldr	r1, [r6, #0]
 8009f04:	4605      	mov	r5, r0
 8009f06:	b911      	cbnz	r1, 8009f0e <sbrk_aligned+0x12>
 8009f08:	f000 fba6 	bl	800a658 <_sbrk_r>
 8009f0c:	6030      	str	r0, [r6, #0]
 8009f0e:	4621      	mov	r1, r4
 8009f10:	4628      	mov	r0, r5
 8009f12:	f000 fba1 	bl	800a658 <_sbrk_r>
 8009f16:	1c43      	adds	r3, r0, #1
 8009f18:	d103      	bne.n	8009f22 <sbrk_aligned+0x26>
 8009f1a:	f04f 34ff 	mov.w	r4, #4294967295
 8009f1e:	4620      	mov	r0, r4
 8009f20:	bd70      	pop	{r4, r5, r6, pc}
 8009f22:	1cc4      	adds	r4, r0, #3
 8009f24:	f024 0403 	bic.w	r4, r4, #3
 8009f28:	42a0      	cmp	r0, r4
 8009f2a:	d0f8      	beq.n	8009f1e <sbrk_aligned+0x22>
 8009f2c:	1a21      	subs	r1, r4, r0
 8009f2e:	4628      	mov	r0, r5
 8009f30:	f000 fb92 	bl	800a658 <_sbrk_r>
 8009f34:	3001      	adds	r0, #1
 8009f36:	d1f2      	bne.n	8009f1e <sbrk_aligned+0x22>
 8009f38:	e7ef      	b.n	8009f1a <sbrk_aligned+0x1e>
 8009f3a:	bf00      	nop
 8009f3c:	200063c0 	.word	0x200063c0

08009f40 <_malloc_r>:
 8009f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f44:	1ccd      	adds	r5, r1, #3
 8009f46:	f025 0503 	bic.w	r5, r5, #3
 8009f4a:	3508      	adds	r5, #8
 8009f4c:	2d0c      	cmp	r5, #12
 8009f4e:	bf38      	it	cc
 8009f50:	250c      	movcc	r5, #12
 8009f52:	2d00      	cmp	r5, #0
 8009f54:	4606      	mov	r6, r0
 8009f56:	db01      	blt.n	8009f5c <_malloc_r+0x1c>
 8009f58:	42a9      	cmp	r1, r5
 8009f5a:	d904      	bls.n	8009f66 <_malloc_r+0x26>
 8009f5c:	230c      	movs	r3, #12
 8009f5e:	6033      	str	r3, [r6, #0]
 8009f60:	2000      	movs	r0, #0
 8009f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a03c <_malloc_r+0xfc>
 8009f6a:	f000 f869 	bl	800a040 <__malloc_lock>
 8009f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f72:	461c      	mov	r4, r3
 8009f74:	bb44      	cbnz	r4, 8009fc8 <_malloc_r+0x88>
 8009f76:	4629      	mov	r1, r5
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f7ff ffbf 	bl	8009efc <sbrk_aligned>
 8009f7e:	1c43      	adds	r3, r0, #1
 8009f80:	4604      	mov	r4, r0
 8009f82:	d158      	bne.n	800a036 <_malloc_r+0xf6>
 8009f84:	f8d8 4000 	ldr.w	r4, [r8]
 8009f88:	4627      	mov	r7, r4
 8009f8a:	2f00      	cmp	r7, #0
 8009f8c:	d143      	bne.n	800a016 <_malloc_r+0xd6>
 8009f8e:	2c00      	cmp	r4, #0
 8009f90:	d04b      	beq.n	800a02a <_malloc_r+0xea>
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	4639      	mov	r1, r7
 8009f96:	4630      	mov	r0, r6
 8009f98:	eb04 0903 	add.w	r9, r4, r3
 8009f9c:	f000 fb5c 	bl	800a658 <_sbrk_r>
 8009fa0:	4581      	cmp	r9, r0
 8009fa2:	d142      	bne.n	800a02a <_malloc_r+0xea>
 8009fa4:	6821      	ldr	r1, [r4, #0]
 8009fa6:	1a6d      	subs	r5, r5, r1
 8009fa8:	4629      	mov	r1, r5
 8009faa:	4630      	mov	r0, r6
 8009fac:	f7ff ffa6 	bl	8009efc <sbrk_aligned>
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d03a      	beq.n	800a02a <_malloc_r+0xea>
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	442b      	add	r3, r5
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	f8d8 3000 	ldr.w	r3, [r8]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	bb62      	cbnz	r2, 800a01c <_malloc_r+0xdc>
 8009fc2:	f8c8 7000 	str.w	r7, [r8]
 8009fc6:	e00f      	b.n	8009fe8 <_malloc_r+0xa8>
 8009fc8:	6822      	ldr	r2, [r4, #0]
 8009fca:	1b52      	subs	r2, r2, r5
 8009fcc:	d420      	bmi.n	800a010 <_malloc_r+0xd0>
 8009fce:	2a0b      	cmp	r2, #11
 8009fd0:	d917      	bls.n	800a002 <_malloc_r+0xc2>
 8009fd2:	1961      	adds	r1, r4, r5
 8009fd4:	42a3      	cmp	r3, r4
 8009fd6:	6025      	str	r5, [r4, #0]
 8009fd8:	bf18      	it	ne
 8009fda:	6059      	strne	r1, [r3, #4]
 8009fdc:	6863      	ldr	r3, [r4, #4]
 8009fde:	bf08      	it	eq
 8009fe0:	f8c8 1000 	streq.w	r1, [r8]
 8009fe4:	5162      	str	r2, [r4, r5]
 8009fe6:	604b      	str	r3, [r1, #4]
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f000 f82f 	bl	800a04c <__malloc_unlock>
 8009fee:	f104 000b 	add.w	r0, r4, #11
 8009ff2:	1d23      	adds	r3, r4, #4
 8009ff4:	f020 0007 	bic.w	r0, r0, #7
 8009ff8:	1ac2      	subs	r2, r0, r3
 8009ffa:	bf1c      	itt	ne
 8009ffc:	1a1b      	subne	r3, r3, r0
 8009ffe:	50a3      	strne	r3, [r4, r2]
 800a000:	e7af      	b.n	8009f62 <_malloc_r+0x22>
 800a002:	6862      	ldr	r2, [r4, #4]
 800a004:	42a3      	cmp	r3, r4
 800a006:	bf0c      	ite	eq
 800a008:	f8c8 2000 	streq.w	r2, [r8]
 800a00c:	605a      	strne	r2, [r3, #4]
 800a00e:	e7eb      	b.n	8009fe8 <_malloc_r+0xa8>
 800a010:	4623      	mov	r3, r4
 800a012:	6864      	ldr	r4, [r4, #4]
 800a014:	e7ae      	b.n	8009f74 <_malloc_r+0x34>
 800a016:	463c      	mov	r4, r7
 800a018:	687f      	ldr	r7, [r7, #4]
 800a01a:	e7b6      	b.n	8009f8a <_malloc_r+0x4a>
 800a01c:	461a      	mov	r2, r3
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	42a3      	cmp	r3, r4
 800a022:	d1fb      	bne.n	800a01c <_malloc_r+0xdc>
 800a024:	2300      	movs	r3, #0
 800a026:	6053      	str	r3, [r2, #4]
 800a028:	e7de      	b.n	8009fe8 <_malloc_r+0xa8>
 800a02a:	230c      	movs	r3, #12
 800a02c:	6033      	str	r3, [r6, #0]
 800a02e:	4630      	mov	r0, r6
 800a030:	f000 f80c 	bl	800a04c <__malloc_unlock>
 800a034:	e794      	b.n	8009f60 <_malloc_r+0x20>
 800a036:	6005      	str	r5, [r0, #0]
 800a038:	e7d6      	b.n	8009fe8 <_malloc_r+0xa8>
 800a03a:	bf00      	nop
 800a03c:	200063c4 	.word	0x200063c4

0800a040 <__malloc_lock>:
 800a040:	4801      	ldr	r0, [pc, #4]	@ (800a048 <__malloc_lock+0x8>)
 800a042:	f7ff bf0f 	b.w	8009e64 <__retarget_lock_acquire_recursive>
 800a046:	bf00      	nop
 800a048:	200063bc 	.word	0x200063bc

0800a04c <__malloc_unlock>:
 800a04c:	4801      	ldr	r0, [pc, #4]	@ (800a054 <__malloc_unlock+0x8>)
 800a04e:	f7ff bf0a 	b.w	8009e66 <__retarget_lock_release_recursive>
 800a052:	bf00      	nop
 800a054:	200063bc 	.word	0x200063bc

0800a058 <__ssputs_r>:
 800a058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a05c:	688e      	ldr	r6, [r1, #8]
 800a05e:	461f      	mov	r7, r3
 800a060:	42be      	cmp	r6, r7
 800a062:	680b      	ldr	r3, [r1, #0]
 800a064:	4682      	mov	sl, r0
 800a066:	460c      	mov	r4, r1
 800a068:	4690      	mov	r8, r2
 800a06a:	d82d      	bhi.n	800a0c8 <__ssputs_r+0x70>
 800a06c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a070:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a074:	d026      	beq.n	800a0c4 <__ssputs_r+0x6c>
 800a076:	6965      	ldr	r5, [r4, #20]
 800a078:	6909      	ldr	r1, [r1, #16]
 800a07a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a07e:	eba3 0901 	sub.w	r9, r3, r1
 800a082:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a086:	1c7b      	adds	r3, r7, #1
 800a088:	444b      	add	r3, r9
 800a08a:	106d      	asrs	r5, r5, #1
 800a08c:	429d      	cmp	r5, r3
 800a08e:	bf38      	it	cc
 800a090:	461d      	movcc	r5, r3
 800a092:	0553      	lsls	r3, r2, #21
 800a094:	d527      	bpl.n	800a0e6 <__ssputs_r+0x8e>
 800a096:	4629      	mov	r1, r5
 800a098:	f7ff ff52 	bl	8009f40 <_malloc_r>
 800a09c:	4606      	mov	r6, r0
 800a09e:	b360      	cbz	r0, 800a0fa <__ssputs_r+0xa2>
 800a0a0:	6921      	ldr	r1, [r4, #16]
 800a0a2:	464a      	mov	r2, r9
 800a0a4:	f000 fae8 	bl	800a678 <memcpy>
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a0ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0b2:	81a3      	strh	r3, [r4, #12]
 800a0b4:	6126      	str	r6, [r4, #16]
 800a0b6:	6165      	str	r5, [r4, #20]
 800a0b8:	444e      	add	r6, r9
 800a0ba:	eba5 0509 	sub.w	r5, r5, r9
 800a0be:	6026      	str	r6, [r4, #0]
 800a0c0:	60a5      	str	r5, [r4, #8]
 800a0c2:	463e      	mov	r6, r7
 800a0c4:	42be      	cmp	r6, r7
 800a0c6:	d900      	bls.n	800a0ca <__ssputs_r+0x72>
 800a0c8:	463e      	mov	r6, r7
 800a0ca:	6820      	ldr	r0, [r4, #0]
 800a0cc:	4632      	mov	r2, r6
 800a0ce:	4641      	mov	r1, r8
 800a0d0:	f000 faa8 	bl	800a624 <memmove>
 800a0d4:	68a3      	ldr	r3, [r4, #8]
 800a0d6:	1b9b      	subs	r3, r3, r6
 800a0d8:	60a3      	str	r3, [r4, #8]
 800a0da:	6823      	ldr	r3, [r4, #0]
 800a0dc:	4433      	add	r3, r6
 800a0de:	6023      	str	r3, [r4, #0]
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e6:	462a      	mov	r2, r5
 800a0e8:	f000 fad4 	bl	800a694 <_realloc_r>
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d1e0      	bne.n	800a0b4 <__ssputs_r+0x5c>
 800a0f2:	6921      	ldr	r1, [r4, #16]
 800a0f4:	4650      	mov	r0, sl
 800a0f6:	f7ff feb7 	bl	8009e68 <_free_r>
 800a0fa:	230c      	movs	r3, #12
 800a0fc:	f8ca 3000 	str.w	r3, [sl]
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a106:	81a3      	strh	r3, [r4, #12]
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	e7e9      	b.n	800a0e2 <__ssputs_r+0x8a>
	...

0800a110 <_svfiprintf_r>:
 800a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	4698      	mov	r8, r3
 800a116:	898b      	ldrh	r3, [r1, #12]
 800a118:	061b      	lsls	r3, r3, #24
 800a11a:	b09d      	sub	sp, #116	@ 0x74
 800a11c:	4607      	mov	r7, r0
 800a11e:	460d      	mov	r5, r1
 800a120:	4614      	mov	r4, r2
 800a122:	d510      	bpl.n	800a146 <_svfiprintf_r+0x36>
 800a124:	690b      	ldr	r3, [r1, #16]
 800a126:	b973      	cbnz	r3, 800a146 <_svfiprintf_r+0x36>
 800a128:	2140      	movs	r1, #64	@ 0x40
 800a12a:	f7ff ff09 	bl	8009f40 <_malloc_r>
 800a12e:	6028      	str	r0, [r5, #0]
 800a130:	6128      	str	r0, [r5, #16]
 800a132:	b930      	cbnz	r0, 800a142 <_svfiprintf_r+0x32>
 800a134:	230c      	movs	r3, #12
 800a136:	603b      	str	r3, [r7, #0]
 800a138:	f04f 30ff 	mov.w	r0, #4294967295
 800a13c:	b01d      	add	sp, #116	@ 0x74
 800a13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a142:	2340      	movs	r3, #64	@ 0x40
 800a144:	616b      	str	r3, [r5, #20]
 800a146:	2300      	movs	r3, #0
 800a148:	9309      	str	r3, [sp, #36]	@ 0x24
 800a14a:	2320      	movs	r3, #32
 800a14c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a150:	f8cd 800c 	str.w	r8, [sp, #12]
 800a154:	2330      	movs	r3, #48	@ 0x30
 800a156:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a2f4 <_svfiprintf_r+0x1e4>
 800a15a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a15e:	f04f 0901 	mov.w	r9, #1
 800a162:	4623      	mov	r3, r4
 800a164:	469a      	mov	sl, r3
 800a166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a16a:	b10a      	cbz	r2, 800a170 <_svfiprintf_r+0x60>
 800a16c:	2a25      	cmp	r2, #37	@ 0x25
 800a16e:	d1f9      	bne.n	800a164 <_svfiprintf_r+0x54>
 800a170:	ebba 0b04 	subs.w	fp, sl, r4
 800a174:	d00b      	beq.n	800a18e <_svfiprintf_r+0x7e>
 800a176:	465b      	mov	r3, fp
 800a178:	4622      	mov	r2, r4
 800a17a:	4629      	mov	r1, r5
 800a17c:	4638      	mov	r0, r7
 800a17e:	f7ff ff6b 	bl	800a058 <__ssputs_r>
 800a182:	3001      	adds	r0, #1
 800a184:	f000 80a7 	beq.w	800a2d6 <_svfiprintf_r+0x1c6>
 800a188:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a18a:	445a      	add	r2, fp
 800a18c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a18e:	f89a 3000 	ldrb.w	r3, [sl]
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 809f 	beq.w	800a2d6 <_svfiprintf_r+0x1c6>
 800a198:	2300      	movs	r3, #0
 800a19a:	f04f 32ff 	mov.w	r2, #4294967295
 800a19e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1a2:	f10a 0a01 	add.w	sl, sl, #1
 800a1a6:	9304      	str	r3, [sp, #16]
 800a1a8:	9307      	str	r3, [sp, #28]
 800a1aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1b0:	4654      	mov	r4, sl
 800a1b2:	2205      	movs	r2, #5
 800a1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b8:	484e      	ldr	r0, [pc, #312]	@ (800a2f4 <_svfiprintf_r+0x1e4>)
 800a1ba:	f7f6 f811 	bl	80001e0 <memchr>
 800a1be:	9a04      	ldr	r2, [sp, #16]
 800a1c0:	b9d8      	cbnz	r0, 800a1fa <_svfiprintf_r+0xea>
 800a1c2:	06d0      	lsls	r0, r2, #27
 800a1c4:	bf44      	itt	mi
 800a1c6:	2320      	movmi	r3, #32
 800a1c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1cc:	0711      	lsls	r1, r2, #28
 800a1ce:	bf44      	itt	mi
 800a1d0:	232b      	movmi	r3, #43	@ 0x2b
 800a1d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1da:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1dc:	d015      	beq.n	800a20a <_svfiprintf_r+0xfa>
 800a1de:	9a07      	ldr	r2, [sp, #28]
 800a1e0:	4654      	mov	r4, sl
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	f04f 0c0a 	mov.w	ip, #10
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1ee:	3b30      	subs	r3, #48	@ 0x30
 800a1f0:	2b09      	cmp	r3, #9
 800a1f2:	d94b      	bls.n	800a28c <_svfiprintf_r+0x17c>
 800a1f4:	b1b0      	cbz	r0, 800a224 <_svfiprintf_r+0x114>
 800a1f6:	9207      	str	r2, [sp, #28]
 800a1f8:	e014      	b.n	800a224 <_svfiprintf_r+0x114>
 800a1fa:	eba0 0308 	sub.w	r3, r0, r8
 800a1fe:	fa09 f303 	lsl.w	r3, r9, r3
 800a202:	4313      	orrs	r3, r2
 800a204:	9304      	str	r3, [sp, #16]
 800a206:	46a2      	mov	sl, r4
 800a208:	e7d2      	b.n	800a1b0 <_svfiprintf_r+0xa0>
 800a20a:	9b03      	ldr	r3, [sp, #12]
 800a20c:	1d19      	adds	r1, r3, #4
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	9103      	str	r1, [sp, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	bfbb      	ittet	lt
 800a216:	425b      	neglt	r3, r3
 800a218:	f042 0202 	orrlt.w	r2, r2, #2
 800a21c:	9307      	strge	r3, [sp, #28]
 800a21e:	9307      	strlt	r3, [sp, #28]
 800a220:	bfb8      	it	lt
 800a222:	9204      	strlt	r2, [sp, #16]
 800a224:	7823      	ldrb	r3, [r4, #0]
 800a226:	2b2e      	cmp	r3, #46	@ 0x2e
 800a228:	d10a      	bne.n	800a240 <_svfiprintf_r+0x130>
 800a22a:	7863      	ldrb	r3, [r4, #1]
 800a22c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a22e:	d132      	bne.n	800a296 <_svfiprintf_r+0x186>
 800a230:	9b03      	ldr	r3, [sp, #12]
 800a232:	1d1a      	adds	r2, r3, #4
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	9203      	str	r2, [sp, #12]
 800a238:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a23c:	3402      	adds	r4, #2
 800a23e:	9305      	str	r3, [sp, #20]
 800a240:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a304 <_svfiprintf_r+0x1f4>
 800a244:	7821      	ldrb	r1, [r4, #0]
 800a246:	2203      	movs	r2, #3
 800a248:	4650      	mov	r0, sl
 800a24a:	f7f5 ffc9 	bl	80001e0 <memchr>
 800a24e:	b138      	cbz	r0, 800a260 <_svfiprintf_r+0x150>
 800a250:	9b04      	ldr	r3, [sp, #16]
 800a252:	eba0 000a 	sub.w	r0, r0, sl
 800a256:	2240      	movs	r2, #64	@ 0x40
 800a258:	4082      	lsls	r2, r0
 800a25a:	4313      	orrs	r3, r2
 800a25c:	3401      	adds	r4, #1
 800a25e:	9304      	str	r3, [sp, #16]
 800a260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a264:	4824      	ldr	r0, [pc, #144]	@ (800a2f8 <_svfiprintf_r+0x1e8>)
 800a266:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a26a:	2206      	movs	r2, #6
 800a26c:	f7f5 ffb8 	bl	80001e0 <memchr>
 800a270:	2800      	cmp	r0, #0
 800a272:	d036      	beq.n	800a2e2 <_svfiprintf_r+0x1d2>
 800a274:	4b21      	ldr	r3, [pc, #132]	@ (800a2fc <_svfiprintf_r+0x1ec>)
 800a276:	bb1b      	cbnz	r3, 800a2c0 <_svfiprintf_r+0x1b0>
 800a278:	9b03      	ldr	r3, [sp, #12]
 800a27a:	3307      	adds	r3, #7
 800a27c:	f023 0307 	bic.w	r3, r3, #7
 800a280:	3308      	adds	r3, #8
 800a282:	9303      	str	r3, [sp, #12]
 800a284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a286:	4433      	add	r3, r6
 800a288:	9309      	str	r3, [sp, #36]	@ 0x24
 800a28a:	e76a      	b.n	800a162 <_svfiprintf_r+0x52>
 800a28c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a290:	460c      	mov	r4, r1
 800a292:	2001      	movs	r0, #1
 800a294:	e7a8      	b.n	800a1e8 <_svfiprintf_r+0xd8>
 800a296:	2300      	movs	r3, #0
 800a298:	3401      	adds	r4, #1
 800a29a:	9305      	str	r3, [sp, #20]
 800a29c:	4619      	mov	r1, r3
 800a29e:	f04f 0c0a 	mov.w	ip, #10
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2a8:	3a30      	subs	r2, #48	@ 0x30
 800a2aa:	2a09      	cmp	r2, #9
 800a2ac:	d903      	bls.n	800a2b6 <_svfiprintf_r+0x1a6>
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0c6      	beq.n	800a240 <_svfiprintf_r+0x130>
 800a2b2:	9105      	str	r1, [sp, #20]
 800a2b4:	e7c4      	b.n	800a240 <_svfiprintf_r+0x130>
 800a2b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e7f0      	b.n	800a2a2 <_svfiprintf_r+0x192>
 800a2c0:	ab03      	add	r3, sp, #12
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	462a      	mov	r2, r5
 800a2c6:	4b0e      	ldr	r3, [pc, #56]	@ (800a300 <_svfiprintf_r+0x1f0>)
 800a2c8:	a904      	add	r1, sp, #16
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	f3af 8000 	nop.w
 800a2d0:	1c42      	adds	r2, r0, #1
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	d1d6      	bne.n	800a284 <_svfiprintf_r+0x174>
 800a2d6:	89ab      	ldrh	r3, [r5, #12]
 800a2d8:	065b      	lsls	r3, r3, #25
 800a2da:	f53f af2d 	bmi.w	800a138 <_svfiprintf_r+0x28>
 800a2de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2e0:	e72c      	b.n	800a13c <_svfiprintf_r+0x2c>
 800a2e2:	ab03      	add	r3, sp, #12
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	462a      	mov	r2, r5
 800a2e8:	4b05      	ldr	r3, [pc, #20]	@ (800a300 <_svfiprintf_r+0x1f0>)
 800a2ea:	a904      	add	r1, sp, #16
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	f000 f879 	bl	800a3e4 <_printf_i>
 800a2f2:	e7ed      	b.n	800a2d0 <_svfiprintf_r+0x1c0>
 800a2f4:	0801b96c 	.word	0x0801b96c
 800a2f8:	0801b976 	.word	0x0801b976
 800a2fc:	00000000 	.word	0x00000000
 800a300:	0800a059 	.word	0x0800a059
 800a304:	0801b972 	.word	0x0801b972

0800a308 <_printf_common>:
 800a308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a30c:	4616      	mov	r6, r2
 800a30e:	4698      	mov	r8, r3
 800a310:	688a      	ldr	r2, [r1, #8]
 800a312:	690b      	ldr	r3, [r1, #16]
 800a314:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a318:	4293      	cmp	r3, r2
 800a31a:	bfb8      	it	lt
 800a31c:	4613      	movlt	r3, r2
 800a31e:	6033      	str	r3, [r6, #0]
 800a320:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a324:	4607      	mov	r7, r0
 800a326:	460c      	mov	r4, r1
 800a328:	b10a      	cbz	r2, 800a32e <_printf_common+0x26>
 800a32a:	3301      	adds	r3, #1
 800a32c:	6033      	str	r3, [r6, #0]
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	0699      	lsls	r1, r3, #26
 800a332:	bf42      	ittt	mi
 800a334:	6833      	ldrmi	r3, [r6, #0]
 800a336:	3302      	addmi	r3, #2
 800a338:	6033      	strmi	r3, [r6, #0]
 800a33a:	6825      	ldr	r5, [r4, #0]
 800a33c:	f015 0506 	ands.w	r5, r5, #6
 800a340:	d106      	bne.n	800a350 <_printf_common+0x48>
 800a342:	f104 0a19 	add.w	sl, r4, #25
 800a346:	68e3      	ldr	r3, [r4, #12]
 800a348:	6832      	ldr	r2, [r6, #0]
 800a34a:	1a9b      	subs	r3, r3, r2
 800a34c:	42ab      	cmp	r3, r5
 800a34e:	dc26      	bgt.n	800a39e <_printf_common+0x96>
 800a350:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a354:	6822      	ldr	r2, [r4, #0]
 800a356:	3b00      	subs	r3, #0
 800a358:	bf18      	it	ne
 800a35a:	2301      	movne	r3, #1
 800a35c:	0692      	lsls	r2, r2, #26
 800a35e:	d42b      	bmi.n	800a3b8 <_printf_common+0xb0>
 800a360:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a364:	4641      	mov	r1, r8
 800a366:	4638      	mov	r0, r7
 800a368:	47c8      	blx	r9
 800a36a:	3001      	adds	r0, #1
 800a36c:	d01e      	beq.n	800a3ac <_printf_common+0xa4>
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	6922      	ldr	r2, [r4, #16]
 800a372:	f003 0306 	and.w	r3, r3, #6
 800a376:	2b04      	cmp	r3, #4
 800a378:	bf02      	ittt	eq
 800a37a:	68e5      	ldreq	r5, [r4, #12]
 800a37c:	6833      	ldreq	r3, [r6, #0]
 800a37e:	1aed      	subeq	r5, r5, r3
 800a380:	68a3      	ldr	r3, [r4, #8]
 800a382:	bf0c      	ite	eq
 800a384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a388:	2500      	movne	r5, #0
 800a38a:	4293      	cmp	r3, r2
 800a38c:	bfc4      	itt	gt
 800a38e:	1a9b      	subgt	r3, r3, r2
 800a390:	18ed      	addgt	r5, r5, r3
 800a392:	2600      	movs	r6, #0
 800a394:	341a      	adds	r4, #26
 800a396:	42b5      	cmp	r5, r6
 800a398:	d11a      	bne.n	800a3d0 <_printf_common+0xc8>
 800a39a:	2000      	movs	r0, #0
 800a39c:	e008      	b.n	800a3b0 <_printf_common+0xa8>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	4652      	mov	r2, sl
 800a3a2:	4641      	mov	r1, r8
 800a3a4:	4638      	mov	r0, r7
 800a3a6:	47c8      	blx	r9
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	d103      	bne.n	800a3b4 <_printf_common+0xac>
 800a3ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b4:	3501      	adds	r5, #1
 800a3b6:	e7c6      	b.n	800a346 <_printf_common+0x3e>
 800a3b8:	18e1      	adds	r1, r4, r3
 800a3ba:	1c5a      	adds	r2, r3, #1
 800a3bc:	2030      	movs	r0, #48	@ 0x30
 800a3be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a3c2:	4422      	add	r2, r4
 800a3c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a3c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a3cc:	3302      	adds	r3, #2
 800a3ce:	e7c7      	b.n	800a360 <_printf_common+0x58>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	4622      	mov	r2, r4
 800a3d4:	4641      	mov	r1, r8
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	47c8      	blx	r9
 800a3da:	3001      	adds	r0, #1
 800a3dc:	d0e6      	beq.n	800a3ac <_printf_common+0xa4>
 800a3de:	3601      	adds	r6, #1
 800a3e0:	e7d9      	b.n	800a396 <_printf_common+0x8e>
	...

0800a3e4 <_printf_i>:
 800a3e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e8:	7e0f      	ldrb	r7, [r1, #24]
 800a3ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a3ec:	2f78      	cmp	r7, #120	@ 0x78
 800a3ee:	4691      	mov	r9, r2
 800a3f0:	4680      	mov	r8, r0
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	469a      	mov	sl, r3
 800a3f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a3fa:	d807      	bhi.n	800a40c <_printf_i+0x28>
 800a3fc:	2f62      	cmp	r7, #98	@ 0x62
 800a3fe:	d80a      	bhi.n	800a416 <_printf_i+0x32>
 800a400:	2f00      	cmp	r7, #0
 800a402:	f000 80d2 	beq.w	800a5aa <_printf_i+0x1c6>
 800a406:	2f58      	cmp	r7, #88	@ 0x58
 800a408:	f000 80b9 	beq.w	800a57e <_printf_i+0x19a>
 800a40c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a410:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a414:	e03a      	b.n	800a48c <_printf_i+0xa8>
 800a416:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a41a:	2b15      	cmp	r3, #21
 800a41c:	d8f6      	bhi.n	800a40c <_printf_i+0x28>
 800a41e:	a101      	add	r1, pc, #4	@ (adr r1, 800a424 <_printf_i+0x40>)
 800a420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a424:	0800a47d 	.word	0x0800a47d
 800a428:	0800a491 	.word	0x0800a491
 800a42c:	0800a40d 	.word	0x0800a40d
 800a430:	0800a40d 	.word	0x0800a40d
 800a434:	0800a40d 	.word	0x0800a40d
 800a438:	0800a40d 	.word	0x0800a40d
 800a43c:	0800a491 	.word	0x0800a491
 800a440:	0800a40d 	.word	0x0800a40d
 800a444:	0800a40d 	.word	0x0800a40d
 800a448:	0800a40d 	.word	0x0800a40d
 800a44c:	0800a40d 	.word	0x0800a40d
 800a450:	0800a591 	.word	0x0800a591
 800a454:	0800a4bb 	.word	0x0800a4bb
 800a458:	0800a54b 	.word	0x0800a54b
 800a45c:	0800a40d 	.word	0x0800a40d
 800a460:	0800a40d 	.word	0x0800a40d
 800a464:	0800a5b3 	.word	0x0800a5b3
 800a468:	0800a40d 	.word	0x0800a40d
 800a46c:	0800a4bb 	.word	0x0800a4bb
 800a470:	0800a40d 	.word	0x0800a40d
 800a474:	0800a40d 	.word	0x0800a40d
 800a478:	0800a553 	.word	0x0800a553
 800a47c:	6833      	ldr	r3, [r6, #0]
 800a47e:	1d1a      	adds	r2, r3, #4
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6032      	str	r2, [r6, #0]
 800a484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a488:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a48c:	2301      	movs	r3, #1
 800a48e:	e09d      	b.n	800a5cc <_printf_i+0x1e8>
 800a490:	6833      	ldr	r3, [r6, #0]
 800a492:	6820      	ldr	r0, [r4, #0]
 800a494:	1d19      	adds	r1, r3, #4
 800a496:	6031      	str	r1, [r6, #0]
 800a498:	0606      	lsls	r6, r0, #24
 800a49a:	d501      	bpl.n	800a4a0 <_printf_i+0xbc>
 800a49c:	681d      	ldr	r5, [r3, #0]
 800a49e:	e003      	b.n	800a4a8 <_printf_i+0xc4>
 800a4a0:	0645      	lsls	r5, r0, #25
 800a4a2:	d5fb      	bpl.n	800a49c <_printf_i+0xb8>
 800a4a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a4a8:	2d00      	cmp	r5, #0
 800a4aa:	da03      	bge.n	800a4b4 <_printf_i+0xd0>
 800a4ac:	232d      	movs	r3, #45	@ 0x2d
 800a4ae:	426d      	negs	r5, r5
 800a4b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4b4:	4859      	ldr	r0, [pc, #356]	@ (800a61c <_printf_i+0x238>)
 800a4b6:	230a      	movs	r3, #10
 800a4b8:	e011      	b.n	800a4de <_printf_i+0xfa>
 800a4ba:	6821      	ldr	r1, [r4, #0]
 800a4bc:	6833      	ldr	r3, [r6, #0]
 800a4be:	0608      	lsls	r0, r1, #24
 800a4c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a4c4:	d402      	bmi.n	800a4cc <_printf_i+0xe8>
 800a4c6:	0649      	lsls	r1, r1, #25
 800a4c8:	bf48      	it	mi
 800a4ca:	b2ad      	uxthmi	r5, r5
 800a4cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a4ce:	4853      	ldr	r0, [pc, #332]	@ (800a61c <_printf_i+0x238>)
 800a4d0:	6033      	str	r3, [r6, #0]
 800a4d2:	bf14      	ite	ne
 800a4d4:	230a      	movne	r3, #10
 800a4d6:	2308      	moveq	r3, #8
 800a4d8:	2100      	movs	r1, #0
 800a4da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a4de:	6866      	ldr	r6, [r4, #4]
 800a4e0:	60a6      	str	r6, [r4, #8]
 800a4e2:	2e00      	cmp	r6, #0
 800a4e4:	bfa2      	ittt	ge
 800a4e6:	6821      	ldrge	r1, [r4, #0]
 800a4e8:	f021 0104 	bicge.w	r1, r1, #4
 800a4ec:	6021      	strge	r1, [r4, #0]
 800a4ee:	b90d      	cbnz	r5, 800a4f4 <_printf_i+0x110>
 800a4f0:	2e00      	cmp	r6, #0
 800a4f2:	d04b      	beq.n	800a58c <_printf_i+0x1a8>
 800a4f4:	4616      	mov	r6, r2
 800a4f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a4fa:	fb03 5711 	mls	r7, r3, r1, r5
 800a4fe:	5dc7      	ldrb	r7, [r0, r7]
 800a500:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a504:	462f      	mov	r7, r5
 800a506:	42bb      	cmp	r3, r7
 800a508:	460d      	mov	r5, r1
 800a50a:	d9f4      	bls.n	800a4f6 <_printf_i+0x112>
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d10b      	bne.n	800a528 <_printf_i+0x144>
 800a510:	6823      	ldr	r3, [r4, #0]
 800a512:	07df      	lsls	r7, r3, #31
 800a514:	d508      	bpl.n	800a528 <_printf_i+0x144>
 800a516:	6923      	ldr	r3, [r4, #16]
 800a518:	6861      	ldr	r1, [r4, #4]
 800a51a:	4299      	cmp	r1, r3
 800a51c:	bfde      	ittt	le
 800a51e:	2330      	movle	r3, #48	@ 0x30
 800a520:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a524:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a528:	1b92      	subs	r2, r2, r6
 800a52a:	6122      	str	r2, [r4, #16]
 800a52c:	f8cd a000 	str.w	sl, [sp]
 800a530:	464b      	mov	r3, r9
 800a532:	aa03      	add	r2, sp, #12
 800a534:	4621      	mov	r1, r4
 800a536:	4640      	mov	r0, r8
 800a538:	f7ff fee6 	bl	800a308 <_printf_common>
 800a53c:	3001      	adds	r0, #1
 800a53e:	d14a      	bne.n	800a5d6 <_printf_i+0x1f2>
 800a540:	f04f 30ff 	mov.w	r0, #4294967295
 800a544:	b004      	add	sp, #16
 800a546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	f043 0320 	orr.w	r3, r3, #32
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	4833      	ldr	r0, [pc, #204]	@ (800a620 <_printf_i+0x23c>)
 800a554:	2778      	movs	r7, #120	@ 0x78
 800a556:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	6831      	ldr	r1, [r6, #0]
 800a55e:	061f      	lsls	r7, r3, #24
 800a560:	f851 5b04 	ldr.w	r5, [r1], #4
 800a564:	d402      	bmi.n	800a56c <_printf_i+0x188>
 800a566:	065f      	lsls	r7, r3, #25
 800a568:	bf48      	it	mi
 800a56a:	b2ad      	uxthmi	r5, r5
 800a56c:	6031      	str	r1, [r6, #0]
 800a56e:	07d9      	lsls	r1, r3, #31
 800a570:	bf44      	itt	mi
 800a572:	f043 0320 	orrmi.w	r3, r3, #32
 800a576:	6023      	strmi	r3, [r4, #0]
 800a578:	b11d      	cbz	r5, 800a582 <_printf_i+0x19e>
 800a57a:	2310      	movs	r3, #16
 800a57c:	e7ac      	b.n	800a4d8 <_printf_i+0xf4>
 800a57e:	4827      	ldr	r0, [pc, #156]	@ (800a61c <_printf_i+0x238>)
 800a580:	e7e9      	b.n	800a556 <_printf_i+0x172>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	f023 0320 	bic.w	r3, r3, #32
 800a588:	6023      	str	r3, [r4, #0]
 800a58a:	e7f6      	b.n	800a57a <_printf_i+0x196>
 800a58c:	4616      	mov	r6, r2
 800a58e:	e7bd      	b.n	800a50c <_printf_i+0x128>
 800a590:	6833      	ldr	r3, [r6, #0]
 800a592:	6825      	ldr	r5, [r4, #0]
 800a594:	6961      	ldr	r1, [r4, #20]
 800a596:	1d18      	adds	r0, r3, #4
 800a598:	6030      	str	r0, [r6, #0]
 800a59a:	062e      	lsls	r6, r5, #24
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	d501      	bpl.n	800a5a4 <_printf_i+0x1c0>
 800a5a0:	6019      	str	r1, [r3, #0]
 800a5a2:	e002      	b.n	800a5aa <_printf_i+0x1c6>
 800a5a4:	0668      	lsls	r0, r5, #25
 800a5a6:	d5fb      	bpl.n	800a5a0 <_printf_i+0x1bc>
 800a5a8:	8019      	strh	r1, [r3, #0]
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	6123      	str	r3, [r4, #16]
 800a5ae:	4616      	mov	r6, r2
 800a5b0:	e7bc      	b.n	800a52c <_printf_i+0x148>
 800a5b2:	6833      	ldr	r3, [r6, #0]
 800a5b4:	1d1a      	adds	r2, r3, #4
 800a5b6:	6032      	str	r2, [r6, #0]
 800a5b8:	681e      	ldr	r6, [r3, #0]
 800a5ba:	6862      	ldr	r2, [r4, #4]
 800a5bc:	2100      	movs	r1, #0
 800a5be:	4630      	mov	r0, r6
 800a5c0:	f7f5 fe0e 	bl	80001e0 <memchr>
 800a5c4:	b108      	cbz	r0, 800a5ca <_printf_i+0x1e6>
 800a5c6:	1b80      	subs	r0, r0, r6
 800a5c8:	6060      	str	r0, [r4, #4]
 800a5ca:	6863      	ldr	r3, [r4, #4]
 800a5cc:	6123      	str	r3, [r4, #16]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5d4:	e7aa      	b.n	800a52c <_printf_i+0x148>
 800a5d6:	6923      	ldr	r3, [r4, #16]
 800a5d8:	4632      	mov	r2, r6
 800a5da:	4649      	mov	r1, r9
 800a5dc:	4640      	mov	r0, r8
 800a5de:	47d0      	blx	sl
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	d0ad      	beq.n	800a540 <_printf_i+0x15c>
 800a5e4:	6823      	ldr	r3, [r4, #0]
 800a5e6:	079b      	lsls	r3, r3, #30
 800a5e8:	d413      	bmi.n	800a612 <_printf_i+0x22e>
 800a5ea:	68e0      	ldr	r0, [r4, #12]
 800a5ec:	9b03      	ldr	r3, [sp, #12]
 800a5ee:	4298      	cmp	r0, r3
 800a5f0:	bfb8      	it	lt
 800a5f2:	4618      	movlt	r0, r3
 800a5f4:	e7a6      	b.n	800a544 <_printf_i+0x160>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4632      	mov	r2, r6
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	47d0      	blx	sl
 800a600:	3001      	adds	r0, #1
 800a602:	d09d      	beq.n	800a540 <_printf_i+0x15c>
 800a604:	3501      	adds	r5, #1
 800a606:	68e3      	ldr	r3, [r4, #12]
 800a608:	9903      	ldr	r1, [sp, #12]
 800a60a:	1a5b      	subs	r3, r3, r1
 800a60c:	42ab      	cmp	r3, r5
 800a60e:	dcf2      	bgt.n	800a5f6 <_printf_i+0x212>
 800a610:	e7eb      	b.n	800a5ea <_printf_i+0x206>
 800a612:	2500      	movs	r5, #0
 800a614:	f104 0619 	add.w	r6, r4, #25
 800a618:	e7f5      	b.n	800a606 <_printf_i+0x222>
 800a61a:	bf00      	nop
 800a61c:	0801b97d 	.word	0x0801b97d
 800a620:	0801b98e 	.word	0x0801b98e

0800a624 <memmove>:
 800a624:	4288      	cmp	r0, r1
 800a626:	b510      	push	{r4, lr}
 800a628:	eb01 0402 	add.w	r4, r1, r2
 800a62c:	d902      	bls.n	800a634 <memmove+0x10>
 800a62e:	4284      	cmp	r4, r0
 800a630:	4623      	mov	r3, r4
 800a632:	d807      	bhi.n	800a644 <memmove+0x20>
 800a634:	1e43      	subs	r3, r0, #1
 800a636:	42a1      	cmp	r1, r4
 800a638:	d008      	beq.n	800a64c <memmove+0x28>
 800a63a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a63e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a642:	e7f8      	b.n	800a636 <memmove+0x12>
 800a644:	4402      	add	r2, r0
 800a646:	4601      	mov	r1, r0
 800a648:	428a      	cmp	r2, r1
 800a64a:	d100      	bne.n	800a64e <memmove+0x2a>
 800a64c:	bd10      	pop	{r4, pc}
 800a64e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a656:	e7f7      	b.n	800a648 <memmove+0x24>

0800a658 <_sbrk_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4d06      	ldr	r5, [pc, #24]	@ (800a674 <_sbrk_r+0x1c>)
 800a65c:	2300      	movs	r3, #0
 800a65e:	4604      	mov	r4, r0
 800a660:	4608      	mov	r0, r1
 800a662:	602b      	str	r3, [r5, #0]
 800a664:	f7f9 f8f8 	bl	8003858 <_sbrk>
 800a668:	1c43      	adds	r3, r0, #1
 800a66a:	d102      	bne.n	800a672 <_sbrk_r+0x1a>
 800a66c:	682b      	ldr	r3, [r5, #0]
 800a66e:	b103      	cbz	r3, 800a672 <_sbrk_r+0x1a>
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	bd38      	pop	{r3, r4, r5, pc}
 800a674:	200063b8 	.word	0x200063b8

0800a678 <memcpy>:
 800a678:	440a      	add	r2, r1
 800a67a:	4291      	cmp	r1, r2
 800a67c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a680:	d100      	bne.n	800a684 <memcpy+0xc>
 800a682:	4770      	bx	lr
 800a684:	b510      	push	{r4, lr}
 800a686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a68a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a68e:	4291      	cmp	r1, r2
 800a690:	d1f9      	bne.n	800a686 <memcpy+0xe>
 800a692:	bd10      	pop	{r4, pc}

0800a694 <_realloc_r>:
 800a694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a698:	4680      	mov	r8, r0
 800a69a:	4615      	mov	r5, r2
 800a69c:	460c      	mov	r4, r1
 800a69e:	b921      	cbnz	r1, 800a6aa <_realloc_r+0x16>
 800a6a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	f7ff bc4b 	b.w	8009f40 <_malloc_r>
 800a6aa:	b92a      	cbnz	r2, 800a6b8 <_realloc_r+0x24>
 800a6ac:	f7ff fbdc 	bl	8009e68 <_free_r>
 800a6b0:	2400      	movs	r4, #0
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b8:	f000 f81a 	bl	800a6f0 <_malloc_usable_size_r>
 800a6bc:	4285      	cmp	r5, r0
 800a6be:	4606      	mov	r6, r0
 800a6c0:	d802      	bhi.n	800a6c8 <_realloc_r+0x34>
 800a6c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a6c6:	d8f4      	bhi.n	800a6b2 <_realloc_r+0x1e>
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	f7ff fc38 	bl	8009f40 <_malloc_r>
 800a6d0:	4607      	mov	r7, r0
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d0ec      	beq.n	800a6b0 <_realloc_r+0x1c>
 800a6d6:	42b5      	cmp	r5, r6
 800a6d8:	462a      	mov	r2, r5
 800a6da:	4621      	mov	r1, r4
 800a6dc:	bf28      	it	cs
 800a6de:	4632      	movcs	r2, r6
 800a6e0:	f7ff ffca 	bl	800a678 <memcpy>
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	4640      	mov	r0, r8
 800a6e8:	f7ff fbbe 	bl	8009e68 <_free_r>
 800a6ec:	463c      	mov	r4, r7
 800a6ee:	e7e0      	b.n	800a6b2 <_realloc_r+0x1e>

0800a6f0 <_malloc_usable_size_r>:
 800a6f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6f4:	1f18      	subs	r0, r3, #4
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	bfbc      	itt	lt
 800a6fa:	580b      	ldrlt	r3, [r1, r0]
 800a6fc:	18c0      	addlt	r0, r0, r3
 800a6fe:	4770      	bx	lr

0800a700 <_init>:
 800a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a702:	bf00      	nop
 800a704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a706:	bc08      	pop	{r3}
 800a708:	469e      	mov	lr, r3
 800a70a:	4770      	bx	lr

0800a70c <_fini>:
 800a70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70e:	bf00      	nop
 800a710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a712:	bc08      	pop	{r3}
 800a714:	469e      	mov	lr, r3
 800a716:	4770      	bx	lr
